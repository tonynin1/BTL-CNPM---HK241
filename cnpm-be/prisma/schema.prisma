// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId         Int         @id @default(autoincrement())
  fname          String
  lname          String
  email          String       @unique
  phone          String
  usageHistory   String?
  password       String
  role           String
  spsomembers    SPSOMember[]
  customers      Customer[]
}

model SPSOMember {
  sosoMemberId   Int          @id @default(autoincrement())
  dob            DateTime
  address        String
  userId         Int
  user           User         @relation(fields: [userId], references: [userId])
  printers       Printer[]
  customers      Customer[]
  feedbacks      Feedback[]
}

model Customer {
  customerId         Int            @id @default(autoincrement())
  ppHistory          String?
  accBalance         Float          @default(0)
  summary            String?
  remainPages        Int            @default(0)
  userId             Int?
  user               User?          @relation(fields: [userId], references: [userId])
  spsoMemberId       Int?
  spsomember         SPSOMember?    @relation(fields: [spsoMemberId], references: [sosoMemberId])
  feedbacks          Feedback[]
  pagePurchaseOrders PagePurchaseOrder[]
  printOrders        PrintOrder[]
  documents          Document[]
}

model Feedback {
  feedbackId      Int            @id @default(autoincrement())
  customerId      Int
  customer        Customer        @relation(fields: [customerId], references: [customerId])
  spsomemberId    Int
  spsomember      SPSOMember      @relation(fields: [spsomemberId], references: [sosoMemberId])
  feedTime        DateTime
  rating          Int
  content         String
}

model Printer {
  printerId         Int                @id @default(autoincrement())
  model             String
  brand             String
  description       String?
  facility          String
  building          String
  room              String
  spsomemberId      Int
  spsomember        SPSOMember         @relation(fields: [spsomemberId], references: [sosoMemberId])
  pagePurchaseOrders PagePurchaseOrder[]
  documents         Document[]
}

model PagePurchaseOrder {
  ppoId          Int            @id @default(autoincrement())
  purchaseTime   DateTime
  customerId     Int
  customer       Customer        @relation(fields: [customerId], references: [customerId])
  ppoStatus      String          @default("Pending")
  pQuantity      Int
  paperType      String
  printerId      Int
  printer        Printer         @relation(fields: [printerId], references: [printerId])
  price          Float
}

model PrintOrder {
  printOrderId   Int            @id @default(autoincrement())
  attributes     String
  startTime      DateTime
  endTime        DateTime
  poStatus       String          @default("Pending")
  numCopies      Int
  customerId     Int
  customer       Customer        @relation(fields: [customerId], references: [customerId])
  contains       Contains[]
}

model Document {
  documentId     Int            @id @default(autoincrement())
  docName        String
  customerId     Int
  customer       Customer        @relation(fields: [customerId], references: [customerId])
  printerId      Int
  printer        Printer         @relation(fields: [printerId], references: [printerId])
  docQuantity    Int
  contains       Contains[]
}

model Contains {
  id             Int            @id @default(autoincrement())
  documentId     Int
  document       Document        @relation(fields: [documentId], references: [documentId])
  printOrderId   Int
  printOrder     PrintOrder      @relation(fields: [printOrderId], references: [printOrderId])
}