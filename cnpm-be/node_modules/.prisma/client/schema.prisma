// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  adminEmail String @id @unique
  password   String
  User       User[]
}

model User {
  userId       Int          @id @default(autoincrement())
  fname        String
  lname        String
  email        String       @unique
  phone        String
  usageHistory String?
  hash         String
  hashedRt     String?
  role         String
  adminEmail   String
  admin        Admin        @relation(fields: [adminEmail], references: [adminEmail])
  spsomembers  SPSOMember[]
  customers    Customer[]
  createAt     DateTime     @default(now())
  updateAt     DateTime     @updatedAt
}

model SPSOMember {
  sosoMemberId Int        @id @default(autoincrement())
  dob          DateTime
  address      String
  userId       Int
  user         User       @relation(fields: [userId], references: [userId])
  printers     Printer[]
  customers    Customer[]
}

model Customer {
  customerId         Int                 @id @default(autoincrement())
  ppHistory          String?
  accBalance         Float               @default(0)
  summary            String?
  remainPages        Int                 @default(0)
  userId             Int
  user               User?               @relation(fields: [userId], references: [userId])
  spsoMemberId       Int?
  spsomember         SPSOMember?         @relation(fields: [spsoMemberId], references: [sosoMemberId])
  feedbacks          Feedback[]
  pagePurchaseOrders PagePurchaseOrder[]
  printOrders        PrintOrder[]
  documents          Document[]
  deposits           Deposit[]
}

model Feedback {
  feedbackId        Int      @id @default(autoincrement())
  customerId        Int
  customer          Customer @relation(fields: [customerId], references: [customerId])
  feedTime          DateTime
  rating            Int
  contentByCustomer String
}

model Printer {
  printerId    Int          @id @default(autoincrement())
  model        String
  brand        String
  description  String?
  facility     String
  status       String       @default("VALID")
  building     String
  room         String
  spsomemberId Int
  spsomember   SPSOMember   @relation(fields: [spsomemberId], references: [sosoMemberId])
  printOrders  PrintOrder[]
}

model PagePurchaseOrder {
  ppoId         Int      @id @default(autoincrement())
  purchaseTime  DateTime
  customerId    Int
  customer      Customer @relation(fields: [customerId], references: [customerId])
  ppoStatus     String   @default("Pending")
  pageNum       Int      @default(0)
  price         Float
  paymentMethod String
}

model Deposit {
  depositId     Int      @id @default(autoincrement())
  depositTime   DateTime
  customerId    Int
  customer      Customer @relation(fields: [customerId], references: [customerId])
  depositStatus String
  amount        Int
}

model PrintOrder {
  printOrderId Int        @id @default(autoincrement())
  attributes   String
  startTime    DateTime
  endTime      DateTime
  poStatus     String     @default("Pending")
  numCopies    Int
  customerId   Int
  customer     Customer   @relation(fields: [customerId], references: [customerId])
  docId        Int
  document     Document   @relation(fields: [docId], references: [documentId])
  printerId    Int
  printer      Printer    @relation(fields: [printerId], references: [printerId])
  contains     Contains[]
}

model Document {
  documentId  Int          @id @default(autoincrement())
  docName     String
  customerId  Int
  customer    Customer     @relation(fields: [customerId], references: [customerId])
  docQuantity Int
  docLink     String?
  contains    Contains[]
  printOrders PrintOrder[]
}

model Contains {
  id           Int        @id @default(autoincrement())
  documentId   Int
  document     Document   @relation(fields: [documentId], references: [documentId])
  printOrderId Int
  printOrder   PrintOrder @relation(fields: [printOrderId], references: [printOrderId])
}
