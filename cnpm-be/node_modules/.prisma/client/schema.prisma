// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// SPSO Member table
model SPSOMember {
  memberId     String    @id
  birthDate    DateTime
  address      String
  fullName     String
  email        String
  phoneNumber  String
  usageHistory String
  customer     Customer?
}

// Customer table
model Customer {
  customerId              String          @id
  purchaseAndPrintHistory String
  accountBalance          Float
  summary                 String
  remainingPages          Int
  fullName                String
  email                   String
  phoneNumber             String
  usageHistory            String
  parameterChanges        String
  spsomember              SPSOMember?     @relation(fields: [memberId], references: [memberId])
  memberId                String?         @unique
  feedbacks               Feedback[]
  purchaseOrders          PurchaseOrder[]
  printOrders             PrintOrder[]
}

// Feedback table
model Feedback {
  feedbackId   String   @id
  rating       Int
  content      String
  feedbackTime DateTime
  customer     Customer @relation(fields: [customerId], references: [customerId])
  customerId   String
}

// Printer table
model Printer {
  printerId      String          @id
  printerType    String
  brandName      String
  description    String
  facility       String
  building       String
  room           String
  isInstalled    Boolean
  purchaseOrders PurchaseOrder[]
  printOrders    PrintOrder[]
  printRecords   PrintRecord[] // Added the opposite relation field here
}

// Purchase Order table
model PurchaseOrder {
  transactionId String   @id
  purchaseTime  DateTime
  price         Float
  status        String
  quantity      Int
  paperType     String
  customer      Customer @relation(fields: [customerId], references: [customerId])
  customerId    String
  printer       Printer  @relation(fields: [printerId], references: [printerId])
  printerId     String
}

// Print Order table
model PrintOrder {
  orderId         String   @id
  printAttributes String
  startTime       DateTime
  endTime         DateTime
  status          String
  copyCount       Int
  printedDocument String
  customer        Customer @relation(fields: [customerId], references: [customerId])
  customerId      String
  printer         Printer  @relation(fields: [printerId], references: [printerId])
  printerId       String
}

// Document table
model Document {
  documentId       String        @id
  title            String
  documentCount    Int
  requiredDocument String
  printRecords     PrintRecord[]
}

// Print Record table (link between Document and Printer)
model PrintRecord {
  documentId String
  printerId  String
  document   Document @relation(fields: [documentId], references: [documentId])
  printer    Printer  @relation(fields: [printerId], references: [printerId])

  @@id([documentId, printerId])
}
