
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Admin
 * 
 */
export type Admin = $Result.DefaultSelection<Prisma.$AdminPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model SPSOMember
 * 
 */
export type SPSOMember = $Result.DefaultSelection<Prisma.$SPSOMemberPayload>
/**
 * Model Customer
 * 
 */
export type Customer = $Result.DefaultSelection<Prisma.$CustomerPayload>
/**
 * Model Feedback
 * 
 */
export type Feedback = $Result.DefaultSelection<Prisma.$FeedbackPayload>
/**
 * Model Printer
 * 
 */
export type Printer = $Result.DefaultSelection<Prisma.$PrinterPayload>
/**
 * Model PagePurchaseOrder
 * 
 */
export type PagePurchaseOrder = $Result.DefaultSelection<Prisma.$PagePurchaseOrderPayload>
/**
 * Model PrintOrder
 * 
 */
export type PrintOrder = $Result.DefaultSelection<Prisma.$PrintOrderPayload>
/**
 * Model Document
 * 
 */
export type Document = $Result.DefaultSelection<Prisma.$DocumentPayload>
/**
 * Model Contains
 * 
 */
export type Contains = $Result.DefaultSelection<Prisma.$ContainsPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Admins
 * const admins = await prisma.admin.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Admins
   * const admins = await prisma.admin.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.sPSOMember`: Exposes CRUD operations for the **SPSOMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SPSOMembers
    * const sPSOMembers = await prisma.sPSOMember.findMany()
    * ```
    */
  get sPSOMember(): Prisma.SPSOMemberDelegate<ExtArgs>;

  /**
   * `prisma.customer`: Exposes CRUD operations for the **Customer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customer.findMany()
    * ```
    */
  get customer(): Prisma.CustomerDelegate<ExtArgs>;

  /**
   * `prisma.feedback`: Exposes CRUD operations for the **Feedback** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Feedbacks
    * const feedbacks = await prisma.feedback.findMany()
    * ```
    */
  get feedback(): Prisma.FeedbackDelegate<ExtArgs>;

  /**
   * `prisma.printer`: Exposes CRUD operations for the **Printer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Printers
    * const printers = await prisma.printer.findMany()
    * ```
    */
  get printer(): Prisma.PrinterDelegate<ExtArgs>;

  /**
   * `prisma.pagePurchaseOrder`: Exposes CRUD operations for the **PagePurchaseOrder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PagePurchaseOrders
    * const pagePurchaseOrders = await prisma.pagePurchaseOrder.findMany()
    * ```
    */
  get pagePurchaseOrder(): Prisma.PagePurchaseOrderDelegate<ExtArgs>;

  /**
   * `prisma.printOrder`: Exposes CRUD operations for the **PrintOrder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PrintOrders
    * const printOrders = await prisma.printOrder.findMany()
    * ```
    */
  get printOrder(): Prisma.PrintOrderDelegate<ExtArgs>;

  /**
   * `prisma.document`: Exposes CRUD operations for the **Document** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Documents
    * const documents = await prisma.document.findMany()
    * ```
    */
  get document(): Prisma.DocumentDelegate<ExtArgs>;

  /**
   * `prisma.contains`: Exposes CRUD operations for the **Contains** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contains
    * const contains = await prisma.contains.findMany()
    * ```
    */
  get contains(): Prisma.ContainsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Admin: 'Admin',
    User: 'User',
    SPSOMember: 'SPSOMember',
    Customer: 'Customer',
    Feedback: 'Feedback',
    Printer: 'Printer',
    PagePurchaseOrder: 'PagePurchaseOrder',
    PrintOrder: 'PrintOrder',
    Document: 'Document',
    Contains: 'Contains'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "admin" | "user" | "sPSOMember" | "customer" | "feedback" | "printer" | "pagePurchaseOrder" | "printOrder" | "document" | "contains"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Admin: {
        payload: Prisma.$AdminPayload<ExtArgs>
        fields: Prisma.AdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findFirst: {
            args: Prisma.AdminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findMany: {
            args: Prisma.AdminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          create: {
            args: Prisma.AdminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          createMany: {
            args: Prisma.AdminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdminCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          delete: {
            args: Prisma.AdminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          update: {
            args: Prisma.AdminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          deleteMany: {
            args: Prisma.AdminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AdminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          aggregate: {
            args: Prisma.AdminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdmin>
          }
          groupBy: {
            args: Prisma.AdminGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminCountArgs<ExtArgs>
            result: $Utils.Optional<AdminCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      SPSOMember: {
        payload: Prisma.$SPSOMemberPayload<ExtArgs>
        fields: Prisma.SPSOMemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SPSOMemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SPSOMemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SPSOMemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SPSOMemberPayload>
          }
          findFirst: {
            args: Prisma.SPSOMemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SPSOMemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SPSOMemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SPSOMemberPayload>
          }
          findMany: {
            args: Prisma.SPSOMemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SPSOMemberPayload>[]
          }
          create: {
            args: Prisma.SPSOMemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SPSOMemberPayload>
          }
          createMany: {
            args: Prisma.SPSOMemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SPSOMemberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SPSOMemberPayload>[]
          }
          delete: {
            args: Prisma.SPSOMemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SPSOMemberPayload>
          }
          update: {
            args: Prisma.SPSOMemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SPSOMemberPayload>
          }
          deleteMany: {
            args: Prisma.SPSOMemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SPSOMemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SPSOMemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SPSOMemberPayload>
          }
          aggregate: {
            args: Prisma.SPSOMemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSPSOMember>
          }
          groupBy: {
            args: Prisma.SPSOMemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<SPSOMemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.SPSOMemberCountArgs<ExtArgs>
            result: $Utils.Optional<SPSOMemberCountAggregateOutputType> | number
          }
        }
      }
      Customer: {
        payload: Prisma.$CustomerPayload<ExtArgs>
        fields: Prisma.CustomerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findFirst: {
            args: Prisma.CustomerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findMany: {
            args: Prisma.CustomerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          create: {
            args: Prisma.CustomerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          createMany: {
            args: Prisma.CustomerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          delete: {
            args: Prisma.CustomerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          update: {
            args: Prisma.CustomerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          deleteMany: {
            args: Prisma.CustomerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CustomerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          aggregate: {
            args: Prisma.CustomerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomer>
          }
          groupBy: {
            args: Prisma.CustomerGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerCountAggregateOutputType> | number
          }
        }
      }
      Feedback: {
        payload: Prisma.$FeedbackPayload<ExtArgs>
        fields: Prisma.FeedbackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeedbackFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeedbackFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findFirst: {
            args: Prisma.FeedbackFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeedbackFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findMany: {
            args: Prisma.FeedbackFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          create: {
            args: Prisma.FeedbackCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          createMany: {
            args: Prisma.FeedbackCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FeedbackCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          delete: {
            args: Prisma.FeedbackDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          update: {
            args: Prisma.FeedbackUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          deleteMany: {
            args: Prisma.FeedbackDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeedbackUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FeedbackUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          aggregate: {
            args: Prisma.FeedbackAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeedback>
          }
          groupBy: {
            args: Prisma.FeedbackGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeedbackGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeedbackCountArgs<ExtArgs>
            result: $Utils.Optional<FeedbackCountAggregateOutputType> | number
          }
        }
      }
      Printer: {
        payload: Prisma.$PrinterPayload<ExtArgs>
        fields: Prisma.PrinterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PrinterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrinterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PrinterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrinterPayload>
          }
          findFirst: {
            args: Prisma.PrinterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrinterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PrinterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrinterPayload>
          }
          findMany: {
            args: Prisma.PrinterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrinterPayload>[]
          }
          create: {
            args: Prisma.PrinterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrinterPayload>
          }
          createMany: {
            args: Prisma.PrinterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PrinterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrinterPayload>[]
          }
          delete: {
            args: Prisma.PrinterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrinterPayload>
          }
          update: {
            args: Prisma.PrinterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrinterPayload>
          }
          deleteMany: {
            args: Prisma.PrinterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PrinterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PrinterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrinterPayload>
          }
          aggregate: {
            args: Prisma.PrinterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePrinter>
          }
          groupBy: {
            args: Prisma.PrinterGroupByArgs<ExtArgs>
            result: $Utils.Optional<PrinterGroupByOutputType>[]
          }
          count: {
            args: Prisma.PrinterCountArgs<ExtArgs>
            result: $Utils.Optional<PrinterCountAggregateOutputType> | number
          }
        }
      }
      PagePurchaseOrder: {
        payload: Prisma.$PagePurchaseOrderPayload<ExtArgs>
        fields: Prisma.PagePurchaseOrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PagePurchaseOrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePurchaseOrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PagePurchaseOrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePurchaseOrderPayload>
          }
          findFirst: {
            args: Prisma.PagePurchaseOrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePurchaseOrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PagePurchaseOrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePurchaseOrderPayload>
          }
          findMany: {
            args: Prisma.PagePurchaseOrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePurchaseOrderPayload>[]
          }
          create: {
            args: Prisma.PagePurchaseOrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePurchaseOrderPayload>
          }
          createMany: {
            args: Prisma.PagePurchaseOrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PagePurchaseOrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePurchaseOrderPayload>[]
          }
          delete: {
            args: Prisma.PagePurchaseOrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePurchaseOrderPayload>
          }
          update: {
            args: Prisma.PagePurchaseOrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePurchaseOrderPayload>
          }
          deleteMany: {
            args: Prisma.PagePurchaseOrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PagePurchaseOrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PagePurchaseOrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePurchaseOrderPayload>
          }
          aggregate: {
            args: Prisma.PagePurchaseOrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePagePurchaseOrder>
          }
          groupBy: {
            args: Prisma.PagePurchaseOrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<PagePurchaseOrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.PagePurchaseOrderCountArgs<ExtArgs>
            result: $Utils.Optional<PagePurchaseOrderCountAggregateOutputType> | number
          }
        }
      }
      PrintOrder: {
        payload: Prisma.$PrintOrderPayload<ExtArgs>
        fields: Prisma.PrintOrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PrintOrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrintOrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PrintOrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrintOrderPayload>
          }
          findFirst: {
            args: Prisma.PrintOrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrintOrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PrintOrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrintOrderPayload>
          }
          findMany: {
            args: Prisma.PrintOrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrintOrderPayload>[]
          }
          create: {
            args: Prisma.PrintOrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrintOrderPayload>
          }
          createMany: {
            args: Prisma.PrintOrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PrintOrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrintOrderPayload>[]
          }
          delete: {
            args: Prisma.PrintOrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrintOrderPayload>
          }
          update: {
            args: Prisma.PrintOrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrintOrderPayload>
          }
          deleteMany: {
            args: Prisma.PrintOrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PrintOrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PrintOrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrintOrderPayload>
          }
          aggregate: {
            args: Prisma.PrintOrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePrintOrder>
          }
          groupBy: {
            args: Prisma.PrintOrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<PrintOrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.PrintOrderCountArgs<ExtArgs>
            result: $Utils.Optional<PrintOrderCountAggregateOutputType> | number
          }
        }
      }
      Document: {
        payload: Prisma.$DocumentPayload<ExtArgs>
        fields: Prisma.DocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findFirst: {
            args: Prisma.DocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findMany: {
            args: Prisma.DocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          create: {
            args: Prisma.DocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          createMany: {
            args: Prisma.DocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          delete: {
            args: Prisma.DocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          update: {
            args: Prisma.DocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          deleteMany: {
            args: Prisma.DocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          aggregate: {
            args: Prisma.DocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocument>
          }
          groupBy: {
            args: Prisma.DocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentCountAggregateOutputType> | number
          }
        }
      }
      Contains: {
        payload: Prisma.$ContainsPayload<ExtArgs>
        fields: Prisma.ContainsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContainsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContainsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainsPayload>
          }
          findFirst: {
            args: Prisma.ContainsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContainsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainsPayload>
          }
          findMany: {
            args: Prisma.ContainsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainsPayload>[]
          }
          create: {
            args: Prisma.ContainsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainsPayload>
          }
          createMany: {
            args: Prisma.ContainsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContainsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainsPayload>[]
          }
          delete: {
            args: Prisma.ContainsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainsPayload>
          }
          update: {
            args: Prisma.ContainsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainsPayload>
          }
          deleteMany: {
            args: Prisma.ContainsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContainsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ContainsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainsPayload>
          }
          aggregate: {
            args: Prisma.ContainsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContains>
          }
          groupBy: {
            args: Prisma.ContainsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContainsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContainsCountArgs<ExtArgs>
            result: $Utils.Optional<ContainsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AdminCountOutputType
   */

  export type AdminCountOutputType = {
    User: number
  }

  export type AdminCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | AdminCountOutputTypeCountUserArgs
  }

  // Custom InputTypes
  /**
   * AdminCountOutputType without action
   */
  export type AdminCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminCountOutputType
     */
    select?: AdminCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AdminCountOutputType without action
   */
  export type AdminCountOutputTypeCountUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    spsomembers: number
    customers: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    spsomembers?: boolean | UserCountOutputTypeCountSpsomembersArgs
    customers?: boolean | UserCountOutputTypeCountCustomersArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSpsomembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SPSOMemberWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCustomersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
  }


  /**
   * Count Type SPSOMemberCountOutputType
   */

  export type SPSOMemberCountOutputType = {
    printers: number
    customers: number
  }

  export type SPSOMemberCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    printers?: boolean | SPSOMemberCountOutputTypeCountPrintersArgs
    customers?: boolean | SPSOMemberCountOutputTypeCountCustomersArgs
  }

  // Custom InputTypes
  /**
   * SPSOMemberCountOutputType without action
   */
  export type SPSOMemberCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SPSOMemberCountOutputType
     */
    select?: SPSOMemberCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SPSOMemberCountOutputType without action
   */
  export type SPSOMemberCountOutputTypeCountPrintersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrinterWhereInput
  }

  /**
   * SPSOMemberCountOutputType without action
   */
  export type SPSOMemberCountOutputTypeCountCustomersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
  }


  /**
   * Count Type CustomerCountOutputType
   */

  export type CustomerCountOutputType = {
    feedbacks: number
    pagePurchaseOrders: number
    printOrders: number
    documents: number
  }

  export type CustomerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feedbacks?: boolean | CustomerCountOutputTypeCountFeedbacksArgs
    pagePurchaseOrders?: boolean | CustomerCountOutputTypeCountPagePurchaseOrdersArgs
    printOrders?: boolean | CustomerCountOutputTypeCountPrintOrdersArgs
    documents?: boolean | CustomerCountOutputTypeCountDocumentsArgs
  }

  // Custom InputTypes
  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCountOutputType
     */
    select?: CustomerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountPagePurchaseOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PagePurchaseOrderWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountPrintOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrintOrderWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }


  /**
   * Count Type PrinterCountOutputType
   */

  export type PrinterCountOutputType = {
    documents: number
  }

  export type PrinterCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documents?: boolean | PrinterCountOutputTypeCountDocumentsArgs
  }

  // Custom InputTypes
  /**
   * PrinterCountOutputType without action
   */
  export type PrinterCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrinterCountOutputType
     */
    select?: PrinterCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PrinterCountOutputType without action
   */
  export type PrinterCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }


  /**
   * Count Type PrintOrderCountOutputType
   */

  export type PrintOrderCountOutputType = {
    contains: number
  }

  export type PrintOrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contains?: boolean | PrintOrderCountOutputTypeCountContainsArgs
  }

  // Custom InputTypes
  /**
   * PrintOrderCountOutputType without action
   */
  export type PrintOrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintOrderCountOutputType
     */
    select?: PrintOrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PrintOrderCountOutputType without action
   */
  export type PrintOrderCountOutputTypeCountContainsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContainsWhereInput
  }


  /**
   * Count Type DocumentCountOutputType
   */

  export type DocumentCountOutputType = {
    contains: number
  }

  export type DocumentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contains?: boolean | DocumentCountOutputTypeCountContainsArgs
  }

  // Custom InputTypes
  /**
   * DocumentCountOutputType without action
   */
  export type DocumentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentCountOutputType
     */
    select?: DocumentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DocumentCountOutputType without action
   */
  export type DocumentCountOutputTypeCountContainsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContainsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Admin
   */

  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminMinAggregateOutputType = {
    adminEmail: string | null
    password: string | null
  }

  export type AdminMaxAggregateOutputType = {
    adminEmail: string | null
    password: string | null
  }

  export type AdminCountAggregateOutputType = {
    adminEmail: number
    password: number
    _all: number
  }


  export type AdminMinAggregateInputType = {
    adminEmail?: true
    password?: true
  }

  export type AdminMaxAggregateInputType = {
    adminEmail?: true
    password?: true
  }

  export type AdminCountAggregateInputType = {
    adminEmail?: true
    password?: true
    _all?: true
  }

  export type AdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admin to aggregate.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithAggregationInput | AdminOrderByWithAggregationInput[]
    by: AdminScalarFieldEnum[] | AdminScalarFieldEnum
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }

  export type AdminGroupByOutputType = {
    adminEmail: string
    password: string
    _count: AdminCountAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    adminEmail?: boolean
    password?: boolean
    User?: boolean | Admin$UserArgs<ExtArgs>
    _count?: boolean | AdminCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    adminEmail?: boolean
    password?: boolean
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectScalar = {
    adminEmail?: boolean
    password?: boolean
  }

  export type AdminInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | Admin$UserArgs<ExtArgs>
    _count?: boolean | AdminCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AdminIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Admin"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      adminEmail: string
      password: string
    }, ExtArgs["result"]["admin"]>
    composites: {}
  }

  type AdminGetPayload<S extends boolean | null | undefined | AdminDefaultArgs> = $Result.GetResult<Prisma.$AdminPayload, S>

  type AdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AdminFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface AdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Admin'], meta: { name: 'Admin' } }
    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminFindUniqueArgs>(args: SelectSubset<T, AdminFindUniqueArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Admin that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminFindFirstArgs>(args?: SelectSubset<T, AdminFindFirstArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Admin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `adminEmail`
     * const adminWithAdminEmailOnly = await prisma.admin.findMany({ select: { adminEmail: true } })
     * 
     */
    findMany<T extends AdminFindManyArgs>(args?: SelectSubset<T, AdminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
     */
    create<T extends AdminCreateArgs>(args: SelectSubset<T, AdminCreateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Admins.
     * @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminCreateManyArgs>(args?: SelectSubset<T, AdminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Admins and returns the data saved in the database.
     * @param {AdminCreateManyAndReturnArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Admins and only return the `adminEmail`
     * const adminWithAdminEmailOnly = await prisma.admin.createManyAndReturn({ 
     *   select: { adminEmail: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdminCreateManyAndReturnArgs>(args?: SelectSubset<T, AdminCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
     */
    delete<T extends AdminDeleteArgs>(args: SelectSubset<T, AdminDeleteArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminUpdateArgs>(args: SelectSubset<T, AdminUpdateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminDeleteManyArgs>(args?: SelectSubset<T, AdminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminUpdateManyArgs>(args: SelectSubset<T, AdminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
     */
    upsert<T extends AdminUpsertArgs>(args: SelectSubset<T, AdminUpsertArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Admin model
   */
  readonly fields: AdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends Admin$UserArgs<ExtArgs> = {}>(args?: Subset<T, Admin$UserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Admin model
   */ 
  interface AdminFieldRefs {
    readonly adminEmail: FieldRef<"Admin", 'String'>
    readonly password: FieldRef<"Admin", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Admin findUnique
   */
  export type AdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findFirst
   */
  export type AdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findMany
   */
  export type AdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admins to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin create
   */
  export type AdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The data needed to create a Admin.
     */
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }

  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Admin createManyAndReturn
   */
  export type AdminCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Admin update
   */
  export type AdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The data needed to update a Admin.
     */
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
  }

  /**
   * Admin upsert
   */
  export type AdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The filter to search for the Admin to update in case it exists.
     */
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     */
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }

  /**
   * Admin delete
   */
  export type AdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter which Admin to delete.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admins to delete
     */
    where?: AdminWhereInput
  }

  /**
   * Admin.User
   */
  export type Admin$UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Admin without action
   */
  export type AdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    userId: number | null
  }

  export type UserSumAggregateOutputType = {
    userId: number | null
  }

  export type UserMinAggregateOutputType = {
    userId: number | null
    fname: string | null
    lname: string | null
    email: string | null
    phone: string | null
    usageHistory: string | null
    hash: string | null
    hashedRt: string | null
    role: string | null
    adminEmail: string | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    userId: number | null
    fname: string | null
    lname: string | null
    email: string | null
    phone: string | null
    usageHistory: string | null
    hash: string | null
    hashedRt: string | null
    role: string | null
    adminEmail: string | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    userId: number
    fname: number
    lname: number
    email: number
    phone: number
    usageHistory: number
    hash: number
    hashedRt: number
    role: number
    adminEmail: number
    createAt: number
    updateAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    userId?: true
  }

  export type UserSumAggregateInputType = {
    userId?: true
  }

  export type UserMinAggregateInputType = {
    userId?: true
    fname?: true
    lname?: true
    email?: true
    phone?: true
    usageHistory?: true
    hash?: true
    hashedRt?: true
    role?: true
    adminEmail?: true
    createAt?: true
    updateAt?: true
  }

  export type UserMaxAggregateInputType = {
    userId?: true
    fname?: true
    lname?: true
    email?: true
    phone?: true
    usageHistory?: true
    hash?: true
    hashedRt?: true
    role?: true
    adminEmail?: true
    createAt?: true
    updateAt?: true
  }

  export type UserCountAggregateInputType = {
    userId?: true
    fname?: true
    lname?: true
    email?: true
    phone?: true
    usageHistory?: true
    hash?: true
    hashedRt?: true
    role?: true
    adminEmail?: true
    createAt?: true
    updateAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    userId: number
    fname: string
    lname: string
    email: string
    phone: string
    usageHistory: string | null
    hash: string
    hashedRt: string | null
    role: string
    adminEmail: string
    createAt: Date
    updateAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    fname?: boolean
    lname?: boolean
    email?: boolean
    phone?: boolean
    usageHistory?: boolean
    hash?: boolean
    hashedRt?: boolean
    role?: boolean
    adminEmail?: boolean
    createAt?: boolean
    updateAt?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    spsomembers?: boolean | User$spsomembersArgs<ExtArgs>
    customers?: boolean | User$customersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    fname?: boolean
    lname?: boolean
    email?: boolean
    phone?: boolean
    usageHistory?: boolean
    hash?: boolean
    hashedRt?: boolean
    role?: boolean
    adminEmail?: boolean
    createAt?: boolean
    updateAt?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    userId?: boolean
    fname?: boolean
    lname?: boolean
    email?: boolean
    phone?: boolean
    usageHistory?: boolean
    hash?: boolean
    hashedRt?: boolean
    role?: boolean
    adminEmail?: boolean
    createAt?: boolean
    updateAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    spsomembers?: boolean | User$spsomembersArgs<ExtArgs>
    customers?: boolean | User$customersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      admin: Prisma.$AdminPayload<ExtArgs>
      spsomembers: Prisma.$SPSOMemberPayload<ExtArgs>[]
      customers: Prisma.$CustomerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: number
      fname: string
      lname: string
      email: string
      phone: string
      usageHistory: string | null
      hash: string
      hashedRt: string | null
      role: string
      adminEmail: string
      createAt: Date
      updateAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userWithUserIdOnly = await prisma.user.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `userId`
     * const userWithUserIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    admin<T extends AdminDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AdminDefaultArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    spsomembers<T extends User$spsomembersArgs<ExtArgs> = {}>(args?: Subset<T, User$spsomembersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SPSOMemberPayload<ExtArgs>, T, "findMany"> | Null>
    customers<T extends User$customersArgs<ExtArgs> = {}>(args?: Subset<T, User$customersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly userId: FieldRef<"User", 'Int'>
    readonly fname: FieldRef<"User", 'String'>
    readonly lname: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly usageHistory: FieldRef<"User", 'String'>
    readonly hash: FieldRef<"User", 'String'>
    readonly hashedRt: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly adminEmail: FieldRef<"User", 'String'>
    readonly createAt: FieldRef<"User", 'DateTime'>
    readonly updateAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.spsomembers
   */
  export type User$spsomembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SPSOMember
     */
    select?: SPSOMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SPSOMemberInclude<ExtArgs> | null
    where?: SPSOMemberWhereInput
    orderBy?: SPSOMemberOrderByWithRelationInput | SPSOMemberOrderByWithRelationInput[]
    cursor?: SPSOMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SPSOMemberScalarFieldEnum | SPSOMemberScalarFieldEnum[]
  }

  /**
   * User.customers
   */
  export type User$customersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    where?: CustomerWhereInput
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    cursor?: CustomerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model SPSOMember
   */

  export type AggregateSPSOMember = {
    _count: SPSOMemberCountAggregateOutputType | null
    _avg: SPSOMemberAvgAggregateOutputType | null
    _sum: SPSOMemberSumAggregateOutputType | null
    _min: SPSOMemberMinAggregateOutputType | null
    _max: SPSOMemberMaxAggregateOutputType | null
  }

  export type SPSOMemberAvgAggregateOutputType = {
    sosoMemberId: number | null
    userId: number | null
  }

  export type SPSOMemberSumAggregateOutputType = {
    sosoMemberId: number | null
    userId: number | null
  }

  export type SPSOMemberMinAggregateOutputType = {
    sosoMemberId: number | null
    dob: Date | null
    address: string | null
    userId: number | null
  }

  export type SPSOMemberMaxAggregateOutputType = {
    sosoMemberId: number | null
    dob: Date | null
    address: string | null
    userId: number | null
  }

  export type SPSOMemberCountAggregateOutputType = {
    sosoMemberId: number
    dob: number
    address: number
    userId: number
    _all: number
  }


  export type SPSOMemberAvgAggregateInputType = {
    sosoMemberId?: true
    userId?: true
  }

  export type SPSOMemberSumAggregateInputType = {
    sosoMemberId?: true
    userId?: true
  }

  export type SPSOMemberMinAggregateInputType = {
    sosoMemberId?: true
    dob?: true
    address?: true
    userId?: true
  }

  export type SPSOMemberMaxAggregateInputType = {
    sosoMemberId?: true
    dob?: true
    address?: true
    userId?: true
  }

  export type SPSOMemberCountAggregateInputType = {
    sosoMemberId?: true
    dob?: true
    address?: true
    userId?: true
    _all?: true
  }

  export type SPSOMemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SPSOMember to aggregate.
     */
    where?: SPSOMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SPSOMembers to fetch.
     */
    orderBy?: SPSOMemberOrderByWithRelationInput | SPSOMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SPSOMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SPSOMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SPSOMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SPSOMembers
    **/
    _count?: true | SPSOMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SPSOMemberAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SPSOMemberSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SPSOMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SPSOMemberMaxAggregateInputType
  }

  export type GetSPSOMemberAggregateType<T extends SPSOMemberAggregateArgs> = {
        [P in keyof T & keyof AggregateSPSOMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSPSOMember[P]>
      : GetScalarType<T[P], AggregateSPSOMember[P]>
  }




  export type SPSOMemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SPSOMemberWhereInput
    orderBy?: SPSOMemberOrderByWithAggregationInput | SPSOMemberOrderByWithAggregationInput[]
    by: SPSOMemberScalarFieldEnum[] | SPSOMemberScalarFieldEnum
    having?: SPSOMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SPSOMemberCountAggregateInputType | true
    _avg?: SPSOMemberAvgAggregateInputType
    _sum?: SPSOMemberSumAggregateInputType
    _min?: SPSOMemberMinAggregateInputType
    _max?: SPSOMemberMaxAggregateInputType
  }

  export type SPSOMemberGroupByOutputType = {
    sosoMemberId: number
    dob: Date
    address: string
    userId: number
    _count: SPSOMemberCountAggregateOutputType | null
    _avg: SPSOMemberAvgAggregateOutputType | null
    _sum: SPSOMemberSumAggregateOutputType | null
    _min: SPSOMemberMinAggregateOutputType | null
    _max: SPSOMemberMaxAggregateOutputType | null
  }

  type GetSPSOMemberGroupByPayload<T extends SPSOMemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SPSOMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SPSOMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SPSOMemberGroupByOutputType[P]>
            : GetScalarType<T[P], SPSOMemberGroupByOutputType[P]>
        }
      >
    >


  export type SPSOMemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sosoMemberId?: boolean
    dob?: boolean
    address?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    printers?: boolean | SPSOMember$printersArgs<ExtArgs>
    customers?: boolean | SPSOMember$customersArgs<ExtArgs>
    _count?: boolean | SPSOMemberCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sPSOMember"]>

  export type SPSOMemberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sosoMemberId?: boolean
    dob?: boolean
    address?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sPSOMember"]>

  export type SPSOMemberSelectScalar = {
    sosoMemberId?: boolean
    dob?: boolean
    address?: boolean
    userId?: boolean
  }

  export type SPSOMemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    printers?: boolean | SPSOMember$printersArgs<ExtArgs>
    customers?: boolean | SPSOMember$customersArgs<ExtArgs>
    _count?: boolean | SPSOMemberCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SPSOMemberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SPSOMemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SPSOMember"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      printers: Prisma.$PrinterPayload<ExtArgs>[]
      customers: Prisma.$CustomerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      sosoMemberId: number
      dob: Date
      address: string
      userId: number
    }, ExtArgs["result"]["sPSOMember"]>
    composites: {}
  }

  type SPSOMemberGetPayload<S extends boolean | null | undefined | SPSOMemberDefaultArgs> = $Result.GetResult<Prisma.$SPSOMemberPayload, S>

  type SPSOMemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SPSOMemberFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SPSOMemberCountAggregateInputType | true
    }

  export interface SPSOMemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SPSOMember'], meta: { name: 'SPSOMember' } }
    /**
     * Find zero or one SPSOMember that matches the filter.
     * @param {SPSOMemberFindUniqueArgs} args - Arguments to find a SPSOMember
     * @example
     * // Get one SPSOMember
     * const sPSOMember = await prisma.sPSOMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SPSOMemberFindUniqueArgs>(args: SelectSubset<T, SPSOMemberFindUniqueArgs<ExtArgs>>): Prisma__SPSOMemberClient<$Result.GetResult<Prisma.$SPSOMemberPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SPSOMember that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SPSOMemberFindUniqueOrThrowArgs} args - Arguments to find a SPSOMember
     * @example
     * // Get one SPSOMember
     * const sPSOMember = await prisma.sPSOMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SPSOMemberFindUniqueOrThrowArgs>(args: SelectSubset<T, SPSOMemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SPSOMemberClient<$Result.GetResult<Prisma.$SPSOMemberPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SPSOMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SPSOMemberFindFirstArgs} args - Arguments to find a SPSOMember
     * @example
     * // Get one SPSOMember
     * const sPSOMember = await prisma.sPSOMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SPSOMemberFindFirstArgs>(args?: SelectSubset<T, SPSOMemberFindFirstArgs<ExtArgs>>): Prisma__SPSOMemberClient<$Result.GetResult<Prisma.$SPSOMemberPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SPSOMember that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SPSOMemberFindFirstOrThrowArgs} args - Arguments to find a SPSOMember
     * @example
     * // Get one SPSOMember
     * const sPSOMember = await prisma.sPSOMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SPSOMemberFindFirstOrThrowArgs>(args?: SelectSubset<T, SPSOMemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__SPSOMemberClient<$Result.GetResult<Prisma.$SPSOMemberPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SPSOMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SPSOMemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SPSOMembers
     * const sPSOMembers = await prisma.sPSOMember.findMany()
     * 
     * // Get first 10 SPSOMembers
     * const sPSOMembers = await prisma.sPSOMember.findMany({ take: 10 })
     * 
     * // Only select the `sosoMemberId`
     * const sPSOMemberWithSosoMemberIdOnly = await prisma.sPSOMember.findMany({ select: { sosoMemberId: true } })
     * 
     */
    findMany<T extends SPSOMemberFindManyArgs>(args?: SelectSubset<T, SPSOMemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SPSOMemberPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SPSOMember.
     * @param {SPSOMemberCreateArgs} args - Arguments to create a SPSOMember.
     * @example
     * // Create one SPSOMember
     * const SPSOMember = await prisma.sPSOMember.create({
     *   data: {
     *     // ... data to create a SPSOMember
     *   }
     * })
     * 
     */
    create<T extends SPSOMemberCreateArgs>(args: SelectSubset<T, SPSOMemberCreateArgs<ExtArgs>>): Prisma__SPSOMemberClient<$Result.GetResult<Prisma.$SPSOMemberPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SPSOMembers.
     * @param {SPSOMemberCreateManyArgs} args - Arguments to create many SPSOMembers.
     * @example
     * // Create many SPSOMembers
     * const sPSOMember = await prisma.sPSOMember.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SPSOMemberCreateManyArgs>(args?: SelectSubset<T, SPSOMemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SPSOMembers and returns the data saved in the database.
     * @param {SPSOMemberCreateManyAndReturnArgs} args - Arguments to create many SPSOMembers.
     * @example
     * // Create many SPSOMembers
     * const sPSOMember = await prisma.sPSOMember.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SPSOMembers and only return the `sosoMemberId`
     * const sPSOMemberWithSosoMemberIdOnly = await prisma.sPSOMember.createManyAndReturn({ 
     *   select: { sosoMemberId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SPSOMemberCreateManyAndReturnArgs>(args?: SelectSubset<T, SPSOMemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SPSOMemberPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SPSOMember.
     * @param {SPSOMemberDeleteArgs} args - Arguments to delete one SPSOMember.
     * @example
     * // Delete one SPSOMember
     * const SPSOMember = await prisma.sPSOMember.delete({
     *   where: {
     *     // ... filter to delete one SPSOMember
     *   }
     * })
     * 
     */
    delete<T extends SPSOMemberDeleteArgs>(args: SelectSubset<T, SPSOMemberDeleteArgs<ExtArgs>>): Prisma__SPSOMemberClient<$Result.GetResult<Prisma.$SPSOMemberPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SPSOMember.
     * @param {SPSOMemberUpdateArgs} args - Arguments to update one SPSOMember.
     * @example
     * // Update one SPSOMember
     * const sPSOMember = await prisma.sPSOMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SPSOMemberUpdateArgs>(args: SelectSubset<T, SPSOMemberUpdateArgs<ExtArgs>>): Prisma__SPSOMemberClient<$Result.GetResult<Prisma.$SPSOMemberPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SPSOMembers.
     * @param {SPSOMemberDeleteManyArgs} args - Arguments to filter SPSOMembers to delete.
     * @example
     * // Delete a few SPSOMembers
     * const { count } = await prisma.sPSOMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SPSOMemberDeleteManyArgs>(args?: SelectSubset<T, SPSOMemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SPSOMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SPSOMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SPSOMembers
     * const sPSOMember = await prisma.sPSOMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SPSOMemberUpdateManyArgs>(args: SelectSubset<T, SPSOMemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SPSOMember.
     * @param {SPSOMemberUpsertArgs} args - Arguments to update or create a SPSOMember.
     * @example
     * // Update or create a SPSOMember
     * const sPSOMember = await prisma.sPSOMember.upsert({
     *   create: {
     *     // ... data to create a SPSOMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SPSOMember we want to update
     *   }
     * })
     */
    upsert<T extends SPSOMemberUpsertArgs>(args: SelectSubset<T, SPSOMemberUpsertArgs<ExtArgs>>): Prisma__SPSOMemberClient<$Result.GetResult<Prisma.$SPSOMemberPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SPSOMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SPSOMemberCountArgs} args - Arguments to filter SPSOMembers to count.
     * @example
     * // Count the number of SPSOMembers
     * const count = await prisma.sPSOMember.count({
     *   where: {
     *     // ... the filter for the SPSOMembers we want to count
     *   }
     * })
    **/
    count<T extends SPSOMemberCountArgs>(
      args?: Subset<T, SPSOMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SPSOMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SPSOMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SPSOMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SPSOMemberAggregateArgs>(args: Subset<T, SPSOMemberAggregateArgs>): Prisma.PrismaPromise<GetSPSOMemberAggregateType<T>>

    /**
     * Group by SPSOMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SPSOMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SPSOMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SPSOMemberGroupByArgs['orderBy'] }
        : { orderBy?: SPSOMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SPSOMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSPSOMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SPSOMember model
   */
  readonly fields: SPSOMemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SPSOMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SPSOMemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    printers<T extends SPSOMember$printersArgs<ExtArgs> = {}>(args?: Subset<T, SPSOMember$printersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrinterPayload<ExtArgs>, T, "findMany"> | Null>
    customers<T extends SPSOMember$customersArgs<ExtArgs> = {}>(args?: Subset<T, SPSOMember$customersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SPSOMember model
   */ 
  interface SPSOMemberFieldRefs {
    readonly sosoMemberId: FieldRef<"SPSOMember", 'Int'>
    readonly dob: FieldRef<"SPSOMember", 'DateTime'>
    readonly address: FieldRef<"SPSOMember", 'String'>
    readonly userId: FieldRef<"SPSOMember", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * SPSOMember findUnique
   */
  export type SPSOMemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SPSOMember
     */
    select?: SPSOMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SPSOMemberInclude<ExtArgs> | null
    /**
     * Filter, which SPSOMember to fetch.
     */
    where: SPSOMemberWhereUniqueInput
  }

  /**
   * SPSOMember findUniqueOrThrow
   */
  export type SPSOMemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SPSOMember
     */
    select?: SPSOMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SPSOMemberInclude<ExtArgs> | null
    /**
     * Filter, which SPSOMember to fetch.
     */
    where: SPSOMemberWhereUniqueInput
  }

  /**
   * SPSOMember findFirst
   */
  export type SPSOMemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SPSOMember
     */
    select?: SPSOMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SPSOMemberInclude<ExtArgs> | null
    /**
     * Filter, which SPSOMember to fetch.
     */
    where?: SPSOMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SPSOMembers to fetch.
     */
    orderBy?: SPSOMemberOrderByWithRelationInput | SPSOMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SPSOMembers.
     */
    cursor?: SPSOMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SPSOMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SPSOMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SPSOMembers.
     */
    distinct?: SPSOMemberScalarFieldEnum | SPSOMemberScalarFieldEnum[]
  }

  /**
   * SPSOMember findFirstOrThrow
   */
  export type SPSOMemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SPSOMember
     */
    select?: SPSOMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SPSOMemberInclude<ExtArgs> | null
    /**
     * Filter, which SPSOMember to fetch.
     */
    where?: SPSOMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SPSOMembers to fetch.
     */
    orderBy?: SPSOMemberOrderByWithRelationInput | SPSOMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SPSOMembers.
     */
    cursor?: SPSOMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SPSOMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SPSOMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SPSOMembers.
     */
    distinct?: SPSOMemberScalarFieldEnum | SPSOMemberScalarFieldEnum[]
  }

  /**
   * SPSOMember findMany
   */
  export type SPSOMemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SPSOMember
     */
    select?: SPSOMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SPSOMemberInclude<ExtArgs> | null
    /**
     * Filter, which SPSOMembers to fetch.
     */
    where?: SPSOMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SPSOMembers to fetch.
     */
    orderBy?: SPSOMemberOrderByWithRelationInput | SPSOMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SPSOMembers.
     */
    cursor?: SPSOMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SPSOMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SPSOMembers.
     */
    skip?: number
    distinct?: SPSOMemberScalarFieldEnum | SPSOMemberScalarFieldEnum[]
  }

  /**
   * SPSOMember create
   */
  export type SPSOMemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SPSOMember
     */
    select?: SPSOMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SPSOMemberInclude<ExtArgs> | null
    /**
     * The data needed to create a SPSOMember.
     */
    data: XOR<SPSOMemberCreateInput, SPSOMemberUncheckedCreateInput>
  }

  /**
   * SPSOMember createMany
   */
  export type SPSOMemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SPSOMembers.
     */
    data: SPSOMemberCreateManyInput | SPSOMemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SPSOMember createManyAndReturn
   */
  export type SPSOMemberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SPSOMember
     */
    select?: SPSOMemberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SPSOMembers.
     */
    data: SPSOMemberCreateManyInput | SPSOMemberCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SPSOMemberIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SPSOMember update
   */
  export type SPSOMemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SPSOMember
     */
    select?: SPSOMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SPSOMemberInclude<ExtArgs> | null
    /**
     * The data needed to update a SPSOMember.
     */
    data: XOR<SPSOMemberUpdateInput, SPSOMemberUncheckedUpdateInput>
    /**
     * Choose, which SPSOMember to update.
     */
    where: SPSOMemberWhereUniqueInput
  }

  /**
   * SPSOMember updateMany
   */
  export type SPSOMemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SPSOMembers.
     */
    data: XOR<SPSOMemberUpdateManyMutationInput, SPSOMemberUncheckedUpdateManyInput>
    /**
     * Filter which SPSOMembers to update
     */
    where?: SPSOMemberWhereInput
  }

  /**
   * SPSOMember upsert
   */
  export type SPSOMemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SPSOMember
     */
    select?: SPSOMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SPSOMemberInclude<ExtArgs> | null
    /**
     * The filter to search for the SPSOMember to update in case it exists.
     */
    where: SPSOMemberWhereUniqueInput
    /**
     * In case the SPSOMember found by the `where` argument doesn't exist, create a new SPSOMember with this data.
     */
    create: XOR<SPSOMemberCreateInput, SPSOMemberUncheckedCreateInput>
    /**
     * In case the SPSOMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SPSOMemberUpdateInput, SPSOMemberUncheckedUpdateInput>
  }

  /**
   * SPSOMember delete
   */
  export type SPSOMemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SPSOMember
     */
    select?: SPSOMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SPSOMemberInclude<ExtArgs> | null
    /**
     * Filter which SPSOMember to delete.
     */
    where: SPSOMemberWhereUniqueInput
  }

  /**
   * SPSOMember deleteMany
   */
  export type SPSOMemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SPSOMembers to delete
     */
    where?: SPSOMemberWhereInput
  }

  /**
   * SPSOMember.printers
   */
  export type SPSOMember$printersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Printer
     */
    select?: PrinterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrinterInclude<ExtArgs> | null
    where?: PrinterWhereInput
    orderBy?: PrinterOrderByWithRelationInput | PrinterOrderByWithRelationInput[]
    cursor?: PrinterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PrinterScalarFieldEnum | PrinterScalarFieldEnum[]
  }

  /**
   * SPSOMember.customers
   */
  export type SPSOMember$customersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    where?: CustomerWhereInput
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    cursor?: CustomerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * SPSOMember without action
   */
  export type SPSOMemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SPSOMember
     */
    select?: SPSOMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SPSOMemberInclude<ExtArgs> | null
  }


  /**
   * Model Customer
   */

  export type AggregateCustomer = {
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  export type CustomerAvgAggregateOutputType = {
    customerId: number | null
    accBalance: number | null
    remainPages: number | null
    userId: number | null
    spsoMemberId: number | null
  }

  export type CustomerSumAggregateOutputType = {
    customerId: number | null
    accBalance: number | null
    remainPages: number | null
    userId: number | null
    spsoMemberId: number | null
  }

  export type CustomerMinAggregateOutputType = {
    customerId: number | null
    ppHistory: string | null
    accBalance: number | null
    summary: string | null
    remainPages: number | null
    userId: number | null
    spsoMemberId: number | null
  }

  export type CustomerMaxAggregateOutputType = {
    customerId: number | null
    ppHistory: string | null
    accBalance: number | null
    summary: string | null
    remainPages: number | null
    userId: number | null
    spsoMemberId: number | null
  }

  export type CustomerCountAggregateOutputType = {
    customerId: number
    ppHistory: number
    accBalance: number
    summary: number
    remainPages: number
    userId: number
    spsoMemberId: number
    _all: number
  }


  export type CustomerAvgAggregateInputType = {
    customerId?: true
    accBalance?: true
    remainPages?: true
    userId?: true
    spsoMemberId?: true
  }

  export type CustomerSumAggregateInputType = {
    customerId?: true
    accBalance?: true
    remainPages?: true
    userId?: true
    spsoMemberId?: true
  }

  export type CustomerMinAggregateInputType = {
    customerId?: true
    ppHistory?: true
    accBalance?: true
    summary?: true
    remainPages?: true
    userId?: true
    spsoMemberId?: true
  }

  export type CustomerMaxAggregateInputType = {
    customerId?: true
    ppHistory?: true
    accBalance?: true
    summary?: true
    remainPages?: true
    userId?: true
    spsoMemberId?: true
  }

  export type CustomerCountAggregateInputType = {
    customerId?: true
    ppHistory?: true
    accBalance?: true
    summary?: true
    remainPages?: true
    userId?: true
    spsoMemberId?: true
    _all?: true
  }

  export type CustomerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customer to aggregate.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Customers
    **/
    _count?: true | CustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerMaxAggregateInputType
  }

  export type GetCustomerAggregateType<T extends CustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer[P]>
      : GetScalarType<T[P], AggregateCustomer[P]>
  }




  export type CustomerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
    orderBy?: CustomerOrderByWithAggregationInput | CustomerOrderByWithAggregationInput[]
    by: CustomerScalarFieldEnum[] | CustomerScalarFieldEnum
    having?: CustomerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerCountAggregateInputType | true
    _avg?: CustomerAvgAggregateInputType
    _sum?: CustomerSumAggregateInputType
    _min?: CustomerMinAggregateInputType
    _max?: CustomerMaxAggregateInputType
  }

  export type CustomerGroupByOutputType = {
    customerId: number
    ppHistory: string | null
    accBalance: number
    summary: string | null
    remainPages: number
    userId: number
    spsoMemberId: number | null
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  type GetCustomerGroupByPayload<T extends CustomerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerGroupByOutputType[P]>
        }
      >
    >


  export type CustomerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    customerId?: boolean
    ppHistory?: boolean
    accBalance?: boolean
    summary?: boolean
    remainPages?: boolean
    userId?: boolean
    spsoMemberId?: boolean
    user?: boolean | Customer$userArgs<ExtArgs>
    spsomember?: boolean | Customer$spsomemberArgs<ExtArgs>
    feedbacks?: boolean | Customer$feedbacksArgs<ExtArgs>
    pagePurchaseOrders?: boolean | Customer$pagePurchaseOrdersArgs<ExtArgs>
    printOrders?: boolean | Customer$printOrdersArgs<ExtArgs>
    documents?: boolean | Customer$documentsArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    customerId?: boolean
    ppHistory?: boolean
    accBalance?: boolean
    summary?: boolean
    remainPages?: boolean
    userId?: boolean
    spsoMemberId?: boolean
    user?: boolean | Customer$userArgs<ExtArgs>
    spsomember?: boolean | Customer$spsomemberArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectScalar = {
    customerId?: boolean
    ppHistory?: boolean
    accBalance?: boolean
    summary?: boolean
    remainPages?: boolean
    userId?: boolean
    spsoMemberId?: boolean
  }

  export type CustomerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Customer$userArgs<ExtArgs>
    spsomember?: boolean | Customer$spsomemberArgs<ExtArgs>
    feedbacks?: boolean | Customer$feedbacksArgs<ExtArgs>
    pagePurchaseOrders?: boolean | Customer$pagePurchaseOrdersArgs<ExtArgs>
    printOrders?: boolean | Customer$printOrdersArgs<ExtArgs>
    documents?: boolean | Customer$documentsArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CustomerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Customer$userArgs<ExtArgs>
    spsomember?: boolean | Customer$spsomemberArgs<ExtArgs>
  }

  export type $CustomerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Customer"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      spsomember: Prisma.$SPSOMemberPayload<ExtArgs> | null
      feedbacks: Prisma.$FeedbackPayload<ExtArgs>[]
      pagePurchaseOrders: Prisma.$PagePurchaseOrderPayload<ExtArgs>[]
      printOrders: Prisma.$PrintOrderPayload<ExtArgs>[]
      documents: Prisma.$DocumentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      customerId: number
      ppHistory: string | null
      accBalance: number
      summary: string | null
      remainPages: number
      userId: number
      spsoMemberId: number | null
    }, ExtArgs["result"]["customer"]>
    composites: {}
  }

  type CustomerGetPayload<S extends boolean | null | undefined | CustomerDefaultArgs> = $Result.GetResult<Prisma.$CustomerPayload, S>

  type CustomerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CustomerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CustomerCountAggregateInputType | true
    }

  export interface CustomerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Customer'], meta: { name: 'Customer' } }
    /**
     * Find zero or one Customer that matches the filter.
     * @param {CustomerFindUniqueArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerFindUniqueArgs>(args: SelectSubset<T, CustomerFindUniqueArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Customer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CustomerFindUniqueOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Customer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerFindFirstArgs>(args?: SelectSubset<T, CustomerFindFirstArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Customer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customer.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customer.findMany({ take: 10 })
     * 
     * // Only select the `customerId`
     * const customerWithCustomerIdOnly = await prisma.customer.findMany({ select: { customerId: true } })
     * 
     */
    findMany<T extends CustomerFindManyArgs>(args?: SelectSubset<T, CustomerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Customer.
     * @param {CustomerCreateArgs} args - Arguments to create a Customer.
     * @example
     * // Create one Customer
     * const Customer = await prisma.customer.create({
     *   data: {
     *     // ... data to create a Customer
     *   }
     * })
     * 
     */
    create<T extends CustomerCreateArgs>(args: SelectSubset<T, CustomerCreateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Customers.
     * @param {CustomerCreateManyArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerCreateManyArgs>(args?: SelectSubset<T, CustomerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Customers and returns the data saved in the database.
     * @param {CustomerCreateManyAndReturnArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Customers and only return the `customerId`
     * const customerWithCustomerIdOnly = await prisma.customer.createManyAndReturn({ 
     *   select: { customerId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomerCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Customer.
     * @param {CustomerDeleteArgs} args - Arguments to delete one Customer.
     * @example
     * // Delete one Customer
     * const Customer = await prisma.customer.delete({
     *   where: {
     *     // ... filter to delete one Customer
     *   }
     * })
     * 
     */
    delete<T extends CustomerDeleteArgs>(args: SelectSubset<T, CustomerDeleteArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Customer.
     * @param {CustomerUpdateArgs} args - Arguments to update one Customer.
     * @example
     * // Update one Customer
     * const customer = await prisma.customer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerUpdateArgs>(args: SelectSubset<T, CustomerUpdateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Customers.
     * @param {CustomerDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerDeleteManyArgs>(args?: SelectSubset<T, CustomerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerUpdateManyArgs>(args: SelectSubset<T, CustomerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Customer.
     * @param {CustomerUpsertArgs} args - Arguments to update or create a Customer.
     * @example
     * // Update or create a Customer
     * const customer = await prisma.customer.upsert({
     *   create: {
     *     // ... data to create a Customer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer we want to update
     *   }
     * })
     */
    upsert<T extends CustomerUpsertArgs>(args: SelectSubset<T, CustomerUpsertArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customer.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends CustomerCountArgs>(
      args?: Subset<T, CustomerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerAggregateArgs>(args: Subset<T, CustomerAggregateArgs>): Prisma.PrismaPromise<GetCustomerAggregateType<T>>

    /**
     * Group by Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerGroupByArgs['orderBy'] }
        : { orderBy?: CustomerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Customer model
   */
  readonly fields: CustomerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Customer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Customer$userArgs<ExtArgs> = {}>(args?: Subset<T, Customer$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    spsomember<T extends Customer$spsomemberArgs<ExtArgs> = {}>(args?: Subset<T, Customer$spsomemberArgs<ExtArgs>>): Prisma__SPSOMemberClient<$Result.GetResult<Prisma.$SPSOMemberPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    feedbacks<T extends Customer$feedbacksArgs<ExtArgs> = {}>(args?: Subset<T, Customer$feedbacksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany"> | Null>
    pagePurchaseOrders<T extends Customer$pagePurchaseOrdersArgs<ExtArgs> = {}>(args?: Subset<T, Customer$pagePurchaseOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PagePurchaseOrderPayload<ExtArgs>, T, "findMany"> | Null>
    printOrders<T extends Customer$printOrdersArgs<ExtArgs> = {}>(args?: Subset<T, Customer$printOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrintOrderPayload<ExtArgs>, T, "findMany"> | Null>
    documents<T extends Customer$documentsArgs<ExtArgs> = {}>(args?: Subset<T, Customer$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Customer model
   */ 
  interface CustomerFieldRefs {
    readonly customerId: FieldRef<"Customer", 'Int'>
    readonly ppHistory: FieldRef<"Customer", 'String'>
    readonly accBalance: FieldRef<"Customer", 'Float'>
    readonly summary: FieldRef<"Customer", 'String'>
    readonly remainPages: FieldRef<"Customer", 'Int'>
    readonly userId: FieldRef<"Customer", 'Int'>
    readonly spsoMemberId: FieldRef<"Customer", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Customer findUnique
   */
  export type CustomerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findUniqueOrThrow
   */
  export type CustomerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findFirst
   */
  export type CustomerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findFirstOrThrow
   */
  export type CustomerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findMany
   */
  export type CustomerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customers to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer create
   */
  export type CustomerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to create a Customer.
     */
    data: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
  }

  /**
   * Customer createMany
   */
  export type CustomerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Customer createManyAndReturn
   */
  export type CustomerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Customer update
   */
  export type CustomerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to update a Customer.
     */
    data: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
    /**
     * Choose, which Customer to update.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer updateMany
   */
  export type CustomerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
  }

  /**
   * Customer upsert
   */
  export type CustomerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The filter to search for the Customer to update in case it exists.
     */
    where: CustomerWhereUniqueInput
    /**
     * In case the Customer found by the `where` argument doesn't exist, create a new Customer with this data.
     */
    create: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
    /**
     * In case the Customer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
  }

  /**
   * Customer delete
   */
  export type CustomerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter which Customer to delete.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer deleteMany
   */
  export type CustomerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customers to delete
     */
    where?: CustomerWhereInput
  }

  /**
   * Customer.user
   */
  export type Customer$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Customer.spsomember
   */
  export type Customer$spsomemberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SPSOMember
     */
    select?: SPSOMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SPSOMemberInclude<ExtArgs> | null
    where?: SPSOMemberWhereInput
  }

  /**
   * Customer.feedbacks
   */
  export type Customer$feedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    cursor?: FeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Customer.pagePurchaseOrders
   */
  export type Customer$pagePurchaseOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PagePurchaseOrder
     */
    select?: PagePurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagePurchaseOrderInclude<ExtArgs> | null
    where?: PagePurchaseOrderWhereInput
    orderBy?: PagePurchaseOrderOrderByWithRelationInput | PagePurchaseOrderOrderByWithRelationInput[]
    cursor?: PagePurchaseOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PagePurchaseOrderScalarFieldEnum | PagePurchaseOrderScalarFieldEnum[]
  }

  /**
   * Customer.printOrders
   */
  export type Customer$printOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintOrder
     */
    select?: PrintOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrintOrderInclude<ExtArgs> | null
    where?: PrintOrderWhereInput
    orderBy?: PrintOrderOrderByWithRelationInput | PrintOrderOrderByWithRelationInput[]
    cursor?: PrintOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PrintOrderScalarFieldEnum | PrintOrderScalarFieldEnum[]
  }

  /**
   * Customer.documents
   */
  export type Customer$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Customer without action
   */
  export type CustomerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
  }


  /**
   * Model Feedback
   */

  export type AggregateFeedback = {
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  export type FeedbackAvgAggregateOutputType = {
    feedbackId: number | null
    customerId: number | null
    rating: number | null
  }

  export type FeedbackSumAggregateOutputType = {
    feedbackId: number | null
    customerId: number | null
    rating: number | null
  }

  export type FeedbackMinAggregateOutputType = {
    feedbackId: number | null
    customerId: number | null
    feedTime: Date | null
    rating: number | null
    contentByCustomer: string | null
  }

  export type FeedbackMaxAggregateOutputType = {
    feedbackId: number | null
    customerId: number | null
    feedTime: Date | null
    rating: number | null
    contentByCustomer: string | null
  }

  export type FeedbackCountAggregateOutputType = {
    feedbackId: number
    customerId: number
    feedTime: number
    rating: number
    contentByCustomer: number
    _all: number
  }


  export type FeedbackAvgAggregateInputType = {
    feedbackId?: true
    customerId?: true
    rating?: true
  }

  export type FeedbackSumAggregateInputType = {
    feedbackId?: true
    customerId?: true
    rating?: true
  }

  export type FeedbackMinAggregateInputType = {
    feedbackId?: true
    customerId?: true
    feedTime?: true
    rating?: true
    contentByCustomer?: true
  }

  export type FeedbackMaxAggregateInputType = {
    feedbackId?: true
    customerId?: true
    feedTime?: true
    rating?: true
    contentByCustomer?: true
  }

  export type FeedbackCountAggregateInputType = {
    feedbackId?: true
    customerId?: true
    feedTime?: true
    rating?: true
    contentByCustomer?: true
    _all?: true
  }

  export type FeedbackAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedback to aggregate.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Feedbacks
    **/
    _count?: true | FeedbackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeedbackAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeedbackSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeedbackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeedbackMaxAggregateInputType
  }

  export type GetFeedbackAggregateType<T extends FeedbackAggregateArgs> = {
        [P in keyof T & keyof AggregateFeedback]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedback[P]>
      : GetScalarType<T[P], AggregateFeedback[P]>
  }




  export type FeedbackGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithAggregationInput | FeedbackOrderByWithAggregationInput[]
    by: FeedbackScalarFieldEnum[] | FeedbackScalarFieldEnum
    having?: FeedbackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeedbackCountAggregateInputType | true
    _avg?: FeedbackAvgAggregateInputType
    _sum?: FeedbackSumAggregateInputType
    _min?: FeedbackMinAggregateInputType
    _max?: FeedbackMaxAggregateInputType
  }

  export type FeedbackGroupByOutputType = {
    feedbackId: number
    customerId: number
    feedTime: Date
    rating: number
    contentByCustomer: string
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  type GetFeedbackGroupByPayload<T extends FeedbackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeedbackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeedbackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
            : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
        }
      >
    >


  export type FeedbackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    feedbackId?: boolean
    customerId?: boolean
    feedTime?: boolean
    rating?: boolean
    contentByCustomer?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    feedbackId?: boolean
    customerId?: boolean
    feedTime?: boolean
    rating?: boolean
    contentByCustomer?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectScalar = {
    feedbackId?: boolean
    customerId?: boolean
    feedTime?: boolean
    rating?: boolean
    contentByCustomer?: boolean
  }

  export type FeedbackInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }
  export type FeedbackIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }

  export type $FeedbackPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Feedback"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      feedbackId: number
      customerId: number
      feedTime: Date
      rating: number
      contentByCustomer: string
    }, ExtArgs["result"]["feedback"]>
    composites: {}
  }

  type FeedbackGetPayload<S extends boolean | null | undefined | FeedbackDefaultArgs> = $Result.GetResult<Prisma.$FeedbackPayload, S>

  type FeedbackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FeedbackFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FeedbackCountAggregateInputType | true
    }

  export interface FeedbackDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Feedback'], meta: { name: 'Feedback' } }
    /**
     * Find zero or one Feedback that matches the filter.
     * @param {FeedbackFindUniqueArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeedbackFindUniqueArgs>(args: SelectSubset<T, FeedbackFindUniqueArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Feedback that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FeedbackFindUniqueOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeedbackFindUniqueOrThrowArgs>(args: SelectSubset<T, FeedbackFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Feedback that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeedbackFindFirstArgs>(args?: SelectSubset<T, FeedbackFindFirstArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Feedback that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeedbackFindFirstOrThrowArgs>(args?: SelectSubset<T, FeedbackFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Feedbacks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Feedbacks
     * const feedbacks = await prisma.feedback.findMany()
     * 
     * // Get first 10 Feedbacks
     * const feedbacks = await prisma.feedback.findMany({ take: 10 })
     * 
     * // Only select the `feedbackId`
     * const feedbackWithFeedbackIdOnly = await prisma.feedback.findMany({ select: { feedbackId: true } })
     * 
     */
    findMany<T extends FeedbackFindManyArgs>(args?: SelectSubset<T, FeedbackFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Feedback.
     * @param {FeedbackCreateArgs} args - Arguments to create a Feedback.
     * @example
     * // Create one Feedback
     * const Feedback = await prisma.feedback.create({
     *   data: {
     *     // ... data to create a Feedback
     *   }
     * })
     * 
     */
    create<T extends FeedbackCreateArgs>(args: SelectSubset<T, FeedbackCreateArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Feedbacks.
     * @param {FeedbackCreateManyArgs} args - Arguments to create many Feedbacks.
     * @example
     * // Create many Feedbacks
     * const feedback = await prisma.feedback.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeedbackCreateManyArgs>(args?: SelectSubset<T, FeedbackCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Feedbacks and returns the data saved in the database.
     * @param {FeedbackCreateManyAndReturnArgs} args - Arguments to create many Feedbacks.
     * @example
     * // Create many Feedbacks
     * const feedback = await prisma.feedback.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Feedbacks and only return the `feedbackId`
     * const feedbackWithFeedbackIdOnly = await prisma.feedback.createManyAndReturn({ 
     *   select: { feedbackId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FeedbackCreateManyAndReturnArgs>(args?: SelectSubset<T, FeedbackCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Feedback.
     * @param {FeedbackDeleteArgs} args - Arguments to delete one Feedback.
     * @example
     * // Delete one Feedback
     * const Feedback = await prisma.feedback.delete({
     *   where: {
     *     // ... filter to delete one Feedback
     *   }
     * })
     * 
     */
    delete<T extends FeedbackDeleteArgs>(args: SelectSubset<T, FeedbackDeleteArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Feedback.
     * @param {FeedbackUpdateArgs} args - Arguments to update one Feedback.
     * @example
     * // Update one Feedback
     * const feedback = await prisma.feedback.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeedbackUpdateArgs>(args: SelectSubset<T, FeedbackUpdateArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Feedbacks.
     * @param {FeedbackDeleteManyArgs} args - Arguments to filter Feedbacks to delete.
     * @example
     * // Delete a few Feedbacks
     * const { count } = await prisma.feedback.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeedbackDeleteManyArgs>(args?: SelectSubset<T, FeedbackDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Feedbacks
     * const feedback = await prisma.feedback.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeedbackUpdateManyArgs>(args: SelectSubset<T, FeedbackUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Feedback.
     * @param {FeedbackUpsertArgs} args - Arguments to update or create a Feedback.
     * @example
     * // Update or create a Feedback
     * const feedback = await prisma.feedback.upsert({
     *   create: {
     *     // ... data to create a Feedback
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Feedback we want to update
     *   }
     * })
     */
    upsert<T extends FeedbackUpsertArgs>(args: SelectSubset<T, FeedbackUpsertArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackCountArgs} args - Arguments to filter Feedbacks to count.
     * @example
     * // Count the number of Feedbacks
     * const count = await prisma.feedback.count({
     *   where: {
     *     // ... the filter for the Feedbacks we want to count
     *   }
     * })
    **/
    count<T extends FeedbackCountArgs>(
      args?: Subset<T, FeedbackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedbackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeedbackAggregateArgs>(args: Subset<T, FeedbackAggregateArgs>): Prisma.PrismaPromise<GetFeedbackAggregateType<T>>

    /**
     * Group by Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeedbackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeedbackGroupByArgs['orderBy'] }
        : { orderBy?: FeedbackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeedbackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedbackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Feedback model
   */
  readonly fields: FeedbackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Feedback.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeedbackClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Feedback model
   */ 
  interface FeedbackFieldRefs {
    readonly feedbackId: FieldRef<"Feedback", 'Int'>
    readonly customerId: FieldRef<"Feedback", 'Int'>
    readonly feedTime: FieldRef<"Feedback", 'DateTime'>
    readonly rating: FieldRef<"Feedback", 'Int'>
    readonly contentByCustomer: FieldRef<"Feedback", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Feedback findUnique
   */
  export type FeedbackFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback findUniqueOrThrow
   */
  export type FeedbackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback findFirst
   */
  export type FeedbackFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback findFirstOrThrow
   */
  export type FeedbackFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback findMany
   */
  export type FeedbackFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedbacks to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback create
   */
  export type FeedbackCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The data needed to create a Feedback.
     */
    data: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
  }

  /**
   * Feedback createMany
   */
  export type FeedbackCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Feedbacks.
     */
    data: FeedbackCreateManyInput | FeedbackCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Feedback createManyAndReturn
   */
  export type FeedbackCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Feedbacks.
     */
    data: FeedbackCreateManyInput | FeedbackCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Feedback update
   */
  export type FeedbackUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The data needed to update a Feedback.
     */
    data: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
    /**
     * Choose, which Feedback to update.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback updateMany
   */
  export type FeedbackUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Feedbacks.
     */
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyInput>
    /**
     * Filter which Feedbacks to update
     */
    where?: FeedbackWhereInput
  }

  /**
   * Feedback upsert
   */
  export type FeedbackUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The filter to search for the Feedback to update in case it exists.
     */
    where: FeedbackWhereUniqueInput
    /**
     * In case the Feedback found by the `where` argument doesn't exist, create a new Feedback with this data.
     */
    create: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
    /**
     * In case the Feedback was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
  }

  /**
   * Feedback delete
   */
  export type FeedbackDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter which Feedback to delete.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback deleteMany
   */
  export type FeedbackDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedbacks to delete
     */
    where?: FeedbackWhereInput
  }

  /**
   * Feedback without action
   */
  export type FeedbackDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
  }


  /**
   * Model Printer
   */

  export type AggregatePrinter = {
    _count: PrinterCountAggregateOutputType | null
    _avg: PrinterAvgAggregateOutputType | null
    _sum: PrinterSumAggregateOutputType | null
    _min: PrinterMinAggregateOutputType | null
    _max: PrinterMaxAggregateOutputType | null
  }

  export type PrinterAvgAggregateOutputType = {
    printerId: number | null
    spsomemberId: number | null
  }

  export type PrinterSumAggregateOutputType = {
    printerId: number | null
    spsomemberId: number | null
  }

  export type PrinterMinAggregateOutputType = {
    printerId: number | null
    model: string | null
    brand: string | null
    description: string | null
    facility: string | null
    building: string | null
    room: string | null
    spsomemberId: number | null
  }

  export type PrinterMaxAggregateOutputType = {
    printerId: number | null
    model: string | null
    brand: string | null
    description: string | null
    facility: string | null
    building: string | null
    room: string | null
    spsomemberId: number | null
  }

  export type PrinterCountAggregateOutputType = {
    printerId: number
    model: number
    brand: number
    description: number
    facility: number
    building: number
    room: number
    spsomemberId: number
    _all: number
  }


  export type PrinterAvgAggregateInputType = {
    printerId?: true
    spsomemberId?: true
  }

  export type PrinterSumAggregateInputType = {
    printerId?: true
    spsomemberId?: true
  }

  export type PrinterMinAggregateInputType = {
    printerId?: true
    model?: true
    brand?: true
    description?: true
    facility?: true
    building?: true
    room?: true
    spsomemberId?: true
  }

  export type PrinterMaxAggregateInputType = {
    printerId?: true
    model?: true
    brand?: true
    description?: true
    facility?: true
    building?: true
    room?: true
    spsomemberId?: true
  }

  export type PrinterCountAggregateInputType = {
    printerId?: true
    model?: true
    brand?: true
    description?: true
    facility?: true
    building?: true
    room?: true
    spsomemberId?: true
    _all?: true
  }

  export type PrinterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Printer to aggregate.
     */
    where?: PrinterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Printers to fetch.
     */
    orderBy?: PrinterOrderByWithRelationInput | PrinterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PrinterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Printers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Printers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Printers
    **/
    _count?: true | PrinterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PrinterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PrinterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PrinterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PrinterMaxAggregateInputType
  }

  export type GetPrinterAggregateType<T extends PrinterAggregateArgs> = {
        [P in keyof T & keyof AggregatePrinter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePrinter[P]>
      : GetScalarType<T[P], AggregatePrinter[P]>
  }




  export type PrinterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrinterWhereInput
    orderBy?: PrinterOrderByWithAggregationInput | PrinterOrderByWithAggregationInput[]
    by: PrinterScalarFieldEnum[] | PrinterScalarFieldEnum
    having?: PrinterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PrinterCountAggregateInputType | true
    _avg?: PrinterAvgAggregateInputType
    _sum?: PrinterSumAggregateInputType
    _min?: PrinterMinAggregateInputType
    _max?: PrinterMaxAggregateInputType
  }

  export type PrinterGroupByOutputType = {
    printerId: number
    model: string
    brand: string
    description: string | null
    facility: string
    building: string
    room: string
    spsomemberId: number
    _count: PrinterCountAggregateOutputType | null
    _avg: PrinterAvgAggregateOutputType | null
    _sum: PrinterSumAggregateOutputType | null
    _min: PrinterMinAggregateOutputType | null
    _max: PrinterMaxAggregateOutputType | null
  }

  type GetPrinterGroupByPayload<T extends PrinterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PrinterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PrinterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PrinterGroupByOutputType[P]>
            : GetScalarType<T[P], PrinterGroupByOutputType[P]>
        }
      >
    >


  export type PrinterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    printerId?: boolean
    model?: boolean
    brand?: boolean
    description?: boolean
    facility?: boolean
    building?: boolean
    room?: boolean
    spsomemberId?: boolean
    spsomember?: boolean | SPSOMemberDefaultArgs<ExtArgs>
    documents?: boolean | Printer$documentsArgs<ExtArgs>
    _count?: boolean | PrinterCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["printer"]>

  export type PrinterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    printerId?: boolean
    model?: boolean
    brand?: boolean
    description?: boolean
    facility?: boolean
    building?: boolean
    room?: boolean
    spsomemberId?: boolean
    spsomember?: boolean | SPSOMemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["printer"]>

  export type PrinterSelectScalar = {
    printerId?: boolean
    model?: boolean
    brand?: boolean
    description?: boolean
    facility?: boolean
    building?: boolean
    room?: boolean
    spsomemberId?: boolean
  }

  export type PrinterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    spsomember?: boolean | SPSOMemberDefaultArgs<ExtArgs>
    documents?: boolean | Printer$documentsArgs<ExtArgs>
    _count?: boolean | PrinterCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PrinterIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    spsomember?: boolean | SPSOMemberDefaultArgs<ExtArgs>
  }

  export type $PrinterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Printer"
    objects: {
      spsomember: Prisma.$SPSOMemberPayload<ExtArgs>
      documents: Prisma.$DocumentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      printerId: number
      model: string
      brand: string
      description: string | null
      facility: string
      building: string
      room: string
      spsomemberId: number
    }, ExtArgs["result"]["printer"]>
    composites: {}
  }

  type PrinterGetPayload<S extends boolean | null | undefined | PrinterDefaultArgs> = $Result.GetResult<Prisma.$PrinterPayload, S>

  type PrinterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PrinterFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PrinterCountAggregateInputType | true
    }

  export interface PrinterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Printer'], meta: { name: 'Printer' } }
    /**
     * Find zero or one Printer that matches the filter.
     * @param {PrinterFindUniqueArgs} args - Arguments to find a Printer
     * @example
     * // Get one Printer
     * const printer = await prisma.printer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PrinterFindUniqueArgs>(args: SelectSubset<T, PrinterFindUniqueArgs<ExtArgs>>): Prisma__PrinterClient<$Result.GetResult<Prisma.$PrinterPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Printer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PrinterFindUniqueOrThrowArgs} args - Arguments to find a Printer
     * @example
     * // Get one Printer
     * const printer = await prisma.printer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PrinterFindUniqueOrThrowArgs>(args: SelectSubset<T, PrinterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PrinterClient<$Result.GetResult<Prisma.$PrinterPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Printer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrinterFindFirstArgs} args - Arguments to find a Printer
     * @example
     * // Get one Printer
     * const printer = await prisma.printer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PrinterFindFirstArgs>(args?: SelectSubset<T, PrinterFindFirstArgs<ExtArgs>>): Prisma__PrinterClient<$Result.GetResult<Prisma.$PrinterPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Printer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrinterFindFirstOrThrowArgs} args - Arguments to find a Printer
     * @example
     * // Get one Printer
     * const printer = await prisma.printer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PrinterFindFirstOrThrowArgs>(args?: SelectSubset<T, PrinterFindFirstOrThrowArgs<ExtArgs>>): Prisma__PrinterClient<$Result.GetResult<Prisma.$PrinterPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Printers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrinterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Printers
     * const printers = await prisma.printer.findMany()
     * 
     * // Get first 10 Printers
     * const printers = await prisma.printer.findMany({ take: 10 })
     * 
     * // Only select the `printerId`
     * const printerWithPrinterIdOnly = await prisma.printer.findMany({ select: { printerId: true } })
     * 
     */
    findMany<T extends PrinterFindManyArgs>(args?: SelectSubset<T, PrinterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrinterPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Printer.
     * @param {PrinterCreateArgs} args - Arguments to create a Printer.
     * @example
     * // Create one Printer
     * const Printer = await prisma.printer.create({
     *   data: {
     *     // ... data to create a Printer
     *   }
     * })
     * 
     */
    create<T extends PrinterCreateArgs>(args: SelectSubset<T, PrinterCreateArgs<ExtArgs>>): Prisma__PrinterClient<$Result.GetResult<Prisma.$PrinterPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Printers.
     * @param {PrinterCreateManyArgs} args - Arguments to create many Printers.
     * @example
     * // Create many Printers
     * const printer = await prisma.printer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PrinterCreateManyArgs>(args?: SelectSubset<T, PrinterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Printers and returns the data saved in the database.
     * @param {PrinterCreateManyAndReturnArgs} args - Arguments to create many Printers.
     * @example
     * // Create many Printers
     * const printer = await prisma.printer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Printers and only return the `printerId`
     * const printerWithPrinterIdOnly = await prisma.printer.createManyAndReturn({ 
     *   select: { printerId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PrinterCreateManyAndReturnArgs>(args?: SelectSubset<T, PrinterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrinterPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Printer.
     * @param {PrinterDeleteArgs} args - Arguments to delete one Printer.
     * @example
     * // Delete one Printer
     * const Printer = await prisma.printer.delete({
     *   where: {
     *     // ... filter to delete one Printer
     *   }
     * })
     * 
     */
    delete<T extends PrinterDeleteArgs>(args: SelectSubset<T, PrinterDeleteArgs<ExtArgs>>): Prisma__PrinterClient<$Result.GetResult<Prisma.$PrinterPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Printer.
     * @param {PrinterUpdateArgs} args - Arguments to update one Printer.
     * @example
     * // Update one Printer
     * const printer = await prisma.printer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PrinterUpdateArgs>(args: SelectSubset<T, PrinterUpdateArgs<ExtArgs>>): Prisma__PrinterClient<$Result.GetResult<Prisma.$PrinterPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Printers.
     * @param {PrinterDeleteManyArgs} args - Arguments to filter Printers to delete.
     * @example
     * // Delete a few Printers
     * const { count } = await prisma.printer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PrinterDeleteManyArgs>(args?: SelectSubset<T, PrinterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Printers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrinterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Printers
     * const printer = await prisma.printer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PrinterUpdateManyArgs>(args: SelectSubset<T, PrinterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Printer.
     * @param {PrinterUpsertArgs} args - Arguments to update or create a Printer.
     * @example
     * // Update or create a Printer
     * const printer = await prisma.printer.upsert({
     *   create: {
     *     // ... data to create a Printer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Printer we want to update
     *   }
     * })
     */
    upsert<T extends PrinterUpsertArgs>(args: SelectSubset<T, PrinterUpsertArgs<ExtArgs>>): Prisma__PrinterClient<$Result.GetResult<Prisma.$PrinterPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Printers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrinterCountArgs} args - Arguments to filter Printers to count.
     * @example
     * // Count the number of Printers
     * const count = await prisma.printer.count({
     *   where: {
     *     // ... the filter for the Printers we want to count
     *   }
     * })
    **/
    count<T extends PrinterCountArgs>(
      args?: Subset<T, PrinterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PrinterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Printer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrinterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PrinterAggregateArgs>(args: Subset<T, PrinterAggregateArgs>): Prisma.PrismaPromise<GetPrinterAggregateType<T>>

    /**
     * Group by Printer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrinterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PrinterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PrinterGroupByArgs['orderBy'] }
        : { orderBy?: PrinterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PrinterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPrinterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Printer model
   */
  readonly fields: PrinterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Printer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PrinterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    spsomember<T extends SPSOMemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SPSOMemberDefaultArgs<ExtArgs>>): Prisma__SPSOMemberClient<$Result.GetResult<Prisma.$SPSOMemberPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    documents<T extends Printer$documentsArgs<ExtArgs> = {}>(args?: Subset<T, Printer$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Printer model
   */ 
  interface PrinterFieldRefs {
    readonly printerId: FieldRef<"Printer", 'Int'>
    readonly model: FieldRef<"Printer", 'String'>
    readonly brand: FieldRef<"Printer", 'String'>
    readonly description: FieldRef<"Printer", 'String'>
    readonly facility: FieldRef<"Printer", 'String'>
    readonly building: FieldRef<"Printer", 'String'>
    readonly room: FieldRef<"Printer", 'String'>
    readonly spsomemberId: FieldRef<"Printer", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Printer findUnique
   */
  export type PrinterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Printer
     */
    select?: PrinterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrinterInclude<ExtArgs> | null
    /**
     * Filter, which Printer to fetch.
     */
    where: PrinterWhereUniqueInput
  }

  /**
   * Printer findUniqueOrThrow
   */
  export type PrinterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Printer
     */
    select?: PrinterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrinterInclude<ExtArgs> | null
    /**
     * Filter, which Printer to fetch.
     */
    where: PrinterWhereUniqueInput
  }

  /**
   * Printer findFirst
   */
  export type PrinterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Printer
     */
    select?: PrinterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrinterInclude<ExtArgs> | null
    /**
     * Filter, which Printer to fetch.
     */
    where?: PrinterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Printers to fetch.
     */
    orderBy?: PrinterOrderByWithRelationInput | PrinterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Printers.
     */
    cursor?: PrinterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Printers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Printers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Printers.
     */
    distinct?: PrinterScalarFieldEnum | PrinterScalarFieldEnum[]
  }

  /**
   * Printer findFirstOrThrow
   */
  export type PrinterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Printer
     */
    select?: PrinterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrinterInclude<ExtArgs> | null
    /**
     * Filter, which Printer to fetch.
     */
    where?: PrinterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Printers to fetch.
     */
    orderBy?: PrinterOrderByWithRelationInput | PrinterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Printers.
     */
    cursor?: PrinterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Printers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Printers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Printers.
     */
    distinct?: PrinterScalarFieldEnum | PrinterScalarFieldEnum[]
  }

  /**
   * Printer findMany
   */
  export type PrinterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Printer
     */
    select?: PrinterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrinterInclude<ExtArgs> | null
    /**
     * Filter, which Printers to fetch.
     */
    where?: PrinterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Printers to fetch.
     */
    orderBy?: PrinterOrderByWithRelationInput | PrinterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Printers.
     */
    cursor?: PrinterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Printers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Printers.
     */
    skip?: number
    distinct?: PrinterScalarFieldEnum | PrinterScalarFieldEnum[]
  }

  /**
   * Printer create
   */
  export type PrinterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Printer
     */
    select?: PrinterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrinterInclude<ExtArgs> | null
    /**
     * The data needed to create a Printer.
     */
    data: XOR<PrinterCreateInput, PrinterUncheckedCreateInput>
  }

  /**
   * Printer createMany
   */
  export type PrinterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Printers.
     */
    data: PrinterCreateManyInput | PrinterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Printer createManyAndReturn
   */
  export type PrinterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Printer
     */
    select?: PrinterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Printers.
     */
    data: PrinterCreateManyInput | PrinterCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrinterIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Printer update
   */
  export type PrinterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Printer
     */
    select?: PrinterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrinterInclude<ExtArgs> | null
    /**
     * The data needed to update a Printer.
     */
    data: XOR<PrinterUpdateInput, PrinterUncheckedUpdateInput>
    /**
     * Choose, which Printer to update.
     */
    where: PrinterWhereUniqueInput
  }

  /**
   * Printer updateMany
   */
  export type PrinterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Printers.
     */
    data: XOR<PrinterUpdateManyMutationInput, PrinterUncheckedUpdateManyInput>
    /**
     * Filter which Printers to update
     */
    where?: PrinterWhereInput
  }

  /**
   * Printer upsert
   */
  export type PrinterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Printer
     */
    select?: PrinterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrinterInclude<ExtArgs> | null
    /**
     * The filter to search for the Printer to update in case it exists.
     */
    where: PrinterWhereUniqueInput
    /**
     * In case the Printer found by the `where` argument doesn't exist, create a new Printer with this data.
     */
    create: XOR<PrinterCreateInput, PrinterUncheckedCreateInput>
    /**
     * In case the Printer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PrinterUpdateInput, PrinterUncheckedUpdateInput>
  }

  /**
   * Printer delete
   */
  export type PrinterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Printer
     */
    select?: PrinterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrinterInclude<ExtArgs> | null
    /**
     * Filter which Printer to delete.
     */
    where: PrinterWhereUniqueInput
  }

  /**
   * Printer deleteMany
   */
  export type PrinterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Printers to delete
     */
    where?: PrinterWhereInput
  }

  /**
   * Printer.documents
   */
  export type Printer$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Printer without action
   */
  export type PrinterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Printer
     */
    select?: PrinterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrinterInclude<ExtArgs> | null
  }


  /**
   * Model PagePurchaseOrder
   */

  export type AggregatePagePurchaseOrder = {
    _count: PagePurchaseOrderCountAggregateOutputType | null
    _avg: PagePurchaseOrderAvgAggregateOutputType | null
    _sum: PagePurchaseOrderSumAggregateOutputType | null
    _min: PagePurchaseOrderMinAggregateOutputType | null
    _max: PagePurchaseOrderMaxAggregateOutputType | null
  }

  export type PagePurchaseOrderAvgAggregateOutputType = {
    ppoId: number | null
    customerId: number | null
    pageNum: number | null
    price: number | null
  }

  export type PagePurchaseOrderSumAggregateOutputType = {
    ppoId: number | null
    customerId: number | null
    pageNum: number | null
    price: number | null
  }

  export type PagePurchaseOrderMinAggregateOutputType = {
    ppoId: number | null
    purchaseTime: Date | null
    customerId: number | null
    ppoStatus: string | null
    pageNum: number | null
    price: number | null
    paymentMethod: string | null
  }

  export type PagePurchaseOrderMaxAggregateOutputType = {
    ppoId: number | null
    purchaseTime: Date | null
    customerId: number | null
    ppoStatus: string | null
    pageNum: number | null
    price: number | null
    paymentMethod: string | null
  }

  export type PagePurchaseOrderCountAggregateOutputType = {
    ppoId: number
    purchaseTime: number
    customerId: number
    ppoStatus: number
    pageNum: number
    price: number
    paymentMethod: number
    _all: number
  }


  export type PagePurchaseOrderAvgAggregateInputType = {
    ppoId?: true
    customerId?: true
    pageNum?: true
    price?: true
  }

  export type PagePurchaseOrderSumAggregateInputType = {
    ppoId?: true
    customerId?: true
    pageNum?: true
    price?: true
  }

  export type PagePurchaseOrderMinAggregateInputType = {
    ppoId?: true
    purchaseTime?: true
    customerId?: true
    ppoStatus?: true
    pageNum?: true
    price?: true
    paymentMethod?: true
  }

  export type PagePurchaseOrderMaxAggregateInputType = {
    ppoId?: true
    purchaseTime?: true
    customerId?: true
    ppoStatus?: true
    pageNum?: true
    price?: true
    paymentMethod?: true
  }

  export type PagePurchaseOrderCountAggregateInputType = {
    ppoId?: true
    purchaseTime?: true
    customerId?: true
    ppoStatus?: true
    pageNum?: true
    price?: true
    paymentMethod?: true
    _all?: true
  }

  export type PagePurchaseOrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PagePurchaseOrder to aggregate.
     */
    where?: PagePurchaseOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PagePurchaseOrders to fetch.
     */
    orderBy?: PagePurchaseOrderOrderByWithRelationInput | PagePurchaseOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PagePurchaseOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PagePurchaseOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PagePurchaseOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PagePurchaseOrders
    **/
    _count?: true | PagePurchaseOrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PagePurchaseOrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PagePurchaseOrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PagePurchaseOrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PagePurchaseOrderMaxAggregateInputType
  }

  export type GetPagePurchaseOrderAggregateType<T extends PagePurchaseOrderAggregateArgs> = {
        [P in keyof T & keyof AggregatePagePurchaseOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePagePurchaseOrder[P]>
      : GetScalarType<T[P], AggregatePagePurchaseOrder[P]>
  }




  export type PagePurchaseOrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PagePurchaseOrderWhereInput
    orderBy?: PagePurchaseOrderOrderByWithAggregationInput | PagePurchaseOrderOrderByWithAggregationInput[]
    by: PagePurchaseOrderScalarFieldEnum[] | PagePurchaseOrderScalarFieldEnum
    having?: PagePurchaseOrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PagePurchaseOrderCountAggregateInputType | true
    _avg?: PagePurchaseOrderAvgAggregateInputType
    _sum?: PagePurchaseOrderSumAggregateInputType
    _min?: PagePurchaseOrderMinAggregateInputType
    _max?: PagePurchaseOrderMaxAggregateInputType
  }

  export type PagePurchaseOrderGroupByOutputType = {
    ppoId: number
    purchaseTime: Date
    customerId: number
    ppoStatus: string
    pageNum: number
    price: number
    paymentMethod: string
    _count: PagePurchaseOrderCountAggregateOutputType | null
    _avg: PagePurchaseOrderAvgAggregateOutputType | null
    _sum: PagePurchaseOrderSumAggregateOutputType | null
    _min: PagePurchaseOrderMinAggregateOutputType | null
    _max: PagePurchaseOrderMaxAggregateOutputType | null
  }

  type GetPagePurchaseOrderGroupByPayload<T extends PagePurchaseOrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PagePurchaseOrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PagePurchaseOrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PagePurchaseOrderGroupByOutputType[P]>
            : GetScalarType<T[P], PagePurchaseOrderGroupByOutputType[P]>
        }
      >
    >


  export type PagePurchaseOrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ppoId?: boolean
    purchaseTime?: boolean
    customerId?: boolean
    ppoStatus?: boolean
    pageNum?: boolean
    price?: boolean
    paymentMethod?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pagePurchaseOrder"]>

  export type PagePurchaseOrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ppoId?: boolean
    purchaseTime?: boolean
    customerId?: boolean
    ppoStatus?: boolean
    pageNum?: boolean
    price?: boolean
    paymentMethod?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pagePurchaseOrder"]>

  export type PagePurchaseOrderSelectScalar = {
    ppoId?: boolean
    purchaseTime?: boolean
    customerId?: boolean
    ppoStatus?: boolean
    pageNum?: boolean
    price?: boolean
    paymentMethod?: boolean
  }

  export type PagePurchaseOrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }
  export type PagePurchaseOrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }

  export type $PagePurchaseOrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PagePurchaseOrder"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      ppoId: number
      purchaseTime: Date
      customerId: number
      ppoStatus: string
      pageNum: number
      price: number
      paymentMethod: string
    }, ExtArgs["result"]["pagePurchaseOrder"]>
    composites: {}
  }

  type PagePurchaseOrderGetPayload<S extends boolean | null | undefined | PagePurchaseOrderDefaultArgs> = $Result.GetResult<Prisma.$PagePurchaseOrderPayload, S>

  type PagePurchaseOrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PagePurchaseOrderFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PagePurchaseOrderCountAggregateInputType | true
    }

  export interface PagePurchaseOrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PagePurchaseOrder'], meta: { name: 'PagePurchaseOrder' } }
    /**
     * Find zero or one PagePurchaseOrder that matches the filter.
     * @param {PagePurchaseOrderFindUniqueArgs} args - Arguments to find a PagePurchaseOrder
     * @example
     * // Get one PagePurchaseOrder
     * const pagePurchaseOrder = await prisma.pagePurchaseOrder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PagePurchaseOrderFindUniqueArgs>(args: SelectSubset<T, PagePurchaseOrderFindUniqueArgs<ExtArgs>>): Prisma__PagePurchaseOrderClient<$Result.GetResult<Prisma.$PagePurchaseOrderPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PagePurchaseOrder that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PagePurchaseOrderFindUniqueOrThrowArgs} args - Arguments to find a PagePurchaseOrder
     * @example
     * // Get one PagePurchaseOrder
     * const pagePurchaseOrder = await prisma.pagePurchaseOrder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PagePurchaseOrderFindUniqueOrThrowArgs>(args: SelectSubset<T, PagePurchaseOrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PagePurchaseOrderClient<$Result.GetResult<Prisma.$PagePurchaseOrderPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PagePurchaseOrder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagePurchaseOrderFindFirstArgs} args - Arguments to find a PagePurchaseOrder
     * @example
     * // Get one PagePurchaseOrder
     * const pagePurchaseOrder = await prisma.pagePurchaseOrder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PagePurchaseOrderFindFirstArgs>(args?: SelectSubset<T, PagePurchaseOrderFindFirstArgs<ExtArgs>>): Prisma__PagePurchaseOrderClient<$Result.GetResult<Prisma.$PagePurchaseOrderPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PagePurchaseOrder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagePurchaseOrderFindFirstOrThrowArgs} args - Arguments to find a PagePurchaseOrder
     * @example
     * // Get one PagePurchaseOrder
     * const pagePurchaseOrder = await prisma.pagePurchaseOrder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PagePurchaseOrderFindFirstOrThrowArgs>(args?: SelectSubset<T, PagePurchaseOrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__PagePurchaseOrderClient<$Result.GetResult<Prisma.$PagePurchaseOrderPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PagePurchaseOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagePurchaseOrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PagePurchaseOrders
     * const pagePurchaseOrders = await prisma.pagePurchaseOrder.findMany()
     * 
     * // Get first 10 PagePurchaseOrders
     * const pagePurchaseOrders = await prisma.pagePurchaseOrder.findMany({ take: 10 })
     * 
     * // Only select the `ppoId`
     * const pagePurchaseOrderWithPpoIdOnly = await prisma.pagePurchaseOrder.findMany({ select: { ppoId: true } })
     * 
     */
    findMany<T extends PagePurchaseOrderFindManyArgs>(args?: SelectSubset<T, PagePurchaseOrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PagePurchaseOrderPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PagePurchaseOrder.
     * @param {PagePurchaseOrderCreateArgs} args - Arguments to create a PagePurchaseOrder.
     * @example
     * // Create one PagePurchaseOrder
     * const PagePurchaseOrder = await prisma.pagePurchaseOrder.create({
     *   data: {
     *     // ... data to create a PagePurchaseOrder
     *   }
     * })
     * 
     */
    create<T extends PagePurchaseOrderCreateArgs>(args: SelectSubset<T, PagePurchaseOrderCreateArgs<ExtArgs>>): Prisma__PagePurchaseOrderClient<$Result.GetResult<Prisma.$PagePurchaseOrderPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PagePurchaseOrders.
     * @param {PagePurchaseOrderCreateManyArgs} args - Arguments to create many PagePurchaseOrders.
     * @example
     * // Create many PagePurchaseOrders
     * const pagePurchaseOrder = await prisma.pagePurchaseOrder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PagePurchaseOrderCreateManyArgs>(args?: SelectSubset<T, PagePurchaseOrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PagePurchaseOrders and returns the data saved in the database.
     * @param {PagePurchaseOrderCreateManyAndReturnArgs} args - Arguments to create many PagePurchaseOrders.
     * @example
     * // Create many PagePurchaseOrders
     * const pagePurchaseOrder = await prisma.pagePurchaseOrder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PagePurchaseOrders and only return the `ppoId`
     * const pagePurchaseOrderWithPpoIdOnly = await prisma.pagePurchaseOrder.createManyAndReturn({ 
     *   select: { ppoId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PagePurchaseOrderCreateManyAndReturnArgs>(args?: SelectSubset<T, PagePurchaseOrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PagePurchaseOrderPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PagePurchaseOrder.
     * @param {PagePurchaseOrderDeleteArgs} args - Arguments to delete one PagePurchaseOrder.
     * @example
     * // Delete one PagePurchaseOrder
     * const PagePurchaseOrder = await prisma.pagePurchaseOrder.delete({
     *   where: {
     *     // ... filter to delete one PagePurchaseOrder
     *   }
     * })
     * 
     */
    delete<T extends PagePurchaseOrderDeleteArgs>(args: SelectSubset<T, PagePurchaseOrderDeleteArgs<ExtArgs>>): Prisma__PagePurchaseOrderClient<$Result.GetResult<Prisma.$PagePurchaseOrderPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PagePurchaseOrder.
     * @param {PagePurchaseOrderUpdateArgs} args - Arguments to update one PagePurchaseOrder.
     * @example
     * // Update one PagePurchaseOrder
     * const pagePurchaseOrder = await prisma.pagePurchaseOrder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PagePurchaseOrderUpdateArgs>(args: SelectSubset<T, PagePurchaseOrderUpdateArgs<ExtArgs>>): Prisma__PagePurchaseOrderClient<$Result.GetResult<Prisma.$PagePurchaseOrderPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PagePurchaseOrders.
     * @param {PagePurchaseOrderDeleteManyArgs} args - Arguments to filter PagePurchaseOrders to delete.
     * @example
     * // Delete a few PagePurchaseOrders
     * const { count } = await prisma.pagePurchaseOrder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PagePurchaseOrderDeleteManyArgs>(args?: SelectSubset<T, PagePurchaseOrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PagePurchaseOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagePurchaseOrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PagePurchaseOrders
     * const pagePurchaseOrder = await prisma.pagePurchaseOrder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PagePurchaseOrderUpdateManyArgs>(args: SelectSubset<T, PagePurchaseOrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PagePurchaseOrder.
     * @param {PagePurchaseOrderUpsertArgs} args - Arguments to update or create a PagePurchaseOrder.
     * @example
     * // Update or create a PagePurchaseOrder
     * const pagePurchaseOrder = await prisma.pagePurchaseOrder.upsert({
     *   create: {
     *     // ... data to create a PagePurchaseOrder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PagePurchaseOrder we want to update
     *   }
     * })
     */
    upsert<T extends PagePurchaseOrderUpsertArgs>(args: SelectSubset<T, PagePurchaseOrderUpsertArgs<ExtArgs>>): Prisma__PagePurchaseOrderClient<$Result.GetResult<Prisma.$PagePurchaseOrderPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PagePurchaseOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagePurchaseOrderCountArgs} args - Arguments to filter PagePurchaseOrders to count.
     * @example
     * // Count the number of PagePurchaseOrders
     * const count = await prisma.pagePurchaseOrder.count({
     *   where: {
     *     // ... the filter for the PagePurchaseOrders we want to count
     *   }
     * })
    **/
    count<T extends PagePurchaseOrderCountArgs>(
      args?: Subset<T, PagePurchaseOrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PagePurchaseOrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PagePurchaseOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagePurchaseOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PagePurchaseOrderAggregateArgs>(args: Subset<T, PagePurchaseOrderAggregateArgs>): Prisma.PrismaPromise<GetPagePurchaseOrderAggregateType<T>>

    /**
     * Group by PagePurchaseOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagePurchaseOrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PagePurchaseOrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PagePurchaseOrderGroupByArgs['orderBy'] }
        : { orderBy?: PagePurchaseOrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PagePurchaseOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPagePurchaseOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PagePurchaseOrder model
   */
  readonly fields: PagePurchaseOrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PagePurchaseOrder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PagePurchaseOrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PagePurchaseOrder model
   */ 
  interface PagePurchaseOrderFieldRefs {
    readonly ppoId: FieldRef<"PagePurchaseOrder", 'Int'>
    readonly purchaseTime: FieldRef<"PagePurchaseOrder", 'DateTime'>
    readonly customerId: FieldRef<"PagePurchaseOrder", 'Int'>
    readonly ppoStatus: FieldRef<"PagePurchaseOrder", 'String'>
    readonly pageNum: FieldRef<"PagePurchaseOrder", 'Int'>
    readonly price: FieldRef<"PagePurchaseOrder", 'Float'>
    readonly paymentMethod: FieldRef<"PagePurchaseOrder", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PagePurchaseOrder findUnique
   */
  export type PagePurchaseOrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PagePurchaseOrder
     */
    select?: PagePurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagePurchaseOrderInclude<ExtArgs> | null
    /**
     * Filter, which PagePurchaseOrder to fetch.
     */
    where: PagePurchaseOrderWhereUniqueInput
  }

  /**
   * PagePurchaseOrder findUniqueOrThrow
   */
  export type PagePurchaseOrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PagePurchaseOrder
     */
    select?: PagePurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagePurchaseOrderInclude<ExtArgs> | null
    /**
     * Filter, which PagePurchaseOrder to fetch.
     */
    where: PagePurchaseOrderWhereUniqueInput
  }

  /**
   * PagePurchaseOrder findFirst
   */
  export type PagePurchaseOrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PagePurchaseOrder
     */
    select?: PagePurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagePurchaseOrderInclude<ExtArgs> | null
    /**
     * Filter, which PagePurchaseOrder to fetch.
     */
    where?: PagePurchaseOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PagePurchaseOrders to fetch.
     */
    orderBy?: PagePurchaseOrderOrderByWithRelationInput | PagePurchaseOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PagePurchaseOrders.
     */
    cursor?: PagePurchaseOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PagePurchaseOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PagePurchaseOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PagePurchaseOrders.
     */
    distinct?: PagePurchaseOrderScalarFieldEnum | PagePurchaseOrderScalarFieldEnum[]
  }

  /**
   * PagePurchaseOrder findFirstOrThrow
   */
  export type PagePurchaseOrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PagePurchaseOrder
     */
    select?: PagePurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagePurchaseOrderInclude<ExtArgs> | null
    /**
     * Filter, which PagePurchaseOrder to fetch.
     */
    where?: PagePurchaseOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PagePurchaseOrders to fetch.
     */
    orderBy?: PagePurchaseOrderOrderByWithRelationInput | PagePurchaseOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PagePurchaseOrders.
     */
    cursor?: PagePurchaseOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PagePurchaseOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PagePurchaseOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PagePurchaseOrders.
     */
    distinct?: PagePurchaseOrderScalarFieldEnum | PagePurchaseOrderScalarFieldEnum[]
  }

  /**
   * PagePurchaseOrder findMany
   */
  export type PagePurchaseOrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PagePurchaseOrder
     */
    select?: PagePurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagePurchaseOrderInclude<ExtArgs> | null
    /**
     * Filter, which PagePurchaseOrders to fetch.
     */
    where?: PagePurchaseOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PagePurchaseOrders to fetch.
     */
    orderBy?: PagePurchaseOrderOrderByWithRelationInput | PagePurchaseOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PagePurchaseOrders.
     */
    cursor?: PagePurchaseOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PagePurchaseOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PagePurchaseOrders.
     */
    skip?: number
    distinct?: PagePurchaseOrderScalarFieldEnum | PagePurchaseOrderScalarFieldEnum[]
  }

  /**
   * PagePurchaseOrder create
   */
  export type PagePurchaseOrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PagePurchaseOrder
     */
    select?: PagePurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagePurchaseOrderInclude<ExtArgs> | null
    /**
     * The data needed to create a PagePurchaseOrder.
     */
    data: XOR<PagePurchaseOrderCreateInput, PagePurchaseOrderUncheckedCreateInput>
  }

  /**
   * PagePurchaseOrder createMany
   */
  export type PagePurchaseOrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PagePurchaseOrders.
     */
    data: PagePurchaseOrderCreateManyInput | PagePurchaseOrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PagePurchaseOrder createManyAndReturn
   */
  export type PagePurchaseOrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PagePurchaseOrder
     */
    select?: PagePurchaseOrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PagePurchaseOrders.
     */
    data: PagePurchaseOrderCreateManyInput | PagePurchaseOrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagePurchaseOrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PagePurchaseOrder update
   */
  export type PagePurchaseOrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PagePurchaseOrder
     */
    select?: PagePurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagePurchaseOrderInclude<ExtArgs> | null
    /**
     * The data needed to update a PagePurchaseOrder.
     */
    data: XOR<PagePurchaseOrderUpdateInput, PagePurchaseOrderUncheckedUpdateInput>
    /**
     * Choose, which PagePurchaseOrder to update.
     */
    where: PagePurchaseOrderWhereUniqueInput
  }

  /**
   * PagePurchaseOrder updateMany
   */
  export type PagePurchaseOrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PagePurchaseOrders.
     */
    data: XOR<PagePurchaseOrderUpdateManyMutationInput, PagePurchaseOrderUncheckedUpdateManyInput>
    /**
     * Filter which PagePurchaseOrders to update
     */
    where?: PagePurchaseOrderWhereInput
  }

  /**
   * PagePurchaseOrder upsert
   */
  export type PagePurchaseOrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PagePurchaseOrder
     */
    select?: PagePurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagePurchaseOrderInclude<ExtArgs> | null
    /**
     * The filter to search for the PagePurchaseOrder to update in case it exists.
     */
    where: PagePurchaseOrderWhereUniqueInput
    /**
     * In case the PagePurchaseOrder found by the `where` argument doesn't exist, create a new PagePurchaseOrder with this data.
     */
    create: XOR<PagePurchaseOrderCreateInput, PagePurchaseOrderUncheckedCreateInput>
    /**
     * In case the PagePurchaseOrder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PagePurchaseOrderUpdateInput, PagePurchaseOrderUncheckedUpdateInput>
  }

  /**
   * PagePurchaseOrder delete
   */
  export type PagePurchaseOrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PagePurchaseOrder
     */
    select?: PagePurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagePurchaseOrderInclude<ExtArgs> | null
    /**
     * Filter which PagePurchaseOrder to delete.
     */
    where: PagePurchaseOrderWhereUniqueInput
  }

  /**
   * PagePurchaseOrder deleteMany
   */
  export type PagePurchaseOrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PagePurchaseOrders to delete
     */
    where?: PagePurchaseOrderWhereInput
  }

  /**
   * PagePurchaseOrder without action
   */
  export type PagePurchaseOrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PagePurchaseOrder
     */
    select?: PagePurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagePurchaseOrderInclude<ExtArgs> | null
  }


  /**
   * Model PrintOrder
   */

  export type AggregatePrintOrder = {
    _count: PrintOrderCountAggregateOutputType | null
    _avg: PrintOrderAvgAggregateOutputType | null
    _sum: PrintOrderSumAggregateOutputType | null
    _min: PrintOrderMinAggregateOutputType | null
    _max: PrintOrderMaxAggregateOutputType | null
  }

  export type PrintOrderAvgAggregateOutputType = {
    printOrderId: number | null
    numCopies: number | null
    customerId: number | null
  }

  export type PrintOrderSumAggregateOutputType = {
    printOrderId: number | null
    numCopies: number | null
    customerId: number | null
  }

  export type PrintOrderMinAggregateOutputType = {
    printOrderId: number | null
    attributes: string | null
    startTime: Date | null
    endTime: Date | null
    poStatus: string | null
    numCopies: number | null
    customerId: number | null
  }

  export type PrintOrderMaxAggregateOutputType = {
    printOrderId: number | null
    attributes: string | null
    startTime: Date | null
    endTime: Date | null
    poStatus: string | null
    numCopies: number | null
    customerId: number | null
  }

  export type PrintOrderCountAggregateOutputType = {
    printOrderId: number
    attributes: number
    startTime: number
    endTime: number
    poStatus: number
    numCopies: number
    customerId: number
    _all: number
  }


  export type PrintOrderAvgAggregateInputType = {
    printOrderId?: true
    numCopies?: true
    customerId?: true
  }

  export type PrintOrderSumAggregateInputType = {
    printOrderId?: true
    numCopies?: true
    customerId?: true
  }

  export type PrintOrderMinAggregateInputType = {
    printOrderId?: true
    attributes?: true
    startTime?: true
    endTime?: true
    poStatus?: true
    numCopies?: true
    customerId?: true
  }

  export type PrintOrderMaxAggregateInputType = {
    printOrderId?: true
    attributes?: true
    startTime?: true
    endTime?: true
    poStatus?: true
    numCopies?: true
    customerId?: true
  }

  export type PrintOrderCountAggregateInputType = {
    printOrderId?: true
    attributes?: true
    startTime?: true
    endTime?: true
    poStatus?: true
    numCopies?: true
    customerId?: true
    _all?: true
  }

  export type PrintOrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PrintOrder to aggregate.
     */
    where?: PrintOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrintOrders to fetch.
     */
    orderBy?: PrintOrderOrderByWithRelationInput | PrintOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PrintOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrintOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrintOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PrintOrders
    **/
    _count?: true | PrintOrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PrintOrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PrintOrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PrintOrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PrintOrderMaxAggregateInputType
  }

  export type GetPrintOrderAggregateType<T extends PrintOrderAggregateArgs> = {
        [P in keyof T & keyof AggregatePrintOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePrintOrder[P]>
      : GetScalarType<T[P], AggregatePrintOrder[P]>
  }




  export type PrintOrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrintOrderWhereInput
    orderBy?: PrintOrderOrderByWithAggregationInput | PrintOrderOrderByWithAggregationInput[]
    by: PrintOrderScalarFieldEnum[] | PrintOrderScalarFieldEnum
    having?: PrintOrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PrintOrderCountAggregateInputType | true
    _avg?: PrintOrderAvgAggregateInputType
    _sum?: PrintOrderSumAggregateInputType
    _min?: PrintOrderMinAggregateInputType
    _max?: PrintOrderMaxAggregateInputType
  }

  export type PrintOrderGroupByOutputType = {
    printOrderId: number
    attributes: string
    startTime: Date
    endTime: Date
    poStatus: string
    numCopies: number
    customerId: number
    _count: PrintOrderCountAggregateOutputType | null
    _avg: PrintOrderAvgAggregateOutputType | null
    _sum: PrintOrderSumAggregateOutputType | null
    _min: PrintOrderMinAggregateOutputType | null
    _max: PrintOrderMaxAggregateOutputType | null
  }

  type GetPrintOrderGroupByPayload<T extends PrintOrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PrintOrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PrintOrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PrintOrderGroupByOutputType[P]>
            : GetScalarType<T[P], PrintOrderGroupByOutputType[P]>
        }
      >
    >


  export type PrintOrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    printOrderId?: boolean
    attributes?: boolean
    startTime?: boolean
    endTime?: boolean
    poStatus?: boolean
    numCopies?: boolean
    customerId?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    contains?: boolean | PrintOrder$containsArgs<ExtArgs>
    _count?: boolean | PrintOrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["printOrder"]>

  export type PrintOrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    printOrderId?: boolean
    attributes?: boolean
    startTime?: boolean
    endTime?: boolean
    poStatus?: boolean
    numCopies?: boolean
    customerId?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["printOrder"]>

  export type PrintOrderSelectScalar = {
    printOrderId?: boolean
    attributes?: boolean
    startTime?: boolean
    endTime?: boolean
    poStatus?: boolean
    numCopies?: boolean
    customerId?: boolean
  }

  export type PrintOrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    contains?: boolean | PrintOrder$containsArgs<ExtArgs>
    _count?: boolean | PrintOrderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PrintOrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }

  export type $PrintOrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PrintOrder"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs>
      contains: Prisma.$ContainsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      printOrderId: number
      attributes: string
      startTime: Date
      endTime: Date
      poStatus: string
      numCopies: number
      customerId: number
    }, ExtArgs["result"]["printOrder"]>
    composites: {}
  }

  type PrintOrderGetPayload<S extends boolean | null | undefined | PrintOrderDefaultArgs> = $Result.GetResult<Prisma.$PrintOrderPayload, S>

  type PrintOrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PrintOrderFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PrintOrderCountAggregateInputType | true
    }

  export interface PrintOrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PrintOrder'], meta: { name: 'PrintOrder' } }
    /**
     * Find zero or one PrintOrder that matches the filter.
     * @param {PrintOrderFindUniqueArgs} args - Arguments to find a PrintOrder
     * @example
     * // Get one PrintOrder
     * const printOrder = await prisma.printOrder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PrintOrderFindUniqueArgs>(args: SelectSubset<T, PrintOrderFindUniqueArgs<ExtArgs>>): Prisma__PrintOrderClient<$Result.GetResult<Prisma.$PrintOrderPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PrintOrder that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PrintOrderFindUniqueOrThrowArgs} args - Arguments to find a PrintOrder
     * @example
     * // Get one PrintOrder
     * const printOrder = await prisma.printOrder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PrintOrderFindUniqueOrThrowArgs>(args: SelectSubset<T, PrintOrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PrintOrderClient<$Result.GetResult<Prisma.$PrintOrderPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PrintOrder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrintOrderFindFirstArgs} args - Arguments to find a PrintOrder
     * @example
     * // Get one PrintOrder
     * const printOrder = await prisma.printOrder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PrintOrderFindFirstArgs>(args?: SelectSubset<T, PrintOrderFindFirstArgs<ExtArgs>>): Prisma__PrintOrderClient<$Result.GetResult<Prisma.$PrintOrderPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PrintOrder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrintOrderFindFirstOrThrowArgs} args - Arguments to find a PrintOrder
     * @example
     * // Get one PrintOrder
     * const printOrder = await prisma.printOrder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PrintOrderFindFirstOrThrowArgs>(args?: SelectSubset<T, PrintOrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__PrintOrderClient<$Result.GetResult<Prisma.$PrintOrderPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PrintOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrintOrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PrintOrders
     * const printOrders = await prisma.printOrder.findMany()
     * 
     * // Get first 10 PrintOrders
     * const printOrders = await prisma.printOrder.findMany({ take: 10 })
     * 
     * // Only select the `printOrderId`
     * const printOrderWithPrintOrderIdOnly = await prisma.printOrder.findMany({ select: { printOrderId: true } })
     * 
     */
    findMany<T extends PrintOrderFindManyArgs>(args?: SelectSubset<T, PrintOrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrintOrderPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PrintOrder.
     * @param {PrintOrderCreateArgs} args - Arguments to create a PrintOrder.
     * @example
     * // Create one PrintOrder
     * const PrintOrder = await prisma.printOrder.create({
     *   data: {
     *     // ... data to create a PrintOrder
     *   }
     * })
     * 
     */
    create<T extends PrintOrderCreateArgs>(args: SelectSubset<T, PrintOrderCreateArgs<ExtArgs>>): Prisma__PrintOrderClient<$Result.GetResult<Prisma.$PrintOrderPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PrintOrders.
     * @param {PrintOrderCreateManyArgs} args - Arguments to create many PrintOrders.
     * @example
     * // Create many PrintOrders
     * const printOrder = await prisma.printOrder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PrintOrderCreateManyArgs>(args?: SelectSubset<T, PrintOrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PrintOrders and returns the data saved in the database.
     * @param {PrintOrderCreateManyAndReturnArgs} args - Arguments to create many PrintOrders.
     * @example
     * // Create many PrintOrders
     * const printOrder = await prisma.printOrder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PrintOrders and only return the `printOrderId`
     * const printOrderWithPrintOrderIdOnly = await prisma.printOrder.createManyAndReturn({ 
     *   select: { printOrderId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PrintOrderCreateManyAndReturnArgs>(args?: SelectSubset<T, PrintOrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrintOrderPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PrintOrder.
     * @param {PrintOrderDeleteArgs} args - Arguments to delete one PrintOrder.
     * @example
     * // Delete one PrintOrder
     * const PrintOrder = await prisma.printOrder.delete({
     *   where: {
     *     // ... filter to delete one PrintOrder
     *   }
     * })
     * 
     */
    delete<T extends PrintOrderDeleteArgs>(args: SelectSubset<T, PrintOrderDeleteArgs<ExtArgs>>): Prisma__PrintOrderClient<$Result.GetResult<Prisma.$PrintOrderPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PrintOrder.
     * @param {PrintOrderUpdateArgs} args - Arguments to update one PrintOrder.
     * @example
     * // Update one PrintOrder
     * const printOrder = await prisma.printOrder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PrintOrderUpdateArgs>(args: SelectSubset<T, PrintOrderUpdateArgs<ExtArgs>>): Prisma__PrintOrderClient<$Result.GetResult<Prisma.$PrintOrderPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PrintOrders.
     * @param {PrintOrderDeleteManyArgs} args - Arguments to filter PrintOrders to delete.
     * @example
     * // Delete a few PrintOrders
     * const { count } = await prisma.printOrder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PrintOrderDeleteManyArgs>(args?: SelectSubset<T, PrintOrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PrintOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrintOrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PrintOrders
     * const printOrder = await prisma.printOrder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PrintOrderUpdateManyArgs>(args: SelectSubset<T, PrintOrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PrintOrder.
     * @param {PrintOrderUpsertArgs} args - Arguments to update or create a PrintOrder.
     * @example
     * // Update or create a PrintOrder
     * const printOrder = await prisma.printOrder.upsert({
     *   create: {
     *     // ... data to create a PrintOrder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PrintOrder we want to update
     *   }
     * })
     */
    upsert<T extends PrintOrderUpsertArgs>(args: SelectSubset<T, PrintOrderUpsertArgs<ExtArgs>>): Prisma__PrintOrderClient<$Result.GetResult<Prisma.$PrintOrderPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PrintOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrintOrderCountArgs} args - Arguments to filter PrintOrders to count.
     * @example
     * // Count the number of PrintOrders
     * const count = await prisma.printOrder.count({
     *   where: {
     *     // ... the filter for the PrintOrders we want to count
     *   }
     * })
    **/
    count<T extends PrintOrderCountArgs>(
      args?: Subset<T, PrintOrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PrintOrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PrintOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrintOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PrintOrderAggregateArgs>(args: Subset<T, PrintOrderAggregateArgs>): Prisma.PrismaPromise<GetPrintOrderAggregateType<T>>

    /**
     * Group by PrintOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrintOrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PrintOrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PrintOrderGroupByArgs['orderBy'] }
        : { orderBy?: PrintOrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PrintOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPrintOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PrintOrder model
   */
  readonly fields: PrintOrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PrintOrder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PrintOrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    contains<T extends PrintOrder$containsArgs<ExtArgs> = {}>(args?: Subset<T, PrintOrder$containsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContainsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PrintOrder model
   */ 
  interface PrintOrderFieldRefs {
    readonly printOrderId: FieldRef<"PrintOrder", 'Int'>
    readonly attributes: FieldRef<"PrintOrder", 'String'>
    readonly startTime: FieldRef<"PrintOrder", 'DateTime'>
    readonly endTime: FieldRef<"PrintOrder", 'DateTime'>
    readonly poStatus: FieldRef<"PrintOrder", 'String'>
    readonly numCopies: FieldRef<"PrintOrder", 'Int'>
    readonly customerId: FieldRef<"PrintOrder", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PrintOrder findUnique
   */
  export type PrintOrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintOrder
     */
    select?: PrintOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrintOrderInclude<ExtArgs> | null
    /**
     * Filter, which PrintOrder to fetch.
     */
    where: PrintOrderWhereUniqueInput
  }

  /**
   * PrintOrder findUniqueOrThrow
   */
  export type PrintOrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintOrder
     */
    select?: PrintOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrintOrderInclude<ExtArgs> | null
    /**
     * Filter, which PrintOrder to fetch.
     */
    where: PrintOrderWhereUniqueInput
  }

  /**
   * PrintOrder findFirst
   */
  export type PrintOrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintOrder
     */
    select?: PrintOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrintOrderInclude<ExtArgs> | null
    /**
     * Filter, which PrintOrder to fetch.
     */
    where?: PrintOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrintOrders to fetch.
     */
    orderBy?: PrintOrderOrderByWithRelationInput | PrintOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PrintOrders.
     */
    cursor?: PrintOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrintOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrintOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PrintOrders.
     */
    distinct?: PrintOrderScalarFieldEnum | PrintOrderScalarFieldEnum[]
  }

  /**
   * PrintOrder findFirstOrThrow
   */
  export type PrintOrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintOrder
     */
    select?: PrintOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrintOrderInclude<ExtArgs> | null
    /**
     * Filter, which PrintOrder to fetch.
     */
    where?: PrintOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrintOrders to fetch.
     */
    orderBy?: PrintOrderOrderByWithRelationInput | PrintOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PrintOrders.
     */
    cursor?: PrintOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrintOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrintOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PrintOrders.
     */
    distinct?: PrintOrderScalarFieldEnum | PrintOrderScalarFieldEnum[]
  }

  /**
   * PrintOrder findMany
   */
  export type PrintOrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintOrder
     */
    select?: PrintOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrintOrderInclude<ExtArgs> | null
    /**
     * Filter, which PrintOrders to fetch.
     */
    where?: PrintOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrintOrders to fetch.
     */
    orderBy?: PrintOrderOrderByWithRelationInput | PrintOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PrintOrders.
     */
    cursor?: PrintOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrintOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrintOrders.
     */
    skip?: number
    distinct?: PrintOrderScalarFieldEnum | PrintOrderScalarFieldEnum[]
  }

  /**
   * PrintOrder create
   */
  export type PrintOrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintOrder
     */
    select?: PrintOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrintOrderInclude<ExtArgs> | null
    /**
     * The data needed to create a PrintOrder.
     */
    data: XOR<PrintOrderCreateInput, PrintOrderUncheckedCreateInput>
  }

  /**
   * PrintOrder createMany
   */
  export type PrintOrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PrintOrders.
     */
    data: PrintOrderCreateManyInput | PrintOrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PrintOrder createManyAndReturn
   */
  export type PrintOrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintOrder
     */
    select?: PrintOrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PrintOrders.
     */
    data: PrintOrderCreateManyInput | PrintOrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrintOrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PrintOrder update
   */
  export type PrintOrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintOrder
     */
    select?: PrintOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrintOrderInclude<ExtArgs> | null
    /**
     * The data needed to update a PrintOrder.
     */
    data: XOR<PrintOrderUpdateInput, PrintOrderUncheckedUpdateInput>
    /**
     * Choose, which PrintOrder to update.
     */
    where: PrintOrderWhereUniqueInput
  }

  /**
   * PrintOrder updateMany
   */
  export type PrintOrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PrintOrders.
     */
    data: XOR<PrintOrderUpdateManyMutationInput, PrintOrderUncheckedUpdateManyInput>
    /**
     * Filter which PrintOrders to update
     */
    where?: PrintOrderWhereInput
  }

  /**
   * PrintOrder upsert
   */
  export type PrintOrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintOrder
     */
    select?: PrintOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrintOrderInclude<ExtArgs> | null
    /**
     * The filter to search for the PrintOrder to update in case it exists.
     */
    where: PrintOrderWhereUniqueInput
    /**
     * In case the PrintOrder found by the `where` argument doesn't exist, create a new PrintOrder with this data.
     */
    create: XOR<PrintOrderCreateInput, PrintOrderUncheckedCreateInput>
    /**
     * In case the PrintOrder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PrintOrderUpdateInput, PrintOrderUncheckedUpdateInput>
  }

  /**
   * PrintOrder delete
   */
  export type PrintOrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintOrder
     */
    select?: PrintOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrintOrderInclude<ExtArgs> | null
    /**
     * Filter which PrintOrder to delete.
     */
    where: PrintOrderWhereUniqueInput
  }

  /**
   * PrintOrder deleteMany
   */
  export type PrintOrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PrintOrders to delete
     */
    where?: PrintOrderWhereInput
  }

  /**
   * PrintOrder.contains
   */
  export type PrintOrder$containsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contains
     */
    select?: ContainsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainsInclude<ExtArgs> | null
    where?: ContainsWhereInput
    orderBy?: ContainsOrderByWithRelationInput | ContainsOrderByWithRelationInput[]
    cursor?: ContainsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContainsScalarFieldEnum | ContainsScalarFieldEnum[]
  }

  /**
   * PrintOrder without action
   */
  export type PrintOrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintOrder
     */
    select?: PrintOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrintOrderInclude<ExtArgs> | null
  }


  /**
   * Model Document
   */

  export type AggregateDocument = {
    _count: DocumentCountAggregateOutputType | null
    _avg: DocumentAvgAggregateOutputType | null
    _sum: DocumentSumAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  export type DocumentAvgAggregateOutputType = {
    documentId: number | null
    customerId: number | null
    printerId: number | null
    docQuantity: number | null
  }

  export type DocumentSumAggregateOutputType = {
    documentId: number | null
    customerId: number | null
    printerId: number | null
    docQuantity: number | null
  }

  export type DocumentMinAggregateOutputType = {
    documentId: number | null
    docName: string | null
    customerId: number | null
    printerId: number | null
    docQuantity: number | null
  }

  export type DocumentMaxAggregateOutputType = {
    documentId: number | null
    docName: string | null
    customerId: number | null
    printerId: number | null
    docQuantity: number | null
  }

  export type DocumentCountAggregateOutputType = {
    documentId: number
    docName: number
    customerId: number
    printerId: number
    docQuantity: number
    _all: number
  }


  export type DocumentAvgAggregateInputType = {
    documentId?: true
    customerId?: true
    printerId?: true
    docQuantity?: true
  }

  export type DocumentSumAggregateInputType = {
    documentId?: true
    customerId?: true
    printerId?: true
    docQuantity?: true
  }

  export type DocumentMinAggregateInputType = {
    documentId?: true
    docName?: true
    customerId?: true
    printerId?: true
    docQuantity?: true
  }

  export type DocumentMaxAggregateInputType = {
    documentId?: true
    docName?: true
    customerId?: true
    printerId?: true
    docQuantity?: true
  }

  export type DocumentCountAggregateInputType = {
    documentId?: true
    docName?: true
    customerId?: true
    printerId?: true
    docQuantity?: true
    _all?: true
  }

  export type DocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Document to aggregate.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Documents
    **/
    _count?: true | DocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DocumentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DocumentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentMaxAggregateInputType
  }

  export type GetDocumentAggregateType<T extends DocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocument[P]>
      : GetScalarType<T[P], AggregateDocument[P]>
  }




  export type DocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithAggregationInput | DocumentOrderByWithAggregationInput[]
    by: DocumentScalarFieldEnum[] | DocumentScalarFieldEnum
    having?: DocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentCountAggregateInputType | true
    _avg?: DocumentAvgAggregateInputType
    _sum?: DocumentSumAggregateInputType
    _min?: DocumentMinAggregateInputType
    _max?: DocumentMaxAggregateInputType
  }

  export type DocumentGroupByOutputType = {
    documentId: number
    docName: string
    customerId: number
    printerId: number
    docQuantity: number
    _count: DocumentCountAggregateOutputType | null
    _avg: DocumentAvgAggregateOutputType | null
    _sum: DocumentSumAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  type GetDocumentGroupByPayload<T extends DocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentGroupByOutputType[P]>
        }
      >
    >


  export type DocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    documentId?: boolean
    docName?: boolean
    customerId?: boolean
    printerId?: boolean
    docQuantity?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    printer?: boolean | PrinterDefaultArgs<ExtArgs>
    contains?: boolean | Document$containsArgs<ExtArgs>
    _count?: boolean | DocumentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    documentId?: boolean
    docName?: boolean
    customerId?: boolean
    printerId?: boolean
    docQuantity?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    printer?: boolean | PrinterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectScalar = {
    documentId?: boolean
    docName?: boolean
    customerId?: boolean
    printerId?: boolean
    docQuantity?: boolean
  }

  export type DocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    printer?: boolean | PrinterDefaultArgs<ExtArgs>
    contains?: boolean | Document$containsArgs<ExtArgs>
    _count?: boolean | DocumentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    printer?: boolean | PrinterDefaultArgs<ExtArgs>
  }

  export type $DocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Document"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs>
      printer: Prisma.$PrinterPayload<ExtArgs>
      contains: Prisma.$ContainsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      documentId: number
      docName: string
      customerId: number
      printerId: number
      docQuantity: number
    }, ExtArgs["result"]["document"]>
    composites: {}
  }

  type DocumentGetPayload<S extends boolean | null | undefined | DocumentDefaultArgs> = $Result.GetResult<Prisma.$DocumentPayload, S>

  type DocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DocumentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DocumentCountAggregateInputType | true
    }

  export interface DocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Document'], meta: { name: 'Document' } }
    /**
     * Find zero or one Document that matches the filter.
     * @param {DocumentFindUniqueArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentFindUniqueArgs>(args: SelectSubset<T, DocumentFindUniqueArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Document that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DocumentFindUniqueOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Document that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentFindFirstArgs>(args?: SelectSubset<T, DocumentFindFirstArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Document that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Documents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Documents
     * const documents = await prisma.document.findMany()
     * 
     * // Get first 10 Documents
     * const documents = await prisma.document.findMany({ take: 10 })
     * 
     * // Only select the `documentId`
     * const documentWithDocumentIdOnly = await prisma.document.findMany({ select: { documentId: true } })
     * 
     */
    findMany<T extends DocumentFindManyArgs>(args?: SelectSubset<T, DocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Document.
     * @param {DocumentCreateArgs} args - Arguments to create a Document.
     * @example
     * // Create one Document
     * const Document = await prisma.document.create({
     *   data: {
     *     // ... data to create a Document
     *   }
     * })
     * 
     */
    create<T extends DocumentCreateArgs>(args: SelectSubset<T, DocumentCreateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Documents.
     * @param {DocumentCreateManyArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentCreateManyArgs>(args?: SelectSubset<T, DocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Documents and returns the data saved in the database.
     * @param {DocumentCreateManyAndReturnArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Documents and only return the `documentId`
     * const documentWithDocumentIdOnly = await prisma.document.createManyAndReturn({ 
     *   select: { documentId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Document.
     * @param {DocumentDeleteArgs} args - Arguments to delete one Document.
     * @example
     * // Delete one Document
     * const Document = await prisma.document.delete({
     *   where: {
     *     // ... filter to delete one Document
     *   }
     * })
     * 
     */
    delete<T extends DocumentDeleteArgs>(args: SelectSubset<T, DocumentDeleteArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Document.
     * @param {DocumentUpdateArgs} args - Arguments to update one Document.
     * @example
     * // Update one Document
     * const document = await prisma.document.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentUpdateArgs>(args: SelectSubset<T, DocumentUpdateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Documents.
     * @param {DocumentDeleteManyArgs} args - Arguments to filter Documents to delete.
     * @example
     * // Delete a few Documents
     * const { count } = await prisma.document.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentDeleteManyArgs>(args?: SelectSubset<T, DocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Documents
     * const document = await prisma.document.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentUpdateManyArgs>(args: SelectSubset<T, DocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Document.
     * @param {DocumentUpsertArgs} args - Arguments to update or create a Document.
     * @example
     * // Update or create a Document
     * const document = await prisma.document.upsert({
     *   create: {
     *     // ... data to create a Document
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Document we want to update
     *   }
     * })
     */
    upsert<T extends DocumentUpsertArgs>(args: SelectSubset<T, DocumentUpsertArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentCountArgs} args - Arguments to filter Documents to count.
     * @example
     * // Count the number of Documents
     * const count = await prisma.document.count({
     *   where: {
     *     // ... the filter for the Documents we want to count
     *   }
     * })
    **/
    count<T extends DocumentCountArgs>(
      args?: Subset<T, DocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentAggregateArgs>(args: Subset<T, DocumentAggregateArgs>): Prisma.PrismaPromise<GetDocumentAggregateType<T>>

    /**
     * Group by Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentGroupByArgs['orderBy'] }
        : { orderBy?: DocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Document model
   */
  readonly fields: DocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Document.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    printer<T extends PrinterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PrinterDefaultArgs<ExtArgs>>): Prisma__PrinterClient<$Result.GetResult<Prisma.$PrinterPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    contains<T extends Document$containsArgs<ExtArgs> = {}>(args?: Subset<T, Document$containsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContainsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Document model
   */ 
  interface DocumentFieldRefs {
    readonly documentId: FieldRef<"Document", 'Int'>
    readonly docName: FieldRef<"Document", 'String'>
    readonly customerId: FieldRef<"Document", 'Int'>
    readonly printerId: FieldRef<"Document", 'Int'>
    readonly docQuantity: FieldRef<"Document", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Document findUnique
   */
  export type DocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findUniqueOrThrow
   */
  export type DocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findFirst
   */
  export type DocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findFirstOrThrow
   */
  export type DocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findMany
   */
  export type DocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Documents to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document create
   */
  export type DocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a Document.
     */
    data: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
  }

  /**
   * Document createMany
   */
  export type DocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Document createManyAndReturn
   */
  export type DocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Document update
   */
  export type DocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a Document.
     */
    data: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
    /**
     * Choose, which Document to update.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document updateMany
   */
  export type DocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Documents.
     */
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyInput>
    /**
     * Filter which Documents to update
     */
    where?: DocumentWhereInput
  }

  /**
   * Document upsert
   */
  export type DocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the Document to update in case it exists.
     */
    where: DocumentWhereUniqueInput
    /**
     * In case the Document found by the `where` argument doesn't exist, create a new Document with this data.
     */
    create: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
    /**
     * In case the Document was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
  }

  /**
   * Document delete
   */
  export type DocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter which Document to delete.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document deleteMany
   */
  export type DocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Documents to delete
     */
    where?: DocumentWhereInput
  }

  /**
   * Document.contains
   */
  export type Document$containsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contains
     */
    select?: ContainsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainsInclude<ExtArgs> | null
    where?: ContainsWhereInput
    orderBy?: ContainsOrderByWithRelationInput | ContainsOrderByWithRelationInput[]
    cursor?: ContainsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContainsScalarFieldEnum | ContainsScalarFieldEnum[]
  }

  /**
   * Document without action
   */
  export type DocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
  }


  /**
   * Model Contains
   */

  export type AggregateContains = {
    _count: ContainsCountAggregateOutputType | null
    _avg: ContainsAvgAggregateOutputType | null
    _sum: ContainsSumAggregateOutputType | null
    _min: ContainsMinAggregateOutputType | null
    _max: ContainsMaxAggregateOutputType | null
  }

  export type ContainsAvgAggregateOutputType = {
    id: number | null
    documentId: number | null
    printOrderId: number | null
  }

  export type ContainsSumAggregateOutputType = {
    id: number | null
    documentId: number | null
    printOrderId: number | null
  }

  export type ContainsMinAggregateOutputType = {
    id: number | null
    documentId: number | null
    printOrderId: number | null
  }

  export type ContainsMaxAggregateOutputType = {
    id: number | null
    documentId: number | null
    printOrderId: number | null
  }

  export type ContainsCountAggregateOutputType = {
    id: number
    documentId: number
    printOrderId: number
    _all: number
  }


  export type ContainsAvgAggregateInputType = {
    id?: true
    documentId?: true
    printOrderId?: true
  }

  export type ContainsSumAggregateInputType = {
    id?: true
    documentId?: true
    printOrderId?: true
  }

  export type ContainsMinAggregateInputType = {
    id?: true
    documentId?: true
    printOrderId?: true
  }

  export type ContainsMaxAggregateInputType = {
    id?: true
    documentId?: true
    printOrderId?: true
  }

  export type ContainsCountAggregateInputType = {
    id?: true
    documentId?: true
    printOrderId?: true
    _all?: true
  }

  export type ContainsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contains to aggregate.
     */
    where?: ContainsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contains to fetch.
     */
    orderBy?: ContainsOrderByWithRelationInput | ContainsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContainsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contains
    **/
    _count?: true | ContainsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContainsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContainsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContainsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContainsMaxAggregateInputType
  }

  export type GetContainsAggregateType<T extends ContainsAggregateArgs> = {
        [P in keyof T & keyof AggregateContains]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContains[P]>
      : GetScalarType<T[P], AggregateContains[P]>
  }




  export type ContainsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContainsWhereInput
    orderBy?: ContainsOrderByWithAggregationInput | ContainsOrderByWithAggregationInput[]
    by: ContainsScalarFieldEnum[] | ContainsScalarFieldEnum
    having?: ContainsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContainsCountAggregateInputType | true
    _avg?: ContainsAvgAggregateInputType
    _sum?: ContainsSumAggregateInputType
    _min?: ContainsMinAggregateInputType
    _max?: ContainsMaxAggregateInputType
  }

  export type ContainsGroupByOutputType = {
    id: number
    documentId: number
    printOrderId: number
    _count: ContainsCountAggregateOutputType | null
    _avg: ContainsAvgAggregateOutputType | null
    _sum: ContainsSumAggregateOutputType | null
    _min: ContainsMinAggregateOutputType | null
    _max: ContainsMaxAggregateOutputType | null
  }

  type GetContainsGroupByPayload<T extends ContainsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContainsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContainsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContainsGroupByOutputType[P]>
            : GetScalarType<T[P], ContainsGroupByOutputType[P]>
        }
      >
    >


  export type ContainsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    documentId?: boolean
    printOrderId?: boolean
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    printOrder?: boolean | PrintOrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contains"]>

  export type ContainsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    documentId?: boolean
    printOrderId?: boolean
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    printOrder?: boolean | PrintOrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contains"]>

  export type ContainsSelectScalar = {
    id?: boolean
    documentId?: boolean
    printOrderId?: boolean
  }

  export type ContainsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    printOrder?: boolean | PrintOrderDefaultArgs<ExtArgs>
  }
  export type ContainsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    printOrder?: boolean | PrintOrderDefaultArgs<ExtArgs>
  }

  export type $ContainsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Contains"
    objects: {
      document: Prisma.$DocumentPayload<ExtArgs>
      printOrder: Prisma.$PrintOrderPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      documentId: number
      printOrderId: number
    }, ExtArgs["result"]["contains"]>
    composites: {}
  }

  type ContainsGetPayload<S extends boolean | null | undefined | ContainsDefaultArgs> = $Result.GetResult<Prisma.$ContainsPayload, S>

  type ContainsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ContainsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ContainsCountAggregateInputType | true
    }

  export interface ContainsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contains'], meta: { name: 'Contains' } }
    /**
     * Find zero or one Contains that matches the filter.
     * @param {ContainsFindUniqueArgs} args - Arguments to find a Contains
     * @example
     * // Get one Contains
     * const contains = await prisma.contains.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContainsFindUniqueArgs>(args: SelectSubset<T, ContainsFindUniqueArgs<ExtArgs>>): Prisma__ContainsClient<$Result.GetResult<Prisma.$ContainsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Contains that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ContainsFindUniqueOrThrowArgs} args - Arguments to find a Contains
     * @example
     * // Get one Contains
     * const contains = await prisma.contains.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContainsFindUniqueOrThrowArgs>(args: SelectSubset<T, ContainsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContainsClient<$Result.GetResult<Prisma.$ContainsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Contains that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContainsFindFirstArgs} args - Arguments to find a Contains
     * @example
     * // Get one Contains
     * const contains = await prisma.contains.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContainsFindFirstArgs>(args?: SelectSubset<T, ContainsFindFirstArgs<ExtArgs>>): Prisma__ContainsClient<$Result.GetResult<Prisma.$ContainsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Contains that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContainsFindFirstOrThrowArgs} args - Arguments to find a Contains
     * @example
     * // Get one Contains
     * const contains = await prisma.contains.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContainsFindFirstOrThrowArgs>(args?: SelectSubset<T, ContainsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContainsClient<$Result.GetResult<Prisma.$ContainsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Contains that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContainsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contains
     * const contains = await prisma.contains.findMany()
     * 
     * // Get first 10 Contains
     * const contains = await prisma.contains.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const containsWithIdOnly = await prisma.contains.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContainsFindManyArgs>(args?: SelectSubset<T, ContainsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContainsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Contains.
     * @param {ContainsCreateArgs} args - Arguments to create a Contains.
     * @example
     * // Create one Contains
     * const Contains = await prisma.contains.create({
     *   data: {
     *     // ... data to create a Contains
     *   }
     * })
     * 
     */
    create<T extends ContainsCreateArgs>(args: SelectSubset<T, ContainsCreateArgs<ExtArgs>>): Prisma__ContainsClient<$Result.GetResult<Prisma.$ContainsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Contains.
     * @param {ContainsCreateManyArgs} args - Arguments to create many Contains.
     * @example
     * // Create many Contains
     * const contains = await prisma.contains.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContainsCreateManyArgs>(args?: SelectSubset<T, ContainsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Contains and returns the data saved in the database.
     * @param {ContainsCreateManyAndReturnArgs} args - Arguments to create many Contains.
     * @example
     * // Create many Contains
     * const contains = await prisma.contains.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Contains and only return the `id`
     * const containsWithIdOnly = await prisma.contains.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContainsCreateManyAndReturnArgs>(args?: SelectSubset<T, ContainsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContainsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Contains.
     * @param {ContainsDeleteArgs} args - Arguments to delete one Contains.
     * @example
     * // Delete one Contains
     * const Contains = await prisma.contains.delete({
     *   where: {
     *     // ... filter to delete one Contains
     *   }
     * })
     * 
     */
    delete<T extends ContainsDeleteArgs>(args: SelectSubset<T, ContainsDeleteArgs<ExtArgs>>): Prisma__ContainsClient<$Result.GetResult<Prisma.$ContainsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Contains.
     * @param {ContainsUpdateArgs} args - Arguments to update one Contains.
     * @example
     * // Update one Contains
     * const contains = await prisma.contains.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContainsUpdateArgs>(args: SelectSubset<T, ContainsUpdateArgs<ExtArgs>>): Prisma__ContainsClient<$Result.GetResult<Prisma.$ContainsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Contains.
     * @param {ContainsDeleteManyArgs} args - Arguments to filter Contains to delete.
     * @example
     * // Delete a few Contains
     * const { count } = await prisma.contains.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContainsDeleteManyArgs>(args?: SelectSubset<T, ContainsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contains.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContainsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contains
     * const contains = await prisma.contains.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContainsUpdateManyArgs>(args: SelectSubset<T, ContainsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Contains.
     * @param {ContainsUpsertArgs} args - Arguments to update or create a Contains.
     * @example
     * // Update or create a Contains
     * const contains = await prisma.contains.upsert({
     *   create: {
     *     // ... data to create a Contains
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contains we want to update
     *   }
     * })
     */
    upsert<T extends ContainsUpsertArgs>(args: SelectSubset<T, ContainsUpsertArgs<ExtArgs>>): Prisma__ContainsClient<$Result.GetResult<Prisma.$ContainsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Contains.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContainsCountArgs} args - Arguments to filter Contains to count.
     * @example
     * // Count the number of Contains
     * const count = await prisma.contains.count({
     *   where: {
     *     // ... the filter for the Contains we want to count
     *   }
     * })
    **/
    count<T extends ContainsCountArgs>(
      args?: Subset<T, ContainsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContainsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contains.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContainsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContainsAggregateArgs>(args: Subset<T, ContainsAggregateArgs>): Prisma.PrismaPromise<GetContainsAggregateType<T>>

    /**
     * Group by Contains.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContainsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContainsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContainsGroupByArgs['orderBy'] }
        : { orderBy?: ContainsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContainsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContainsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Contains model
   */
  readonly fields: ContainsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contains.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContainsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    document<T extends DocumentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DocumentDefaultArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    printOrder<T extends PrintOrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PrintOrderDefaultArgs<ExtArgs>>): Prisma__PrintOrderClient<$Result.GetResult<Prisma.$PrintOrderPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Contains model
   */ 
  interface ContainsFieldRefs {
    readonly id: FieldRef<"Contains", 'Int'>
    readonly documentId: FieldRef<"Contains", 'Int'>
    readonly printOrderId: FieldRef<"Contains", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Contains findUnique
   */
  export type ContainsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contains
     */
    select?: ContainsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainsInclude<ExtArgs> | null
    /**
     * Filter, which Contains to fetch.
     */
    where: ContainsWhereUniqueInput
  }

  /**
   * Contains findUniqueOrThrow
   */
  export type ContainsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contains
     */
    select?: ContainsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainsInclude<ExtArgs> | null
    /**
     * Filter, which Contains to fetch.
     */
    where: ContainsWhereUniqueInput
  }

  /**
   * Contains findFirst
   */
  export type ContainsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contains
     */
    select?: ContainsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainsInclude<ExtArgs> | null
    /**
     * Filter, which Contains to fetch.
     */
    where?: ContainsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contains to fetch.
     */
    orderBy?: ContainsOrderByWithRelationInput | ContainsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contains.
     */
    cursor?: ContainsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contains.
     */
    distinct?: ContainsScalarFieldEnum | ContainsScalarFieldEnum[]
  }

  /**
   * Contains findFirstOrThrow
   */
  export type ContainsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contains
     */
    select?: ContainsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainsInclude<ExtArgs> | null
    /**
     * Filter, which Contains to fetch.
     */
    where?: ContainsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contains to fetch.
     */
    orderBy?: ContainsOrderByWithRelationInput | ContainsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contains.
     */
    cursor?: ContainsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contains.
     */
    distinct?: ContainsScalarFieldEnum | ContainsScalarFieldEnum[]
  }

  /**
   * Contains findMany
   */
  export type ContainsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contains
     */
    select?: ContainsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainsInclude<ExtArgs> | null
    /**
     * Filter, which Contains to fetch.
     */
    where?: ContainsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contains to fetch.
     */
    orderBy?: ContainsOrderByWithRelationInput | ContainsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contains.
     */
    cursor?: ContainsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contains.
     */
    skip?: number
    distinct?: ContainsScalarFieldEnum | ContainsScalarFieldEnum[]
  }

  /**
   * Contains create
   */
  export type ContainsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contains
     */
    select?: ContainsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainsInclude<ExtArgs> | null
    /**
     * The data needed to create a Contains.
     */
    data: XOR<ContainsCreateInput, ContainsUncheckedCreateInput>
  }

  /**
   * Contains createMany
   */
  export type ContainsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contains.
     */
    data: ContainsCreateManyInput | ContainsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Contains createManyAndReturn
   */
  export type ContainsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contains
     */
    select?: ContainsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Contains.
     */
    data: ContainsCreateManyInput | ContainsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Contains update
   */
  export type ContainsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contains
     */
    select?: ContainsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainsInclude<ExtArgs> | null
    /**
     * The data needed to update a Contains.
     */
    data: XOR<ContainsUpdateInput, ContainsUncheckedUpdateInput>
    /**
     * Choose, which Contains to update.
     */
    where: ContainsWhereUniqueInput
  }

  /**
   * Contains updateMany
   */
  export type ContainsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contains.
     */
    data: XOR<ContainsUpdateManyMutationInput, ContainsUncheckedUpdateManyInput>
    /**
     * Filter which Contains to update
     */
    where?: ContainsWhereInput
  }

  /**
   * Contains upsert
   */
  export type ContainsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contains
     */
    select?: ContainsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainsInclude<ExtArgs> | null
    /**
     * The filter to search for the Contains to update in case it exists.
     */
    where: ContainsWhereUniqueInput
    /**
     * In case the Contains found by the `where` argument doesn't exist, create a new Contains with this data.
     */
    create: XOR<ContainsCreateInput, ContainsUncheckedCreateInput>
    /**
     * In case the Contains was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContainsUpdateInput, ContainsUncheckedUpdateInput>
  }

  /**
   * Contains delete
   */
  export type ContainsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contains
     */
    select?: ContainsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainsInclude<ExtArgs> | null
    /**
     * Filter which Contains to delete.
     */
    where: ContainsWhereUniqueInput
  }

  /**
   * Contains deleteMany
   */
  export type ContainsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contains to delete
     */
    where?: ContainsWhereInput
  }

  /**
   * Contains without action
   */
  export type ContainsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contains
     */
    select?: ContainsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainsInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AdminScalarFieldEnum: {
    adminEmail: 'adminEmail',
    password: 'password'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const UserScalarFieldEnum: {
    userId: 'userId',
    fname: 'fname',
    lname: 'lname',
    email: 'email',
    phone: 'phone',
    usageHistory: 'usageHistory',
    hash: 'hash',
    hashedRt: 'hashedRt',
    role: 'role',
    adminEmail: 'adminEmail',
    createAt: 'createAt',
    updateAt: 'updateAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SPSOMemberScalarFieldEnum: {
    sosoMemberId: 'sosoMemberId',
    dob: 'dob',
    address: 'address',
    userId: 'userId'
  };

  export type SPSOMemberScalarFieldEnum = (typeof SPSOMemberScalarFieldEnum)[keyof typeof SPSOMemberScalarFieldEnum]


  export const CustomerScalarFieldEnum: {
    customerId: 'customerId',
    ppHistory: 'ppHistory',
    accBalance: 'accBalance',
    summary: 'summary',
    remainPages: 'remainPages',
    userId: 'userId',
    spsoMemberId: 'spsoMemberId'
  };

  export type CustomerScalarFieldEnum = (typeof CustomerScalarFieldEnum)[keyof typeof CustomerScalarFieldEnum]


  export const FeedbackScalarFieldEnum: {
    feedbackId: 'feedbackId',
    customerId: 'customerId',
    feedTime: 'feedTime',
    rating: 'rating',
    contentByCustomer: 'contentByCustomer'
  };

  export type FeedbackScalarFieldEnum = (typeof FeedbackScalarFieldEnum)[keyof typeof FeedbackScalarFieldEnum]


  export const PrinterScalarFieldEnum: {
    printerId: 'printerId',
    model: 'model',
    brand: 'brand',
    description: 'description',
    facility: 'facility',
    building: 'building',
    room: 'room',
    spsomemberId: 'spsomemberId'
  };

  export type PrinterScalarFieldEnum = (typeof PrinterScalarFieldEnum)[keyof typeof PrinterScalarFieldEnum]


  export const PagePurchaseOrderScalarFieldEnum: {
    ppoId: 'ppoId',
    purchaseTime: 'purchaseTime',
    customerId: 'customerId',
    ppoStatus: 'ppoStatus',
    pageNum: 'pageNum',
    price: 'price',
    paymentMethod: 'paymentMethod'
  };

  export type PagePurchaseOrderScalarFieldEnum = (typeof PagePurchaseOrderScalarFieldEnum)[keyof typeof PagePurchaseOrderScalarFieldEnum]


  export const PrintOrderScalarFieldEnum: {
    printOrderId: 'printOrderId',
    attributes: 'attributes',
    startTime: 'startTime',
    endTime: 'endTime',
    poStatus: 'poStatus',
    numCopies: 'numCopies',
    customerId: 'customerId'
  };

  export type PrintOrderScalarFieldEnum = (typeof PrintOrderScalarFieldEnum)[keyof typeof PrintOrderScalarFieldEnum]


  export const DocumentScalarFieldEnum: {
    documentId: 'documentId',
    docName: 'docName',
    customerId: 'customerId',
    printerId: 'printerId',
    docQuantity: 'docQuantity'
  };

  export type DocumentScalarFieldEnum = (typeof DocumentScalarFieldEnum)[keyof typeof DocumentScalarFieldEnum]


  export const ContainsScalarFieldEnum: {
    id: 'id',
    documentId: 'documentId',
    printOrderId: 'printOrderId'
  };

  export type ContainsScalarFieldEnum = (typeof ContainsScalarFieldEnum)[keyof typeof ContainsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type AdminWhereInput = {
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    adminEmail?: StringFilter<"Admin"> | string
    password?: StringFilter<"Admin"> | string
    User?: UserListRelationFilter
  }

  export type AdminOrderByWithRelationInput = {
    adminEmail?: SortOrder
    password?: SortOrder
    User?: UserOrderByRelationAggregateInput
  }

  export type AdminWhereUniqueInput = Prisma.AtLeast<{
    adminEmail?: string
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    password?: StringFilter<"Admin"> | string
    User?: UserListRelationFilter
  }, "adminEmail" | "adminEmail">

  export type AdminOrderByWithAggregationInput = {
    adminEmail?: SortOrder
    password?: SortOrder
    _count?: AdminCountOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    OR?: AdminScalarWhereWithAggregatesInput[]
    NOT?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    adminEmail?: StringWithAggregatesFilter<"Admin"> | string
    password?: StringWithAggregatesFilter<"Admin"> | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    userId?: IntFilter<"User"> | number
    fname?: StringFilter<"User"> | string
    lname?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    phone?: StringFilter<"User"> | string
    usageHistory?: StringNullableFilter<"User"> | string | null
    hash?: StringFilter<"User"> | string
    hashedRt?: StringNullableFilter<"User"> | string | null
    role?: StringFilter<"User"> | string
    adminEmail?: StringFilter<"User"> | string
    createAt?: DateTimeFilter<"User"> | Date | string
    updateAt?: DateTimeFilter<"User"> | Date | string
    admin?: XOR<AdminRelationFilter, AdminWhereInput>
    spsomembers?: SPSOMemberListRelationFilter
    customers?: CustomerListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    userId?: SortOrder
    fname?: SortOrder
    lname?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    usageHistory?: SortOrderInput | SortOrder
    hash?: SortOrder
    hashedRt?: SortOrderInput | SortOrder
    role?: SortOrder
    adminEmail?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    admin?: AdminOrderByWithRelationInput
    spsomembers?: SPSOMemberOrderByRelationAggregateInput
    customers?: CustomerOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    userId?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    fname?: StringFilter<"User"> | string
    lname?: StringFilter<"User"> | string
    phone?: StringFilter<"User"> | string
    usageHistory?: StringNullableFilter<"User"> | string | null
    hash?: StringFilter<"User"> | string
    hashedRt?: StringNullableFilter<"User"> | string | null
    role?: StringFilter<"User"> | string
    adminEmail?: StringFilter<"User"> | string
    createAt?: DateTimeFilter<"User"> | Date | string
    updateAt?: DateTimeFilter<"User"> | Date | string
    admin?: XOR<AdminRelationFilter, AdminWhereInput>
    spsomembers?: SPSOMemberListRelationFilter
    customers?: CustomerListRelationFilter
  }, "userId" | "email">

  export type UserOrderByWithAggregationInput = {
    userId?: SortOrder
    fname?: SortOrder
    lname?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    usageHistory?: SortOrderInput | SortOrder
    hash?: SortOrder
    hashedRt?: SortOrderInput | SortOrder
    role?: SortOrder
    adminEmail?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    userId?: IntWithAggregatesFilter<"User"> | number
    fname?: StringWithAggregatesFilter<"User"> | string
    lname?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    phone?: StringWithAggregatesFilter<"User"> | string
    usageHistory?: StringNullableWithAggregatesFilter<"User"> | string | null
    hash?: StringWithAggregatesFilter<"User"> | string
    hashedRt?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: StringWithAggregatesFilter<"User"> | string
    adminEmail?: StringWithAggregatesFilter<"User"> | string
    createAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type SPSOMemberWhereInput = {
    AND?: SPSOMemberWhereInput | SPSOMemberWhereInput[]
    OR?: SPSOMemberWhereInput[]
    NOT?: SPSOMemberWhereInput | SPSOMemberWhereInput[]
    sosoMemberId?: IntFilter<"SPSOMember"> | number
    dob?: DateTimeFilter<"SPSOMember"> | Date | string
    address?: StringFilter<"SPSOMember"> | string
    userId?: IntFilter<"SPSOMember"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    printers?: PrinterListRelationFilter
    customers?: CustomerListRelationFilter
  }

  export type SPSOMemberOrderByWithRelationInput = {
    sosoMemberId?: SortOrder
    dob?: SortOrder
    address?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    printers?: PrinterOrderByRelationAggregateInput
    customers?: CustomerOrderByRelationAggregateInput
  }

  export type SPSOMemberWhereUniqueInput = Prisma.AtLeast<{
    sosoMemberId?: number
    AND?: SPSOMemberWhereInput | SPSOMemberWhereInput[]
    OR?: SPSOMemberWhereInput[]
    NOT?: SPSOMemberWhereInput | SPSOMemberWhereInput[]
    dob?: DateTimeFilter<"SPSOMember"> | Date | string
    address?: StringFilter<"SPSOMember"> | string
    userId?: IntFilter<"SPSOMember"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    printers?: PrinterListRelationFilter
    customers?: CustomerListRelationFilter
  }, "sosoMemberId">

  export type SPSOMemberOrderByWithAggregationInput = {
    sosoMemberId?: SortOrder
    dob?: SortOrder
    address?: SortOrder
    userId?: SortOrder
    _count?: SPSOMemberCountOrderByAggregateInput
    _avg?: SPSOMemberAvgOrderByAggregateInput
    _max?: SPSOMemberMaxOrderByAggregateInput
    _min?: SPSOMemberMinOrderByAggregateInput
    _sum?: SPSOMemberSumOrderByAggregateInput
  }

  export type SPSOMemberScalarWhereWithAggregatesInput = {
    AND?: SPSOMemberScalarWhereWithAggregatesInput | SPSOMemberScalarWhereWithAggregatesInput[]
    OR?: SPSOMemberScalarWhereWithAggregatesInput[]
    NOT?: SPSOMemberScalarWhereWithAggregatesInput | SPSOMemberScalarWhereWithAggregatesInput[]
    sosoMemberId?: IntWithAggregatesFilter<"SPSOMember"> | number
    dob?: DateTimeWithAggregatesFilter<"SPSOMember"> | Date | string
    address?: StringWithAggregatesFilter<"SPSOMember"> | string
    userId?: IntWithAggregatesFilter<"SPSOMember"> | number
  }

  export type CustomerWhereInput = {
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    customerId?: IntFilter<"Customer"> | number
    ppHistory?: StringNullableFilter<"Customer"> | string | null
    accBalance?: FloatFilter<"Customer"> | number
    summary?: StringNullableFilter<"Customer"> | string | null
    remainPages?: IntFilter<"Customer"> | number
    userId?: IntFilter<"Customer"> | number
    spsoMemberId?: IntNullableFilter<"Customer"> | number | null
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    spsomember?: XOR<SPSOMemberNullableRelationFilter, SPSOMemberWhereInput> | null
    feedbacks?: FeedbackListRelationFilter
    pagePurchaseOrders?: PagePurchaseOrderListRelationFilter
    printOrders?: PrintOrderListRelationFilter
    documents?: DocumentListRelationFilter
  }

  export type CustomerOrderByWithRelationInput = {
    customerId?: SortOrder
    ppHistory?: SortOrderInput | SortOrder
    accBalance?: SortOrder
    summary?: SortOrderInput | SortOrder
    remainPages?: SortOrder
    userId?: SortOrder
    spsoMemberId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    spsomember?: SPSOMemberOrderByWithRelationInput
    feedbacks?: FeedbackOrderByRelationAggregateInput
    pagePurchaseOrders?: PagePurchaseOrderOrderByRelationAggregateInput
    printOrders?: PrintOrderOrderByRelationAggregateInput
    documents?: DocumentOrderByRelationAggregateInput
  }

  export type CustomerWhereUniqueInput = Prisma.AtLeast<{
    customerId?: number
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    ppHistory?: StringNullableFilter<"Customer"> | string | null
    accBalance?: FloatFilter<"Customer"> | number
    summary?: StringNullableFilter<"Customer"> | string | null
    remainPages?: IntFilter<"Customer"> | number
    userId?: IntFilter<"Customer"> | number
    spsoMemberId?: IntNullableFilter<"Customer"> | number | null
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    spsomember?: XOR<SPSOMemberNullableRelationFilter, SPSOMemberWhereInput> | null
    feedbacks?: FeedbackListRelationFilter
    pagePurchaseOrders?: PagePurchaseOrderListRelationFilter
    printOrders?: PrintOrderListRelationFilter
    documents?: DocumentListRelationFilter
  }, "customerId">

  export type CustomerOrderByWithAggregationInput = {
    customerId?: SortOrder
    ppHistory?: SortOrderInput | SortOrder
    accBalance?: SortOrder
    summary?: SortOrderInput | SortOrder
    remainPages?: SortOrder
    userId?: SortOrder
    spsoMemberId?: SortOrderInput | SortOrder
    _count?: CustomerCountOrderByAggregateInput
    _avg?: CustomerAvgOrderByAggregateInput
    _max?: CustomerMaxOrderByAggregateInput
    _min?: CustomerMinOrderByAggregateInput
    _sum?: CustomerSumOrderByAggregateInput
  }

  export type CustomerScalarWhereWithAggregatesInput = {
    AND?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    OR?: CustomerScalarWhereWithAggregatesInput[]
    NOT?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    customerId?: IntWithAggregatesFilter<"Customer"> | number
    ppHistory?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    accBalance?: FloatWithAggregatesFilter<"Customer"> | number
    summary?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    remainPages?: IntWithAggregatesFilter<"Customer"> | number
    userId?: IntWithAggregatesFilter<"Customer"> | number
    spsoMemberId?: IntNullableWithAggregatesFilter<"Customer"> | number | null
  }

  export type FeedbackWhereInput = {
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    feedbackId?: IntFilter<"Feedback"> | number
    customerId?: IntFilter<"Feedback"> | number
    feedTime?: DateTimeFilter<"Feedback"> | Date | string
    rating?: IntFilter<"Feedback"> | number
    contentByCustomer?: StringFilter<"Feedback"> | string
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
  }

  export type FeedbackOrderByWithRelationInput = {
    feedbackId?: SortOrder
    customerId?: SortOrder
    feedTime?: SortOrder
    rating?: SortOrder
    contentByCustomer?: SortOrder
    customer?: CustomerOrderByWithRelationInput
  }

  export type FeedbackWhereUniqueInput = Prisma.AtLeast<{
    feedbackId?: number
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    customerId?: IntFilter<"Feedback"> | number
    feedTime?: DateTimeFilter<"Feedback"> | Date | string
    rating?: IntFilter<"Feedback"> | number
    contentByCustomer?: StringFilter<"Feedback"> | string
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
  }, "feedbackId">

  export type FeedbackOrderByWithAggregationInput = {
    feedbackId?: SortOrder
    customerId?: SortOrder
    feedTime?: SortOrder
    rating?: SortOrder
    contentByCustomer?: SortOrder
    _count?: FeedbackCountOrderByAggregateInput
    _avg?: FeedbackAvgOrderByAggregateInput
    _max?: FeedbackMaxOrderByAggregateInput
    _min?: FeedbackMinOrderByAggregateInput
    _sum?: FeedbackSumOrderByAggregateInput
  }

  export type FeedbackScalarWhereWithAggregatesInput = {
    AND?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    OR?: FeedbackScalarWhereWithAggregatesInput[]
    NOT?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    feedbackId?: IntWithAggregatesFilter<"Feedback"> | number
    customerId?: IntWithAggregatesFilter<"Feedback"> | number
    feedTime?: DateTimeWithAggregatesFilter<"Feedback"> | Date | string
    rating?: IntWithAggregatesFilter<"Feedback"> | number
    contentByCustomer?: StringWithAggregatesFilter<"Feedback"> | string
  }

  export type PrinterWhereInput = {
    AND?: PrinterWhereInput | PrinterWhereInput[]
    OR?: PrinterWhereInput[]
    NOT?: PrinterWhereInput | PrinterWhereInput[]
    printerId?: IntFilter<"Printer"> | number
    model?: StringFilter<"Printer"> | string
    brand?: StringFilter<"Printer"> | string
    description?: StringNullableFilter<"Printer"> | string | null
    facility?: StringFilter<"Printer"> | string
    building?: StringFilter<"Printer"> | string
    room?: StringFilter<"Printer"> | string
    spsomemberId?: IntFilter<"Printer"> | number
    spsomember?: XOR<SPSOMemberRelationFilter, SPSOMemberWhereInput>
    documents?: DocumentListRelationFilter
  }

  export type PrinterOrderByWithRelationInput = {
    printerId?: SortOrder
    model?: SortOrder
    brand?: SortOrder
    description?: SortOrderInput | SortOrder
    facility?: SortOrder
    building?: SortOrder
    room?: SortOrder
    spsomemberId?: SortOrder
    spsomember?: SPSOMemberOrderByWithRelationInput
    documents?: DocumentOrderByRelationAggregateInput
  }

  export type PrinterWhereUniqueInput = Prisma.AtLeast<{
    printerId?: number
    AND?: PrinterWhereInput | PrinterWhereInput[]
    OR?: PrinterWhereInput[]
    NOT?: PrinterWhereInput | PrinterWhereInput[]
    model?: StringFilter<"Printer"> | string
    brand?: StringFilter<"Printer"> | string
    description?: StringNullableFilter<"Printer"> | string | null
    facility?: StringFilter<"Printer"> | string
    building?: StringFilter<"Printer"> | string
    room?: StringFilter<"Printer"> | string
    spsomemberId?: IntFilter<"Printer"> | number
    spsomember?: XOR<SPSOMemberRelationFilter, SPSOMemberWhereInput>
    documents?: DocumentListRelationFilter
  }, "printerId">

  export type PrinterOrderByWithAggregationInput = {
    printerId?: SortOrder
    model?: SortOrder
    brand?: SortOrder
    description?: SortOrderInput | SortOrder
    facility?: SortOrder
    building?: SortOrder
    room?: SortOrder
    spsomemberId?: SortOrder
    _count?: PrinterCountOrderByAggregateInput
    _avg?: PrinterAvgOrderByAggregateInput
    _max?: PrinterMaxOrderByAggregateInput
    _min?: PrinterMinOrderByAggregateInput
    _sum?: PrinterSumOrderByAggregateInput
  }

  export type PrinterScalarWhereWithAggregatesInput = {
    AND?: PrinterScalarWhereWithAggregatesInput | PrinterScalarWhereWithAggregatesInput[]
    OR?: PrinterScalarWhereWithAggregatesInput[]
    NOT?: PrinterScalarWhereWithAggregatesInput | PrinterScalarWhereWithAggregatesInput[]
    printerId?: IntWithAggregatesFilter<"Printer"> | number
    model?: StringWithAggregatesFilter<"Printer"> | string
    brand?: StringWithAggregatesFilter<"Printer"> | string
    description?: StringNullableWithAggregatesFilter<"Printer"> | string | null
    facility?: StringWithAggregatesFilter<"Printer"> | string
    building?: StringWithAggregatesFilter<"Printer"> | string
    room?: StringWithAggregatesFilter<"Printer"> | string
    spsomemberId?: IntWithAggregatesFilter<"Printer"> | number
  }

  export type PagePurchaseOrderWhereInput = {
    AND?: PagePurchaseOrderWhereInput | PagePurchaseOrderWhereInput[]
    OR?: PagePurchaseOrderWhereInput[]
    NOT?: PagePurchaseOrderWhereInput | PagePurchaseOrderWhereInput[]
    ppoId?: IntFilter<"PagePurchaseOrder"> | number
    purchaseTime?: DateTimeFilter<"PagePurchaseOrder"> | Date | string
    customerId?: IntFilter<"PagePurchaseOrder"> | number
    ppoStatus?: StringFilter<"PagePurchaseOrder"> | string
    pageNum?: IntFilter<"PagePurchaseOrder"> | number
    price?: FloatFilter<"PagePurchaseOrder"> | number
    paymentMethod?: StringFilter<"PagePurchaseOrder"> | string
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
  }

  export type PagePurchaseOrderOrderByWithRelationInput = {
    ppoId?: SortOrder
    purchaseTime?: SortOrder
    customerId?: SortOrder
    ppoStatus?: SortOrder
    pageNum?: SortOrder
    price?: SortOrder
    paymentMethod?: SortOrder
    customer?: CustomerOrderByWithRelationInput
  }

  export type PagePurchaseOrderWhereUniqueInput = Prisma.AtLeast<{
    ppoId?: number
    AND?: PagePurchaseOrderWhereInput | PagePurchaseOrderWhereInput[]
    OR?: PagePurchaseOrderWhereInput[]
    NOT?: PagePurchaseOrderWhereInput | PagePurchaseOrderWhereInput[]
    purchaseTime?: DateTimeFilter<"PagePurchaseOrder"> | Date | string
    customerId?: IntFilter<"PagePurchaseOrder"> | number
    ppoStatus?: StringFilter<"PagePurchaseOrder"> | string
    pageNum?: IntFilter<"PagePurchaseOrder"> | number
    price?: FloatFilter<"PagePurchaseOrder"> | number
    paymentMethod?: StringFilter<"PagePurchaseOrder"> | string
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
  }, "ppoId">

  export type PagePurchaseOrderOrderByWithAggregationInput = {
    ppoId?: SortOrder
    purchaseTime?: SortOrder
    customerId?: SortOrder
    ppoStatus?: SortOrder
    pageNum?: SortOrder
    price?: SortOrder
    paymentMethod?: SortOrder
    _count?: PagePurchaseOrderCountOrderByAggregateInput
    _avg?: PagePurchaseOrderAvgOrderByAggregateInput
    _max?: PagePurchaseOrderMaxOrderByAggregateInput
    _min?: PagePurchaseOrderMinOrderByAggregateInput
    _sum?: PagePurchaseOrderSumOrderByAggregateInput
  }

  export type PagePurchaseOrderScalarWhereWithAggregatesInput = {
    AND?: PagePurchaseOrderScalarWhereWithAggregatesInput | PagePurchaseOrderScalarWhereWithAggregatesInput[]
    OR?: PagePurchaseOrderScalarWhereWithAggregatesInput[]
    NOT?: PagePurchaseOrderScalarWhereWithAggregatesInput | PagePurchaseOrderScalarWhereWithAggregatesInput[]
    ppoId?: IntWithAggregatesFilter<"PagePurchaseOrder"> | number
    purchaseTime?: DateTimeWithAggregatesFilter<"PagePurchaseOrder"> | Date | string
    customerId?: IntWithAggregatesFilter<"PagePurchaseOrder"> | number
    ppoStatus?: StringWithAggregatesFilter<"PagePurchaseOrder"> | string
    pageNum?: IntWithAggregatesFilter<"PagePurchaseOrder"> | number
    price?: FloatWithAggregatesFilter<"PagePurchaseOrder"> | number
    paymentMethod?: StringWithAggregatesFilter<"PagePurchaseOrder"> | string
  }

  export type PrintOrderWhereInput = {
    AND?: PrintOrderWhereInput | PrintOrderWhereInput[]
    OR?: PrintOrderWhereInput[]
    NOT?: PrintOrderWhereInput | PrintOrderWhereInput[]
    printOrderId?: IntFilter<"PrintOrder"> | number
    attributes?: StringFilter<"PrintOrder"> | string
    startTime?: DateTimeFilter<"PrintOrder"> | Date | string
    endTime?: DateTimeFilter<"PrintOrder"> | Date | string
    poStatus?: StringFilter<"PrintOrder"> | string
    numCopies?: IntFilter<"PrintOrder"> | number
    customerId?: IntFilter<"PrintOrder"> | number
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
    contains?: ContainsListRelationFilter
  }

  export type PrintOrderOrderByWithRelationInput = {
    printOrderId?: SortOrder
    attributes?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    poStatus?: SortOrder
    numCopies?: SortOrder
    customerId?: SortOrder
    customer?: CustomerOrderByWithRelationInput
    contains?: ContainsOrderByRelationAggregateInput
  }

  export type PrintOrderWhereUniqueInput = Prisma.AtLeast<{
    printOrderId?: number
    AND?: PrintOrderWhereInput | PrintOrderWhereInput[]
    OR?: PrintOrderWhereInput[]
    NOT?: PrintOrderWhereInput | PrintOrderWhereInput[]
    attributes?: StringFilter<"PrintOrder"> | string
    startTime?: DateTimeFilter<"PrintOrder"> | Date | string
    endTime?: DateTimeFilter<"PrintOrder"> | Date | string
    poStatus?: StringFilter<"PrintOrder"> | string
    numCopies?: IntFilter<"PrintOrder"> | number
    customerId?: IntFilter<"PrintOrder"> | number
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
    contains?: ContainsListRelationFilter
  }, "printOrderId">

  export type PrintOrderOrderByWithAggregationInput = {
    printOrderId?: SortOrder
    attributes?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    poStatus?: SortOrder
    numCopies?: SortOrder
    customerId?: SortOrder
    _count?: PrintOrderCountOrderByAggregateInput
    _avg?: PrintOrderAvgOrderByAggregateInput
    _max?: PrintOrderMaxOrderByAggregateInput
    _min?: PrintOrderMinOrderByAggregateInput
    _sum?: PrintOrderSumOrderByAggregateInput
  }

  export type PrintOrderScalarWhereWithAggregatesInput = {
    AND?: PrintOrderScalarWhereWithAggregatesInput | PrintOrderScalarWhereWithAggregatesInput[]
    OR?: PrintOrderScalarWhereWithAggregatesInput[]
    NOT?: PrintOrderScalarWhereWithAggregatesInput | PrintOrderScalarWhereWithAggregatesInput[]
    printOrderId?: IntWithAggregatesFilter<"PrintOrder"> | number
    attributes?: StringWithAggregatesFilter<"PrintOrder"> | string
    startTime?: DateTimeWithAggregatesFilter<"PrintOrder"> | Date | string
    endTime?: DateTimeWithAggregatesFilter<"PrintOrder"> | Date | string
    poStatus?: StringWithAggregatesFilter<"PrintOrder"> | string
    numCopies?: IntWithAggregatesFilter<"PrintOrder"> | number
    customerId?: IntWithAggregatesFilter<"PrintOrder"> | number
  }

  export type DocumentWhereInput = {
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    documentId?: IntFilter<"Document"> | number
    docName?: StringFilter<"Document"> | string
    customerId?: IntFilter<"Document"> | number
    printerId?: IntFilter<"Document"> | number
    docQuantity?: IntFilter<"Document"> | number
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
    printer?: XOR<PrinterRelationFilter, PrinterWhereInput>
    contains?: ContainsListRelationFilter
  }

  export type DocumentOrderByWithRelationInput = {
    documentId?: SortOrder
    docName?: SortOrder
    customerId?: SortOrder
    printerId?: SortOrder
    docQuantity?: SortOrder
    customer?: CustomerOrderByWithRelationInput
    printer?: PrinterOrderByWithRelationInput
    contains?: ContainsOrderByRelationAggregateInput
  }

  export type DocumentWhereUniqueInput = Prisma.AtLeast<{
    documentId?: number
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    docName?: StringFilter<"Document"> | string
    customerId?: IntFilter<"Document"> | number
    printerId?: IntFilter<"Document"> | number
    docQuantity?: IntFilter<"Document"> | number
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
    printer?: XOR<PrinterRelationFilter, PrinterWhereInput>
    contains?: ContainsListRelationFilter
  }, "documentId">

  export type DocumentOrderByWithAggregationInput = {
    documentId?: SortOrder
    docName?: SortOrder
    customerId?: SortOrder
    printerId?: SortOrder
    docQuantity?: SortOrder
    _count?: DocumentCountOrderByAggregateInput
    _avg?: DocumentAvgOrderByAggregateInput
    _max?: DocumentMaxOrderByAggregateInput
    _min?: DocumentMinOrderByAggregateInput
    _sum?: DocumentSumOrderByAggregateInput
  }

  export type DocumentScalarWhereWithAggregatesInput = {
    AND?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    OR?: DocumentScalarWhereWithAggregatesInput[]
    NOT?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    documentId?: IntWithAggregatesFilter<"Document"> | number
    docName?: StringWithAggregatesFilter<"Document"> | string
    customerId?: IntWithAggregatesFilter<"Document"> | number
    printerId?: IntWithAggregatesFilter<"Document"> | number
    docQuantity?: IntWithAggregatesFilter<"Document"> | number
  }

  export type ContainsWhereInput = {
    AND?: ContainsWhereInput | ContainsWhereInput[]
    OR?: ContainsWhereInput[]
    NOT?: ContainsWhereInput | ContainsWhereInput[]
    id?: IntFilter<"Contains"> | number
    documentId?: IntFilter<"Contains"> | number
    printOrderId?: IntFilter<"Contains"> | number
    document?: XOR<DocumentRelationFilter, DocumentWhereInput>
    printOrder?: XOR<PrintOrderRelationFilter, PrintOrderWhereInput>
  }

  export type ContainsOrderByWithRelationInput = {
    id?: SortOrder
    documentId?: SortOrder
    printOrderId?: SortOrder
    document?: DocumentOrderByWithRelationInput
    printOrder?: PrintOrderOrderByWithRelationInput
  }

  export type ContainsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ContainsWhereInput | ContainsWhereInput[]
    OR?: ContainsWhereInput[]
    NOT?: ContainsWhereInput | ContainsWhereInput[]
    documentId?: IntFilter<"Contains"> | number
    printOrderId?: IntFilter<"Contains"> | number
    document?: XOR<DocumentRelationFilter, DocumentWhereInput>
    printOrder?: XOR<PrintOrderRelationFilter, PrintOrderWhereInput>
  }, "id">

  export type ContainsOrderByWithAggregationInput = {
    id?: SortOrder
    documentId?: SortOrder
    printOrderId?: SortOrder
    _count?: ContainsCountOrderByAggregateInput
    _avg?: ContainsAvgOrderByAggregateInput
    _max?: ContainsMaxOrderByAggregateInput
    _min?: ContainsMinOrderByAggregateInput
    _sum?: ContainsSumOrderByAggregateInput
  }

  export type ContainsScalarWhereWithAggregatesInput = {
    AND?: ContainsScalarWhereWithAggregatesInput | ContainsScalarWhereWithAggregatesInput[]
    OR?: ContainsScalarWhereWithAggregatesInput[]
    NOT?: ContainsScalarWhereWithAggregatesInput | ContainsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Contains"> | number
    documentId?: IntWithAggregatesFilter<"Contains"> | number
    printOrderId?: IntWithAggregatesFilter<"Contains"> | number
  }

  export type AdminCreateInput = {
    adminEmail: string
    password: string
    User?: UserCreateNestedManyWithoutAdminInput
  }

  export type AdminUncheckedCreateInput = {
    adminEmail: string
    password: string
    User?: UserUncheckedCreateNestedManyWithoutAdminInput
  }

  export type AdminUpdateInput = {
    adminEmail?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateManyWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateInput = {
    adminEmail?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    User?: UserUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type AdminCreateManyInput = {
    adminEmail: string
    password: string
  }

  export type AdminUpdateManyMutationInput = {
    adminEmail?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type AdminUncheckedUpdateManyInput = {
    adminEmail?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateInput = {
    fname: string
    lname: string
    email: string
    phone: string
    usageHistory?: string | null
    hash: string
    hashedRt?: string | null
    role: string
    createAt?: Date | string
    updateAt?: Date | string
    admin: AdminCreateNestedOneWithoutUserInput
    spsomembers?: SPSOMemberCreateNestedManyWithoutUserInput
    customers?: CustomerCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    userId?: number
    fname: string
    lname: string
    email: string
    phone: string
    usageHistory?: string | null
    hash: string
    hashedRt?: string | null
    role: string
    adminEmail: string
    createAt?: Date | string
    updateAt?: Date | string
    spsomembers?: SPSOMemberUncheckedCreateNestedManyWithoutUserInput
    customers?: CustomerUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    fname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    usageHistory?: NullableStringFieldUpdateOperationsInput | string | null
    hash?: StringFieldUpdateOperationsInput | string
    hashedRt?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    admin?: AdminUpdateOneRequiredWithoutUserNestedInput
    spsomembers?: SPSOMemberUpdateManyWithoutUserNestedInput
    customers?: CustomerUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    fname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    usageHistory?: NullableStringFieldUpdateOperationsInput | string | null
    hash?: StringFieldUpdateOperationsInput | string
    hashedRt?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    adminEmail?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spsomembers?: SPSOMemberUncheckedUpdateManyWithoutUserNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    userId?: number
    fname: string
    lname: string
    email: string
    phone: string
    usageHistory?: string | null
    hash: string
    hashedRt?: string | null
    role: string
    adminEmail: string
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    fname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    usageHistory?: NullableStringFieldUpdateOperationsInput | string | null
    hash?: StringFieldUpdateOperationsInput | string
    hashedRt?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    fname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    usageHistory?: NullableStringFieldUpdateOperationsInput | string | null
    hash?: StringFieldUpdateOperationsInput | string
    hashedRt?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    adminEmail?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SPSOMemberCreateInput = {
    dob: Date | string
    address: string
    user: UserCreateNestedOneWithoutSpsomembersInput
    printers?: PrinterCreateNestedManyWithoutSpsomemberInput
    customers?: CustomerCreateNestedManyWithoutSpsomemberInput
  }

  export type SPSOMemberUncheckedCreateInput = {
    sosoMemberId?: number
    dob: Date | string
    address: string
    userId: number
    printers?: PrinterUncheckedCreateNestedManyWithoutSpsomemberInput
    customers?: CustomerUncheckedCreateNestedManyWithoutSpsomemberInput
  }

  export type SPSOMemberUpdateInput = {
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutSpsomembersNestedInput
    printers?: PrinterUpdateManyWithoutSpsomemberNestedInput
    customers?: CustomerUpdateManyWithoutSpsomemberNestedInput
  }

  export type SPSOMemberUncheckedUpdateInput = {
    sosoMemberId?: IntFieldUpdateOperationsInput | number
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    printers?: PrinterUncheckedUpdateManyWithoutSpsomemberNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutSpsomemberNestedInput
  }

  export type SPSOMemberCreateManyInput = {
    sosoMemberId?: number
    dob: Date | string
    address: string
    userId: number
  }

  export type SPSOMemberUpdateManyMutationInput = {
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
  }

  export type SPSOMemberUncheckedUpdateManyInput = {
    sosoMemberId?: IntFieldUpdateOperationsInput | number
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type CustomerCreateInput = {
    ppHistory?: string | null
    accBalance?: number
    summary?: string | null
    remainPages?: number
    user?: UserCreateNestedOneWithoutCustomersInput
    spsomember?: SPSOMemberCreateNestedOneWithoutCustomersInput
    feedbacks?: FeedbackCreateNestedManyWithoutCustomerInput
    pagePurchaseOrders?: PagePurchaseOrderCreateNestedManyWithoutCustomerInput
    printOrders?: PrintOrderCreateNestedManyWithoutCustomerInput
    documents?: DocumentCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateInput = {
    customerId?: number
    ppHistory?: string | null
    accBalance?: number
    summary?: string | null
    remainPages?: number
    userId: number
    spsoMemberId?: number | null
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutCustomerInput
    pagePurchaseOrders?: PagePurchaseOrderUncheckedCreateNestedManyWithoutCustomerInput
    printOrders?: PrintOrderUncheckedCreateNestedManyWithoutCustomerInput
    documents?: DocumentUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUpdateInput = {
    ppHistory?: NullableStringFieldUpdateOperationsInput | string | null
    accBalance?: FloatFieldUpdateOperationsInput | number
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    remainPages?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutCustomersNestedInput
    spsomember?: SPSOMemberUpdateOneWithoutCustomersNestedInput
    feedbacks?: FeedbackUpdateManyWithoutCustomerNestedInput
    pagePurchaseOrders?: PagePurchaseOrderUpdateManyWithoutCustomerNestedInput
    printOrders?: PrintOrderUpdateManyWithoutCustomerNestedInput
    documents?: DocumentUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateInput = {
    customerId?: IntFieldUpdateOperationsInput | number
    ppHistory?: NullableStringFieldUpdateOperationsInput | string | null
    accBalance?: FloatFieldUpdateOperationsInput | number
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    remainPages?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    spsoMemberId?: NullableIntFieldUpdateOperationsInput | number | null
    feedbacks?: FeedbackUncheckedUpdateManyWithoutCustomerNestedInput
    pagePurchaseOrders?: PagePurchaseOrderUncheckedUpdateManyWithoutCustomerNestedInput
    printOrders?: PrintOrderUncheckedUpdateManyWithoutCustomerNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerCreateManyInput = {
    customerId?: number
    ppHistory?: string | null
    accBalance?: number
    summary?: string | null
    remainPages?: number
    userId: number
    spsoMemberId?: number | null
  }

  export type CustomerUpdateManyMutationInput = {
    ppHistory?: NullableStringFieldUpdateOperationsInput | string | null
    accBalance?: FloatFieldUpdateOperationsInput | number
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    remainPages?: IntFieldUpdateOperationsInput | number
  }

  export type CustomerUncheckedUpdateManyInput = {
    customerId?: IntFieldUpdateOperationsInput | number
    ppHistory?: NullableStringFieldUpdateOperationsInput | string | null
    accBalance?: FloatFieldUpdateOperationsInput | number
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    remainPages?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    spsoMemberId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FeedbackCreateInput = {
    feedTime: Date | string
    rating: number
    contentByCustomer: string
    customer: CustomerCreateNestedOneWithoutFeedbacksInput
  }

  export type FeedbackUncheckedCreateInput = {
    feedbackId?: number
    customerId: number
    feedTime: Date | string
    rating: number
    contentByCustomer: string
  }

  export type FeedbackUpdateInput = {
    feedTime?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
    contentByCustomer?: StringFieldUpdateOperationsInput | string
    customer?: CustomerUpdateOneRequiredWithoutFeedbacksNestedInput
  }

  export type FeedbackUncheckedUpdateInput = {
    feedbackId?: IntFieldUpdateOperationsInput | number
    customerId?: IntFieldUpdateOperationsInput | number
    feedTime?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
    contentByCustomer?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackCreateManyInput = {
    feedbackId?: number
    customerId: number
    feedTime: Date | string
    rating: number
    contentByCustomer: string
  }

  export type FeedbackUpdateManyMutationInput = {
    feedTime?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
    contentByCustomer?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackUncheckedUpdateManyInput = {
    feedbackId?: IntFieldUpdateOperationsInput | number
    customerId?: IntFieldUpdateOperationsInput | number
    feedTime?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
    contentByCustomer?: StringFieldUpdateOperationsInput | string
  }

  export type PrinterCreateInput = {
    model: string
    brand: string
    description?: string | null
    facility: string
    building: string
    room: string
    spsomember: SPSOMemberCreateNestedOneWithoutPrintersInput
    documents?: DocumentCreateNestedManyWithoutPrinterInput
  }

  export type PrinterUncheckedCreateInput = {
    printerId?: number
    model: string
    brand: string
    description?: string | null
    facility: string
    building: string
    room: string
    spsomemberId: number
    documents?: DocumentUncheckedCreateNestedManyWithoutPrinterInput
  }

  export type PrinterUpdateInput = {
    model?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    facility?: StringFieldUpdateOperationsInput | string
    building?: StringFieldUpdateOperationsInput | string
    room?: StringFieldUpdateOperationsInput | string
    spsomember?: SPSOMemberUpdateOneRequiredWithoutPrintersNestedInput
    documents?: DocumentUpdateManyWithoutPrinterNestedInput
  }

  export type PrinterUncheckedUpdateInput = {
    printerId?: IntFieldUpdateOperationsInput | number
    model?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    facility?: StringFieldUpdateOperationsInput | string
    building?: StringFieldUpdateOperationsInput | string
    room?: StringFieldUpdateOperationsInput | string
    spsomemberId?: IntFieldUpdateOperationsInput | number
    documents?: DocumentUncheckedUpdateManyWithoutPrinterNestedInput
  }

  export type PrinterCreateManyInput = {
    printerId?: number
    model: string
    brand: string
    description?: string | null
    facility: string
    building: string
    room: string
    spsomemberId: number
  }

  export type PrinterUpdateManyMutationInput = {
    model?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    facility?: StringFieldUpdateOperationsInput | string
    building?: StringFieldUpdateOperationsInput | string
    room?: StringFieldUpdateOperationsInput | string
  }

  export type PrinterUncheckedUpdateManyInput = {
    printerId?: IntFieldUpdateOperationsInput | number
    model?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    facility?: StringFieldUpdateOperationsInput | string
    building?: StringFieldUpdateOperationsInput | string
    room?: StringFieldUpdateOperationsInput | string
    spsomemberId?: IntFieldUpdateOperationsInput | number
  }

  export type PagePurchaseOrderCreateInput = {
    purchaseTime: Date | string
    ppoStatus?: string
    pageNum?: number
    price: number
    paymentMethod: string
    customer: CustomerCreateNestedOneWithoutPagePurchaseOrdersInput
  }

  export type PagePurchaseOrderUncheckedCreateInput = {
    ppoId?: number
    purchaseTime: Date | string
    customerId: number
    ppoStatus?: string
    pageNum?: number
    price: number
    paymentMethod: string
  }

  export type PagePurchaseOrderUpdateInput = {
    purchaseTime?: DateTimeFieldUpdateOperationsInput | Date | string
    ppoStatus?: StringFieldUpdateOperationsInput | string
    pageNum?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
    customer?: CustomerUpdateOneRequiredWithoutPagePurchaseOrdersNestedInput
  }

  export type PagePurchaseOrderUncheckedUpdateInput = {
    ppoId?: IntFieldUpdateOperationsInput | number
    purchaseTime?: DateTimeFieldUpdateOperationsInput | Date | string
    customerId?: IntFieldUpdateOperationsInput | number
    ppoStatus?: StringFieldUpdateOperationsInput | string
    pageNum?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
  }

  export type PagePurchaseOrderCreateManyInput = {
    ppoId?: number
    purchaseTime: Date | string
    customerId: number
    ppoStatus?: string
    pageNum?: number
    price: number
    paymentMethod: string
  }

  export type PagePurchaseOrderUpdateManyMutationInput = {
    purchaseTime?: DateTimeFieldUpdateOperationsInput | Date | string
    ppoStatus?: StringFieldUpdateOperationsInput | string
    pageNum?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
  }

  export type PagePurchaseOrderUncheckedUpdateManyInput = {
    ppoId?: IntFieldUpdateOperationsInput | number
    purchaseTime?: DateTimeFieldUpdateOperationsInput | Date | string
    customerId?: IntFieldUpdateOperationsInput | number
    ppoStatus?: StringFieldUpdateOperationsInput | string
    pageNum?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
  }

  export type PrintOrderCreateInput = {
    attributes: string
    startTime: Date | string
    endTime: Date | string
    poStatus?: string
    numCopies: number
    customer: CustomerCreateNestedOneWithoutPrintOrdersInput
    contains?: ContainsCreateNestedManyWithoutPrintOrderInput
  }

  export type PrintOrderUncheckedCreateInput = {
    printOrderId?: number
    attributes: string
    startTime: Date | string
    endTime: Date | string
    poStatus?: string
    numCopies: number
    customerId: number
    contains?: ContainsUncheckedCreateNestedManyWithoutPrintOrderInput
  }

  export type PrintOrderUpdateInput = {
    attributes?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    poStatus?: StringFieldUpdateOperationsInput | string
    numCopies?: IntFieldUpdateOperationsInput | number
    customer?: CustomerUpdateOneRequiredWithoutPrintOrdersNestedInput
    contains?: ContainsUpdateManyWithoutPrintOrderNestedInput
  }

  export type PrintOrderUncheckedUpdateInput = {
    printOrderId?: IntFieldUpdateOperationsInput | number
    attributes?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    poStatus?: StringFieldUpdateOperationsInput | string
    numCopies?: IntFieldUpdateOperationsInput | number
    customerId?: IntFieldUpdateOperationsInput | number
    contains?: ContainsUncheckedUpdateManyWithoutPrintOrderNestedInput
  }

  export type PrintOrderCreateManyInput = {
    printOrderId?: number
    attributes: string
    startTime: Date | string
    endTime: Date | string
    poStatus?: string
    numCopies: number
    customerId: number
  }

  export type PrintOrderUpdateManyMutationInput = {
    attributes?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    poStatus?: StringFieldUpdateOperationsInput | string
    numCopies?: IntFieldUpdateOperationsInput | number
  }

  export type PrintOrderUncheckedUpdateManyInput = {
    printOrderId?: IntFieldUpdateOperationsInput | number
    attributes?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    poStatus?: StringFieldUpdateOperationsInput | string
    numCopies?: IntFieldUpdateOperationsInput | number
    customerId?: IntFieldUpdateOperationsInput | number
  }

  export type DocumentCreateInput = {
    docName: string
    docQuantity: number
    customer: CustomerCreateNestedOneWithoutDocumentsInput
    printer: PrinterCreateNestedOneWithoutDocumentsInput
    contains?: ContainsCreateNestedManyWithoutDocumentInput
  }

  export type DocumentUncheckedCreateInput = {
    documentId?: number
    docName: string
    customerId: number
    printerId: number
    docQuantity: number
    contains?: ContainsUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type DocumentUpdateInput = {
    docName?: StringFieldUpdateOperationsInput | string
    docQuantity?: IntFieldUpdateOperationsInput | number
    customer?: CustomerUpdateOneRequiredWithoutDocumentsNestedInput
    printer?: PrinterUpdateOneRequiredWithoutDocumentsNestedInput
    contains?: ContainsUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateInput = {
    documentId?: IntFieldUpdateOperationsInput | number
    docName?: StringFieldUpdateOperationsInput | string
    customerId?: IntFieldUpdateOperationsInput | number
    printerId?: IntFieldUpdateOperationsInput | number
    docQuantity?: IntFieldUpdateOperationsInput | number
    contains?: ContainsUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentCreateManyInput = {
    documentId?: number
    docName: string
    customerId: number
    printerId: number
    docQuantity: number
  }

  export type DocumentUpdateManyMutationInput = {
    docName?: StringFieldUpdateOperationsInput | string
    docQuantity?: IntFieldUpdateOperationsInput | number
  }

  export type DocumentUncheckedUpdateManyInput = {
    documentId?: IntFieldUpdateOperationsInput | number
    docName?: StringFieldUpdateOperationsInput | string
    customerId?: IntFieldUpdateOperationsInput | number
    printerId?: IntFieldUpdateOperationsInput | number
    docQuantity?: IntFieldUpdateOperationsInput | number
  }

  export type ContainsCreateInput = {
    document: DocumentCreateNestedOneWithoutContainsInput
    printOrder: PrintOrderCreateNestedOneWithoutContainsInput
  }

  export type ContainsUncheckedCreateInput = {
    id?: number
    documentId: number
    printOrderId: number
  }

  export type ContainsUpdateInput = {
    document?: DocumentUpdateOneRequiredWithoutContainsNestedInput
    printOrder?: PrintOrderUpdateOneRequiredWithoutContainsNestedInput
  }

  export type ContainsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentId?: IntFieldUpdateOperationsInput | number
    printOrderId?: IntFieldUpdateOperationsInput | number
  }

  export type ContainsCreateManyInput = {
    id?: number
    documentId: number
    printOrderId: number
  }

  export type ContainsUpdateManyMutationInput = {

  }

  export type ContainsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentId?: IntFieldUpdateOperationsInput | number
    printOrderId?: IntFieldUpdateOperationsInput | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AdminCountOrderByAggregateInput = {
    adminEmail?: SortOrder
    password?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    adminEmail?: SortOrder
    password?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    adminEmail?: SortOrder
    password?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AdminRelationFilter = {
    is?: AdminWhereInput
    isNot?: AdminWhereInput
  }

  export type SPSOMemberListRelationFilter = {
    every?: SPSOMemberWhereInput
    some?: SPSOMemberWhereInput
    none?: SPSOMemberWhereInput
  }

  export type CustomerListRelationFilter = {
    every?: CustomerWhereInput
    some?: CustomerWhereInput
    none?: CustomerWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SPSOMemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CustomerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    userId?: SortOrder
    fname?: SortOrder
    lname?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    usageHistory?: SortOrder
    hash?: SortOrder
    hashedRt?: SortOrder
    role?: SortOrder
    adminEmail?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    userId?: SortOrder
    fname?: SortOrder
    lname?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    usageHistory?: SortOrder
    hash?: SortOrder
    hashedRt?: SortOrder
    role?: SortOrder
    adminEmail?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    userId?: SortOrder
    fname?: SortOrder
    lname?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    usageHistory?: SortOrder
    hash?: SortOrder
    hashedRt?: SortOrder
    role?: SortOrder
    adminEmail?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type PrinterListRelationFilter = {
    every?: PrinterWhereInput
    some?: PrinterWhereInput
    none?: PrinterWhereInput
  }

  export type PrinterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SPSOMemberCountOrderByAggregateInput = {
    sosoMemberId?: SortOrder
    dob?: SortOrder
    address?: SortOrder
    userId?: SortOrder
  }

  export type SPSOMemberAvgOrderByAggregateInput = {
    sosoMemberId?: SortOrder
    userId?: SortOrder
  }

  export type SPSOMemberMaxOrderByAggregateInput = {
    sosoMemberId?: SortOrder
    dob?: SortOrder
    address?: SortOrder
    userId?: SortOrder
  }

  export type SPSOMemberMinOrderByAggregateInput = {
    sosoMemberId?: SortOrder
    dob?: SortOrder
    address?: SortOrder
    userId?: SortOrder
  }

  export type SPSOMemberSumOrderByAggregateInput = {
    sosoMemberId?: SortOrder
    userId?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type SPSOMemberNullableRelationFilter = {
    is?: SPSOMemberWhereInput | null
    isNot?: SPSOMemberWhereInput | null
  }

  export type FeedbackListRelationFilter = {
    every?: FeedbackWhereInput
    some?: FeedbackWhereInput
    none?: FeedbackWhereInput
  }

  export type PagePurchaseOrderListRelationFilter = {
    every?: PagePurchaseOrderWhereInput
    some?: PagePurchaseOrderWhereInput
    none?: PagePurchaseOrderWhereInput
  }

  export type PrintOrderListRelationFilter = {
    every?: PrintOrderWhereInput
    some?: PrintOrderWhereInput
    none?: PrintOrderWhereInput
  }

  export type DocumentListRelationFilter = {
    every?: DocumentWhereInput
    some?: DocumentWhereInput
    none?: DocumentWhereInput
  }

  export type FeedbackOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PagePurchaseOrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PrintOrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CustomerCountOrderByAggregateInput = {
    customerId?: SortOrder
    ppHistory?: SortOrder
    accBalance?: SortOrder
    summary?: SortOrder
    remainPages?: SortOrder
    userId?: SortOrder
    spsoMemberId?: SortOrder
  }

  export type CustomerAvgOrderByAggregateInput = {
    customerId?: SortOrder
    accBalance?: SortOrder
    remainPages?: SortOrder
    userId?: SortOrder
    spsoMemberId?: SortOrder
  }

  export type CustomerMaxOrderByAggregateInput = {
    customerId?: SortOrder
    ppHistory?: SortOrder
    accBalance?: SortOrder
    summary?: SortOrder
    remainPages?: SortOrder
    userId?: SortOrder
    spsoMemberId?: SortOrder
  }

  export type CustomerMinOrderByAggregateInput = {
    customerId?: SortOrder
    ppHistory?: SortOrder
    accBalance?: SortOrder
    summary?: SortOrder
    remainPages?: SortOrder
    userId?: SortOrder
    spsoMemberId?: SortOrder
  }

  export type CustomerSumOrderByAggregateInput = {
    customerId?: SortOrder
    accBalance?: SortOrder
    remainPages?: SortOrder
    userId?: SortOrder
    spsoMemberId?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type CustomerRelationFilter = {
    is?: CustomerWhereInput
    isNot?: CustomerWhereInput
  }

  export type FeedbackCountOrderByAggregateInput = {
    feedbackId?: SortOrder
    customerId?: SortOrder
    feedTime?: SortOrder
    rating?: SortOrder
    contentByCustomer?: SortOrder
  }

  export type FeedbackAvgOrderByAggregateInput = {
    feedbackId?: SortOrder
    customerId?: SortOrder
    rating?: SortOrder
  }

  export type FeedbackMaxOrderByAggregateInput = {
    feedbackId?: SortOrder
    customerId?: SortOrder
    feedTime?: SortOrder
    rating?: SortOrder
    contentByCustomer?: SortOrder
  }

  export type FeedbackMinOrderByAggregateInput = {
    feedbackId?: SortOrder
    customerId?: SortOrder
    feedTime?: SortOrder
    rating?: SortOrder
    contentByCustomer?: SortOrder
  }

  export type FeedbackSumOrderByAggregateInput = {
    feedbackId?: SortOrder
    customerId?: SortOrder
    rating?: SortOrder
  }

  export type SPSOMemberRelationFilter = {
    is?: SPSOMemberWhereInput
    isNot?: SPSOMemberWhereInput
  }

  export type PrinterCountOrderByAggregateInput = {
    printerId?: SortOrder
    model?: SortOrder
    brand?: SortOrder
    description?: SortOrder
    facility?: SortOrder
    building?: SortOrder
    room?: SortOrder
    spsomemberId?: SortOrder
  }

  export type PrinterAvgOrderByAggregateInput = {
    printerId?: SortOrder
    spsomemberId?: SortOrder
  }

  export type PrinterMaxOrderByAggregateInput = {
    printerId?: SortOrder
    model?: SortOrder
    brand?: SortOrder
    description?: SortOrder
    facility?: SortOrder
    building?: SortOrder
    room?: SortOrder
    spsomemberId?: SortOrder
  }

  export type PrinterMinOrderByAggregateInput = {
    printerId?: SortOrder
    model?: SortOrder
    brand?: SortOrder
    description?: SortOrder
    facility?: SortOrder
    building?: SortOrder
    room?: SortOrder
    spsomemberId?: SortOrder
  }

  export type PrinterSumOrderByAggregateInput = {
    printerId?: SortOrder
    spsomemberId?: SortOrder
  }

  export type PagePurchaseOrderCountOrderByAggregateInput = {
    ppoId?: SortOrder
    purchaseTime?: SortOrder
    customerId?: SortOrder
    ppoStatus?: SortOrder
    pageNum?: SortOrder
    price?: SortOrder
    paymentMethod?: SortOrder
  }

  export type PagePurchaseOrderAvgOrderByAggregateInput = {
    ppoId?: SortOrder
    customerId?: SortOrder
    pageNum?: SortOrder
    price?: SortOrder
  }

  export type PagePurchaseOrderMaxOrderByAggregateInput = {
    ppoId?: SortOrder
    purchaseTime?: SortOrder
    customerId?: SortOrder
    ppoStatus?: SortOrder
    pageNum?: SortOrder
    price?: SortOrder
    paymentMethod?: SortOrder
  }

  export type PagePurchaseOrderMinOrderByAggregateInput = {
    ppoId?: SortOrder
    purchaseTime?: SortOrder
    customerId?: SortOrder
    ppoStatus?: SortOrder
    pageNum?: SortOrder
    price?: SortOrder
    paymentMethod?: SortOrder
  }

  export type PagePurchaseOrderSumOrderByAggregateInput = {
    ppoId?: SortOrder
    customerId?: SortOrder
    pageNum?: SortOrder
    price?: SortOrder
  }

  export type ContainsListRelationFilter = {
    every?: ContainsWhereInput
    some?: ContainsWhereInput
    none?: ContainsWhereInput
  }

  export type ContainsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PrintOrderCountOrderByAggregateInput = {
    printOrderId?: SortOrder
    attributes?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    poStatus?: SortOrder
    numCopies?: SortOrder
    customerId?: SortOrder
  }

  export type PrintOrderAvgOrderByAggregateInput = {
    printOrderId?: SortOrder
    numCopies?: SortOrder
    customerId?: SortOrder
  }

  export type PrintOrderMaxOrderByAggregateInput = {
    printOrderId?: SortOrder
    attributes?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    poStatus?: SortOrder
    numCopies?: SortOrder
    customerId?: SortOrder
  }

  export type PrintOrderMinOrderByAggregateInput = {
    printOrderId?: SortOrder
    attributes?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    poStatus?: SortOrder
    numCopies?: SortOrder
    customerId?: SortOrder
  }

  export type PrintOrderSumOrderByAggregateInput = {
    printOrderId?: SortOrder
    numCopies?: SortOrder
    customerId?: SortOrder
  }

  export type PrinterRelationFilter = {
    is?: PrinterWhereInput
    isNot?: PrinterWhereInput
  }

  export type DocumentCountOrderByAggregateInput = {
    documentId?: SortOrder
    docName?: SortOrder
    customerId?: SortOrder
    printerId?: SortOrder
    docQuantity?: SortOrder
  }

  export type DocumentAvgOrderByAggregateInput = {
    documentId?: SortOrder
    customerId?: SortOrder
    printerId?: SortOrder
    docQuantity?: SortOrder
  }

  export type DocumentMaxOrderByAggregateInput = {
    documentId?: SortOrder
    docName?: SortOrder
    customerId?: SortOrder
    printerId?: SortOrder
    docQuantity?: SortOrder
  }

  export type DocumentMinOrderByAggregateInput = {
    documentId?: SortOrder
    docName?: SortOrder
    customerId?: SortOrder
    printerId?: SortOrder
    docQuantity?: SortOrder
  }

  export type DocumentSumOrderByAggregateInput = {
    documentId?: SortOrder
    customerId?: SortOrder
    printerId?: SortOrder
    docQuantity?: SortOrder
  }

  export type DocumentRelationFilter = {
    is?: DocumentWhereInput
    isNot?: DocumentWhereInput
  }

  export type PrintOrderRelationFilter = {
    is?: PrintOrderWhereInput
    isNot?: PrintOrderWhereInput
  }

  export type ContainsCountOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    printOrderId?: SortOrder
  }

  export type ContainsAvgOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    printOrderId?: SortOrder
  }

  export type ContainsMaxOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    printOrderId?: SortOrder
  }

  export type ContainsMinOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    printOrderId?: SortOrder
  }

  export type ContainsSumOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    printOrderId?: SortOrder
  }

  export type UserCreateNestedManyWithoutAdminInput = {
    create?: XOR<UserCreateWithoutAdminInput, UserUncheckedCreateWithoutAdminInput> | UserCreateWithoutAdminInput[] | UserUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAdminInput | UserCreateOrConnectWithoutAdminInput[]
    createMany?: UserCreateManyAdminInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutAdminInput = {
    create?: XOR<UserCreateWithoutAdminInput, UserUncheckedCreateWithoutAdminInput> | UserCreateWithoutAdminInput[] | UserUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAdminInput | UserCreateOrConnectWithoutAdminInput[]
    createMany?: UserCreateManyAdminInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type UserUpdateManyWithoutAdminNestedInput = {
    create?: XOR<UserCreateWithoutAdminInput, UserUncheckedCreateWithoutAdminInput> | UserCreateWithoutAdminInput[] | UserUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAdminInput | UserCreateOrConnectWithoutAdminInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAdminInput | UserUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: UserCreateManyAdminInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAdminInput | UserUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAdminInput | UserUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutAdminNestedInput = {
    create?: XOR<UserCreateWithoutAdminInput, UserUncheckedCreateWithoutAdminInput> | UserCreateWithoutAdminInput[] | UserUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAdminInput | UserCreateOrConnectWithoutAdminInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAdminInput | UserUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: UserCreateManyAdminInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAdminInput | UserUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAdminInput | UserUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type AdminCreateNestedOneWithoutUserInput = {
    create?: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminCreateOrConnectWithoutUserInput
    connect?: AdminWhereUniqueInput
  }

  export type SPSOMemberCreateNestedManyWithoutUserInput = {
    create?: XOR<SPSOMemberCreateWithoutUserInput, SPSOMemberUncheckedCreateWithoutUserInput> | SPSOMemberCreateWithoutUserInput[] | SPSOMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SPSOMemberCreateOrConnectWithoutUserInput | SPSOMemberCreateOrConnectWithoutUserInput[]
    createMany?: SPSOMemberCreateManyUserInputEnvelope
    connect?: SPSOMemberWhereUniqueInput | SPSOMemberWhereUniqueInput[]
  }

  export type CustomerCreateNestedManyWithoutUserInput = {
    create?: XOR<CustomerCreateWithoutUserInput, CustomerUncheckedCreateWithoutUserInput> | CustomerCreateWithoutUserInput[] | CustomerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutUserInput | CustomerCreateOrConnectWithoutUserInput[]
    createMany?: CustomerCreateManyUserInputEnvelope
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
  }

  export type SPSOMemberUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SPSOMemberCreateWithoutUserInput, SPSOMemberUncheckedCreateWithoutUserInput> | SPSOMemberCreateWithoutUserInput[] | SPSOMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SPSOMemberCreateOrConnectWithoutUserInput | SPSOMemberCreateOrConnectWithoutUserInput[]
    createMany?: SPSOMemberCreateManyUserInputEnvelope
    connect?: SPSOMemberWhereUniqueInput | SPSOMemberWhereUniqueInput[]
  }

  export type CustomerUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CustomerCreateWithoutUserInput, CustomerUncheckedCreateWithoutUserInput> | CustomerCreateWithoutUserInput[] | CustomerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutUserInput | CustomerCreateOrConnectWithoutUserInput[]
    createMany?: CustomerCreateManyUserInputEnvelope
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AdminUpdateOneRequiredWithoutUserNestedInput = {
    create?: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminCreateOrConnectWithoutUserInput
    upsert?: AdminUpsertWithoutUserInput
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutUserInput, AdminUpdateWithoutUserInput>, AdminUncheckedUpdateWithoutUserInput>
  }

  export type SPSOMemberUpdateManyWithoutUserNestedInput = {
    create?: XOR<SPSOMemberCreateWithoutUserInput, SPSOMemberUncheckedCreateWithoutUserInput> | SPSOMemberCreateWithoutUserInput[] | SPSOMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SPSOMemberCreateOrConnectWithoutUserInput | SPSOMemberCreateOrConnectWithoutUserInput[]
    upsert?: SPSOMemberUpsertWithWhereUniqueWithoutUserInput | SPSOMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SPSOMemberCreateManyUserInputEnvelope
    set?: SPSOMemberWhereUniqueInput | SPSOMemberWhereUniqueInput[]
    disconnect?: SPSOMemberWhereUniqueInput | SPSOMemberWhereUniqueInput[]
    delete?: SPSOMemberWhereUniqueInput | SPSOMemberWhereUniqueInput[]
    connect?: SPSOMemberWhereUniqueInput | SPSOMemberWhereUniqueInput[]
    update?: SPSOMemberUpdateWithWhereUniqueWithoutUserInput | SPSOMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SPSOMemberUpdateManyWithWhereWithoutUserInput | SPSOMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SPSOMemberScalarWhereInput | SPSOMemberScalarWhereInput[]
  }

  export type CustomerUpdateManyWithoutUserNestedInput = {
    create?: XOR<CustomerCreateWithoutUserInput, CustomerUncheckedCreateWithoutUserInput> | CustomerCreateWithoutUserInput[] | CustomerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutUserInput | CustomerCreateOrConnectWithoutUserInput[]
    upsert?: CustomerUpsertWithWhereUniqueWithoutUserInput | CustomerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CustomerCreateManyUserInputEnvelope
    set?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    disconnect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    delete?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    update?: CustomerUpdateWithWhereUniqueWithoutUserInput | CustomerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CustomerUpdateManyWithWhereWithoutUserInput | CustomerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SPSOMemberUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SPSOMemberCreateWithoutUserInput, SPSOMemberUncheckedCreateWithoutUserInput> | SPSOMemberCreateWithoutUserInput[] | SPSOMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SPSOMemberCreateOrConnectWithoutUserInput | SPSOMemberCreateOrConnectWithoutUserInput[]
    upsert?: SPSOMemberUpsertWithWhereUniqueWithoutUserInput | SPSOMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SPSOMemberCreateManyUserInputEnvelope
    set?: SPSOMemberWhereUniqueInput | SPSOMemberWhereUniqueInput[]
    disconnect?: SPSOMemberWhereUniqueInput | SPSOMemberWhereUniqueInput[]
    delete?: SPSOMemberWhereUniqueInput | SPSOMemberWhereUniqueInput[]
    connect?: SPSOMemberWhereUniqueInput | SPSOMemberWhereUniqueInput[]
    update?: SPSOMemberUpdateWithWhereUniqueWithoutUserInput | SPSOMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SPSOMemberUpdateManyWithWhereWithoutUserInput | SPSOMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SPSOMemberScalarWhereInput | SPSOMemberScalarWhereInput[]
  }

  export type CustomerUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CustomerCreateWithoutUserInput, CustomerUncheckedCreateWithoutUserInput> | CustomerCreateWithoutUserInput[] | CustomerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutUserInput | CustomerCreateOrConnectWithoutUserInput[]
    upsert?: CustomerUpsertWithWhereUniqueWithoutUserInput | CustomerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CustomerCreateManyUserInputEnvelope
    set?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    disconnect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    delete?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    update?: CustomerUpdateWithWhereUniqueWithoutUserInput | CustomerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CustomerUpdateManyWithWhereWithoutUserInput | CustomerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSpsomembersInput = {
    create?: XOR<UserCreateWithoutSpsomembersInput, UserUncheckedCreateWithoutSpsomembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutSpsomembersInput
    connect?: UserWhereUniqueInput
  }

  export type PrinterCreateNestedManyWithoutSpsomemberInput = {
    create?: XOR<PrinterCreateWithoutSpsomemberInput, PrinterUncheckedCreateWithoutSpsomemberInput> | PrinterCreateWithoutSpsomemberInput[] | PrinterUncheckedCreateWithoutSpsomemberInput[]
    connectOrCreate?: PrinterCreateOrConnectWithoutSpsomemberInput | PrinterCreateOrConnectWithoutSpsomemberInput[]
    createMany?: PrinterCreateManySpsomemberInputEnvelope
    connect?: PrinterWhereUniqueInput | PrinterWhereUniqueInput[]
  }

  export type CustomerCreateNestedManyWithoutSpsomemberInput = {
    create?: XOR<CustomerCreateWithoutSpsomemberInput, CustomerUncheckedCreateWithoutSpsomemberInput> | CustomerCreateWithoutSpsomemberInput[] | CustomerUncheckedCreateWithoutSpsomemberInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutSpsomemberInput | CustomerCreateOrConnectWithoutSpsomemberInput[]
    createMany?: CustomerCreateManySpsomemberInputEnvelope
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
  }

  export type PrinterUncheckedCreateNestedManyWithoutSpsomemberInput = {
    create?: XOR<PrinterCreateWithoutSpsomemberInput, PrinterUncheckedCreateWithoutSpsomemberInput> | PrinterCreateWithoutSpsomemberInput[] | PrinterUncheckedCreateWithoutSpsomemberInput[]
    connectOrCreate?: PrinterCreateOrConnectWithoutSpsomemberInput | PrinterCreateOrConnectWithoutSpsomemberInput[]
    createMany?: PrinterCreateManySpsomemberInputEnvelope
    connect?: PrinterWhereUniqueInput | PrinterWhereUniqueInput[]
  }

  export type CustomerUncheckedCreateNestedManyWithoutSpsomemberInput = {
    create?: XOR<CustomerCreateWithoutSpsomemberInput, CustomerUncheckedCreateWithoutSpsomemberInput> | CustomerCreateWithoutSpsomemberInput[] | CustomerUncheckedCreateWithoutSpsomemberInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutSpsomemberInput | CustomerCreateOrConnectWithoutSpsomemberInput[]
    createMany?: CustomerCreateManySpsomemberInputEnvelope
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutSpsomembersNestedInput = {
    create?: XOR<UserCreateWithoutSpsomembersInput, UserUncheckedCreateWithoutSpsomembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutSpsomembersInput
    upsert?: UserUpsertWithoutSpsomembersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSpsomembersInput, UserUpdateWithoutSpsomembersInput>, UserUncheckedUpdateWithoutSpsomembersInput>
  }

  export type PrinterUpdateManyWithoutSpsomemberNestedInput = {
    create?: XOR<PrinterCreateWithoutSpsomemberInput, PrinterUncheckedCreateWithoutSpsomemberInput> | PrinterCreateWithoutSpsomemberInput[] | PrinterUncheckedCreateWithoutSpsomemberInput[]
    connectOrCreate?: PrinterCreateOrConnectWithoutSpsomemberInput | PrinterCreateOrConnectWithoutSpsomemberInput[]
    upsert?: PrinterUpsertWithWhereUniqueWithoutSpsomemberInput | PrinterUpsertWithWhereUniqueWithoutSpsomemberInput[]
    createMany?: PrinterCreateManySpsomemberInputEnvelope
    set?: PrinterWhereUniqueInput | PrinterWhereUniqueInput[]
    disconnect?: PrinterWhereUniqueInput | PrinterWhereUniqueInput[]
    delete?: PrinterWhereUniqueInput | PrinterWhereUniqueInput[]
    connect?: PrinterWhereUniqueInput | PrinterWhereUniqueInput[]
    update?: PrinterUpdateWithWhereUniqueWithoutSpsomemberInput | PrinterUpdateWithWhereUniqueWithoutSpsomemberInput[]
    updateMany?: PrinterUpdateManyWithWhereWithoutSpsomemberInput | PrinterUpdateManyWithWhereWithoutSpsomemberInput[]
    deleteMany?: PrinterScalarWhereInput | PrinterScalarWhereInput[]
  }

  export type CustomerUpdateManyWithoutSpsomemberNestedInput = {
    create?: XOR<CustomerCreateWithoutSpsomemberInput, CustomerUncheckedCreateWithoutSpsomemberInput> | CustomerCreateWithoutSpsomemberInput[] | CustomerUncheckedCreateWithoutSpsomemberInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutSpsomemberInput | CustomerCreateOrConnectWithoutSpsomemberInput[]
    upsert?: CustomerUpsertWithWhereUniqueWithoutSpsomemberInput | CustomerUpsertWithWhereUniqueWithoutSpsomemberInput[]
    createMany?: CustomerCreateManySpsomemberInputEnvelope
    set?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    disconnect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    delete?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    update?: CustomerUpdateWithWhereUniqueWithoutSpsomemberInput | CustomerUpdateWithWhereUniqueWithoutSpsomemberInput[]
    updateMany?: CustomerUpdateManyWithWhereWithoutSpsomemberInput | CustomerUpdateManyWithWhereWithoutSpsomemberInput[]
    deleteMany?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
  }

  export type PrinterUncheckedUpdateManyWithoutSpsomemberNestedInput = {
    create?: XOR<PrinterCreateWithoutSpsomemberInput, PrinterUncheckedCreateWithoutSpsomemberInput> | PrinterCreateWithoutSpsomemberInput[] | PrinterUncheckedCreateWithoutSpsomemberInput[]
    connectOrCreate?: PrinterCreateOrConnectWithoutSpsomemberInput | PrinterCreateOrConnectWithoutSpsomemberInput[]
    upsert?: PrinterUpsertWithWhereUniqueWithoutSpsomemberInput | PrinterUpsertWithWhereUniqueWithoutSpsomemberInput[]
    createMany?: PrinterCreateManySpsomemberInputEnvelope
    set?: PrinterWhereUniqueInput | PrinterWhereUniqueInput[]
    disconnect?: PrinterWhereUniqueInput | PrinterWhereUniqueInput[]
    delete?: PrinterWhereUniqueInput | PrinterWhereUniqueInput[]
    connect?: PrinterWhereUniqueInput | PrinterWhereUniqueInput[]
    update?: PrinterUpdateWithWhereUniqueWithoutSpsomemberInput | PrinterUpdateWithWhereUniqueWithoutSpsomemberInput[]
    updateMany?: PrinterUpdateManyWithWhereWithoutSpsomemberInput | PrinterUpdateManyWithWhereWithoutSpsomemberInput[]
    deleteMany?: PrinterScalarWhereInput | PrinterScalarWhereInput[]
  }

  export type CustomerUncheckedUpdateManyWithoutSpsomemberNestedInput = {
    create?: XOR<CustomerCreateWithoutSpsomemberInput, CustomerUncheckedCreateWithoutSpsomemberInput> | CustomerCreateWithoutSpsomemberInput[] | CustomerUncheckedCreateWithoutSpsomemberInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutSpsomemberInput | CustomerCreateOrConnectWithoutSpsomemberInput[]
    upsert?: CustomerUpsertWithWhereUniqueWithoutSpsomemberInput | CustomerUpsertWithWhereUniqueWithoutSpsomemberInput[]
    createMany?: CustomerCreateManySpsomemberInputEnvelope
    set?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    disconnect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    delete?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    update?: CustomerUpdateWithWhereUniqueWithoutSpsomemberInput | CustomerUpdateWithWhereUniqueWithoutSpsomemberInput[]
    updateMany?: CustomerUpdateManyWithWhereWithoutSpsomemberInput | CustomerUpdateManyWithWhereWithoutSpsomemberInput[]
    deleteMany?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCustomersInput = {
    create?: XOR<UserCreateWithoutCustomersInput, UserUncheckedCreateWithoutCustomersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCustomersInput
    connect?: UserWhereUniqueInput
  }

  export type SPSOMemberCreateNestedOneWithoutCustomersInput = {
    create?: XOR<SPSOMemberCreateWithoutCustomersInput, SPSOMemberUncheckedCreateWithoutCustomersInput>
    connectOrCreate?: SPSOMemberCreateOrConnectWithoutCustomersInput
    connect?: SPSOMemberWhereUniqueInput
  }

  export type FeedbackCreateNestedManyWithoutCustomerInput = {
    create?: XOR<FeedbackCreateWithoutCustomerInput, FeedbackUncheckedCreateWithoutCustomerInput> | FeedbackCreateWithoutCustomerInput[] | FeedbackUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutCustomerInput | FeedbackCreateOrConnectWithoutCustomerInput[]
    createMany?: FeedbackCreateManyCustomerInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type PagePurchaseOrderCreateNestedManyWithoutCustomerInput = {
    create?: XOR<PagePurchaseOrderCreateWithoutCustomerInput, PagePurchaseOrderUncheckedCreateWithoutCustomerInput> | PagePurchaseOrderCreateWithoutCustomerInput[] | PagePurchaseOrderUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: PagePurchaseOrderCreateOrConnectWithoutCustomerInput | PagePurchaseOrderCreateOrConnectWithoutCustomerInput[]
    createMany?: PagePurchaseOrderCreateManyCustomerInputEnvelope
    connect?: PagePurchaseOrderWhereUniqueInput | PagePurchaseOrderWhereUniqueInput[]
  }

  export type PrintOrderCreateNestedManyWithoutCustomerInput = {
    create?: XOR<PrintOrderCreateWithoutCustomerInput, PrintOrderUncheckedCreateWithoutCustomerInput> | PrintOrderCreateWithoutCustomerInput[] | PrintOrderUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: PrintOrderCreateOrConnectWithoutCustomerInput | PrintOrderCreateOrConnectWithoutCustomerInput[]
    createMany?: PrintOrderCreateManyCustomerInputEnvelope
    connect?: PrintOrderWhereUniqueInput | PrintOrderWhereUniqueInput[]
  }

  export type DocumentCreateNestedManyWithoutCustomerInput = {
    create?: XOR<DocumentCreateWithoutCustomerInput, DocumentUncheckedCreateWithoutCustomerInput> | DocumentCreateWithoutCustomerInput[] | DocumentUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutCustomerInput | DocumentCreateOrConnectWithoutCustomerInput[]
    createMany?: DocumentCreateManyCustomerInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type FeedbackUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<FeedbackCreateWithoutCustomerInput, FeedbackUncheckedCreateWithoutCustomerInput> | FeedbackCreateWithoutCustomerInput[] | FeedbackUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutCustomerInput | FeedbackCreateOrConnectWithoutCustomerInput[]
    createMany?: FeedbackCreateManyCustomerInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type PagePurchaseOrderUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<PagePurchaseOrderCreateWithoutCustomerInput, PagePurchaseOrderUncheckedCreateWithoutCustomerInput> | PagePurchaseOrderCreateWithoutCustomerInput[] | PagePurchaseOrderUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: PagePurchaseOrderCreateOrConnectWithoutCustomerInput | PagePurchaseOrderCreateOrConnectWithoutCustomerInput[]
    createMany?: PagePurchaseOrderCreateManyCustomerInputEnvelope
    connect?: PagePurchaseOrderWhereUniqueInput | PagePurchaseOrderWhereUniqueInput[]
  }

  export type PrintOrderUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<PrintOrderCreateWithoutCustomerInput, PrintOrderUncheckedCreateWithoutCustomerInput> | PrintOrderCreateWithoutCustomerInput[] | PrintOrderUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: PrintOrderCreateOrConnectWithoutCustomerInput | PrintOrderCreateOrConnectWithoutCustomerInput[]
    createMany?: PrintOrderCreateManyCustomerInputEnvelope
    connect?: PrintOrderWhereUniqueInput | PrintOrderWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<DocumentCreateWithoutCustomerInput, DocumentUncheckedCreateWithoutCustomerInput> | DocumentCreateWithoutCustomerInput[] | DocumentUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutCustomerInput | DocumentCreateOrConnectWithoutCustomerInput[]
    createMany?: DocumentCreateManyCustomerInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneWithoutCustomersNestedInput = {
    create?: XOR<UserCreateWithoutCustomersInput, UserUncheckedCreateWithoutCustomersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCustomersInput
    upsert?: UserUpsertWithoutCustomersInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCustomersInput, UserUpdateWithoutCustomersInput>, UserUncheckedUpdateWithoutCustomersInput>
  }

  export type SPSOMemberUpdateOneWithoutCustomersNestedInput = {
    create?: XOR<SPSOMemberCreateWithoutCustomersInput, SPSOMemberUncheckedCreateWithoutCustomersInput>
    connectOrCreate?: SPSOMemberCreateOrConnectWithoutCustomersInput
    upsert?: SPSOMemberUpsertWithoutCustomersInput
    disconnect?: SPSOMemberWhereInput | boolean
    delete?: SPSOMemberWhereInput | boolean
    connect?: SPSOMemberWhereUniqueInput
    update?: XOR<XOR<SPSOMemberUpdateToOneWithWhereWithoutCustomersInput, SPSOMemberUpdateWithoutCustomersInput>, SPSOMemberUncheckedUpdateWithoutCustomersInput>
  }

  export type FeedbackUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<FeedbackCreateWithoutCustomerInput, FeedbackUncheckedCreateWithoutCustomerInput> | FeedbackCreateWithoutCustomerInput[] | FeedbackUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutCustomerInput | FeedbackCreateOrConnectWithoutCustomerInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutCustomerInput | FeedbackUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: FeedbackCreateManyCustomerInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutCustomerInput | FeedbackUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutCustomerInput | FeedbackUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type PagePurchaseOrderUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<PagePurchaseOrderCreateWithoutCustomerInput, PagePurchaseOrderUncheckedCreateWithoutCustomerInput> | PagePurchaseOrderCreateWithoutCustomerInput[] | PagePurchaseOrderUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: PagePurchaseOrderCreateOrConnectWithoutCustomerInput | PagePurchaseOrderCreateOrConnectWithoutCustomerInput[]
    upsert?: PagePurchaseOrderUpsertWithWhereUniqueWithoutCustomerInput | PagePurchaseOrderUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: PagePurchaseOrderCreateManyCustomerInputEnvelope
    set?: PagePurchaseOrderWhereUniqueInput | PagePurchaseOrderWhereUniqueInput[]
    disconnect?: PagePurchaseOrderWhereUniqueInput | PagePurchaseOrderWhereUniqueInput[]
    delete?: PagePurchaseOrderWhereUniqueInput | PagePurchaseOrderWhereUniqueInput[]
    connect?: PagePurchaseOrderWhereUniqueInput | PagePurchaseOrderWhereUniqueInput[]
    update?: PagePurchaseOrderUpdateWithWhereUniqueWithoutCustomerInput | PagePurchaseOrderUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: PagePurchaseOrderUpdateManyWithWhereWithoutCustomerInput | PagePurchaseOrderUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: PagePurchaseOrderScalarWhereInput | PagePurchaseOrderScalarWhereInput[]
  }

  export type PrintOrderUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<PrintOrderCreateWithoutCustomerInput, PrintOrderUncheckedCreateWithoutCustomerInput> | PrintOrderCreateWithoutCustomerInput[] | PrintOrderUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: PrintOrderCreateOrConnectWithoutCustomerInput | PrintOrderCreateOrConnectWithoutCustomerInput[]
    upsert?: PrintOrderUpsertWithWhereUniqueWithoutCustomerInput | PrintOrderUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: PrintOrderCreateManyCustomerInputEnvelope
    set?: PrintOrderWhereUniqueInput | PrintOrderWhereUniqueInput[]
    disconnect?: PrintOrderWhereUniqueInput | PrintOrderWhereUniqueInput[]
    delete?: PrintOrderWhereUniqueInput | PrintOrderWhereUniqueInput[]
    connect?: PrintOrderWhereUniqueInput | PrintOrderWhereUniqueInput[]
    update?: PrintOrderUpdateWithWhereUniqueWithoutCustomerInput | PrintOrderUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: PrintOrderUpdateManyWithWhereWithoutCustomerInput | PrintOrderUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: PrintOrderScalarWhereInput | PrintOrderScalarWhereInput[]
  }

  export type DocumentUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<DocumentCreateWithoutCustomerInput, DocumentUncheckedCreateWithoutCustomerInput> | DocumentCreateWithoutCustomerInput[] | DocumentUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutCustomerInput | DocumentCreateOrConnectWithoutCustomerInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutCustomerInput | DocumentUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: DocumentCreateManyCustomerInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutCustomerInput | DocumentUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutCustomerInput | DocumentUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FeedbackUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<FeedbackCreateWithoutCustomerInput, FeedbackUncheckedCreateWithoutCustomerInput> | FeedbackCreateWithoutCustomerInput[] | FeedbackUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutCustomerInput | FeedbackCreateOrConnectWithoutCustomerInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutCustomerInput | FeedbackUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: FeedbackCreateManyCustomerInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutCustomerInput | FeedbackUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutCustomerInput | FeedbackUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type PagePurchaseOrderUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<PagePurchaseOrderCreateWithoutCustomerInput, PagePurchaseOrderUncheckedCreateWithoutCustomerInput> | PagePurchaseOrderCreateWithoutCustomerInput[] | PagePurchaseOrderUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: PagePurchaseOrderCreateOrConnectWithoutCustomerInput | PagePurchaseOrderCreateOrConnectWithoutCustomerInput[]
    upsert?: PagePurchaseOrderUpsertWithWhereUniqueWithoutCustomerInput | PagePurchaseOrderUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: PagePurchaseOrderCreateManyCustomerInputEnvelope
    set?: PagePurchaseOrderWhereUniqueInput | PagePurchaseOrderWhereUniqueInput[]
    disconnect?: PagePurchaseOrderWhereUniqueInput | PagePurchaseOrderWhereUniqueInput[]
    delete?: PagePurchaseOrderWhereUniqueInput | PagePurchaseOrderWhereUniqueInput[]
    connect?: PagePurchaseOrderWhereUniqueInput | PagePurchaseOrderWhereUniqueInput[]
    update?: PagePurchaseOrderUpdateWithWhereUniqueWithoutCustomerInput | PagePurchaseOrderUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: PagePurchaseOrderUpdateManyWithWhereWithoutCustomerInput | PagePurchaseOrderUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: PagePurchaseOrderScalarWhereInput | PagePurchaseOrderScalarWhereInput[]
  }

  export type PrintOrderUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<PrintOrderCreateWithoutCustomerInput, PrintOrderUncheckedCreateWithoutCustomerInput> | PrintOrderCreateWithoutCustomerInput[] | PrintOrderUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: PrintOrderCreateOrConnectWithoutCustomerInput | PrintOrderCreateOrConnectWithoutCustomerInput[]
    upsert?: PrintOrderUpsertWithWhereUniqueWithoutCustomerInput | PrintOrderUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: PrintOrderCreateManyCustomerInputEnvelope
    set?: PrintOrderWhereUniqueInput | PrintOrderWhereUniqueInput[]
    disconnect?: PrintOrderWhereUniqueInput | PrintOrderWhereUniqueInput[]
    delete?: PrintOrderWhereUniqueInput | PrintOrderWhereUniqueInput[]
    connect?: PrintOrderWhereUniqueInput | PrintOrderWhereUniqueInput[]
    update?: PrintOrderUpdateWithWhereUniqueWithoutCustomerInput | PrintOrderUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: PrintOrderUpdateManyWithWhereWithoutCustomerInput | PrintOrderUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: PrintOrderScalarWhereInput | PrintOrderScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<DocumentCreateWithoutCustomerInput, DocumentUncheckedCreateWithoutCustomerInput> | DocumentCreateWithoutCustomerInput[] | DocumentUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutCustomerInput | DocumentCreateOrConnectWithoutCustomerInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutCustomerInput | DocumentUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: DocumentCreateManyCustomerInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutCustomerInput | DocumentUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutCustomerInput | DocumentUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type CustomerCreateNestedOneWithoutFeedbacksInput = {
    create?: XOR<CustomerCreateWithoutFeedbacksInput, CustomerUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutFeedbacksInput
    connect?: CustomerWhereUniqueInput
  }

  export type CustomerUpdateOneRequiredWithoutFeedbacksNestedInput = {
    create?: XOR<CustomerCreateWithoutFeedbacksInput, CustomerUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutFeedbacksInput
    upsert?: CustomerUpsertWithoutFeedbacksInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutFeedbacksInput, CustomerUpdateWithoutFeedbacksInput>, CustomerUncheckedUpdateWithoutFeedbacksInput>
  }

  export type SPSOMemberCreateNestedOneWithoutPrintersInput = {
    create?: XOR<SPSOMemberCreateWithoutPrintersInput, SPSOMemberUncheckedCreateWithoutPrintersInput>
    connectOrCreate?: SPSOMemberCreateOrConnectWithoutPrintersInput
    connect?: SPSOMemberWhereUniqueInput
  }

  export type DocumentCreateNestedManyWithoutPrinterInput = {
    create?: XOR<DocumentCreateWithoutPrinterInput, DocumentUncheckedCreateWithoutPrinterInput> | DocumentCreateWithoutPrinterInput[] | DocumentUncheckedCreateWithoutPrinterInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutPrinterInput | DocumentCreateOrConnectWithoutPrinterInput[]
    createMany?: DocumentCreateManyPrinterInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutPrinterInput = {
    create?: XOR<DocumentCreateWithoutPrinterInput, DocumentUncheckedCreateWithoutPrinterInput> | DocumentCreateWithoutPrinterInput[] | DocumentUncheckedCreateWithoutPrinterInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutPrinterInput | DocumentCreateOrConnectWithoutPrinterInput[]
    createMany?: DocumentCreateManyPrinterInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type SPSOMemberUpdateOneRequiredWithoutPrintersNestedInput = {
    create?: XOR<SPSOMemberCreateWithoutPrintersInput, SPSOMemberUncheckedCreateWithoutPrintersInput>
    connectOrCreate?: SPSOMemberCreateOrConnectWithoutPrintersInput
    upsert?: SPSOMemberUpsertWithoutPrintersInput
    connect?: SPSOMemberWhereUniqueInput
    update?: XOR<XOR<SPSOMemberUpdateToOneWithWhereWithoutPrintersInput, SPSOMemberUpdateWithoutPrintersInput>, SPSOMemberUncheckedUpdateWithoutPrintersInput>
  }

  export type DocumentUpdateManyWithoutPrinterNestedInput = {
    create?: XOR<DocumentCreateWithoutPrinterInput, DocumentUncheckedCreateWithoutPrinterInput> | DocumentCreateWithoutPrinterInput[] | DocumentUncheckedCreateWithoutPrinterInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutPrinterInput | DocumentCreateOrConnectWithoutPrinterInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutPrinterInput | DocumentUpsertWithWhereUniqueWithoutPrinterInput[]
    createMany?: DocumentCreateManyPrinterInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutPrinterInput | DocumentUpdateWithWhereUniqueWithoutPrinterInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutPrinterInput | DocumentUpdateManyWithWhereWithoutPrinterInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutPrinterNestedInput = {
    create?: XOR<DocumentCreateWithoutPrinterInput, DocumentUncheckedCreateWithoutPrinterInput> | DocumentCreateWithoutPrinterInput[] | DocumentUncheckedCreateWithoutPrinterInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutPrinterInput | DocumentCreateOrConnectWithoutPrinterInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutPrinterInput | DocumentUpsertWithWhereUniqueWithoutPrinterInput[]
    createMany?: DocumentCreateManyPrinterInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutPrinterInput | DocumentUpdateWithWhereUniqueWithoutPrinterInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutPrinterInput | DocumentUpdateManyWithWhereWithoutPrinterInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type CustomerCreateNestedOneWithoutPagePurchaseOrdersInput = {
    create?: XOR<CustomerCreateWithoutPagePurchaseOrdersInput, CustomerUncheckedCreateWithoutPagePurchaseOrdersInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutPagePurchaseOrdersInput
    connect?: CustomerWhereUniqueInput
  }

  export type CustomerUpdateOneRequiredWithoutPagePurchaseOrdersNestedInput = {
    create?: XOR<CustomerCreateWithoutPagePurchaseOrdersInput, CustomerUncheckedCreateWithoutPagePurchaseOrdersInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutPagePurchaseOrdersInput
    upsert?: CustomerUpsertWithoutPagePurchaseOrdersInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutPagePurchaseOrdersInput, CustomerUpdateWithoutPagePurchaseOrdersInput>, CustomerUncheckedUpdateWithoutPagePurchaseOrdersInput>
  }

  export type CustomerCreateNestedOneWithoutPrintOrdersInput = {
    create?: XOR<CustomerCreateWithoutPrintOrdersInput, CustomerUncheckedCreateWithoutPrintOrdersInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutPrintOrdersInput
    connect?: CustomerWhereUniqueInput
  }

  export type ContainsCreateNestedManyWithoutPrintOrderInput = {
    create?: XOR<ContainsCreateWithoutPrintOrderInput, ContainsUncheckedCreateWithoutPrintOrderInput> | ContainsCreateWithoutPrintOrderInput[] | ContainsUncheckedCreateWithoutPrintOrderInput[]
    connectOrCreate?: ContainsCreateOrConnectWithoutPrintOrderInput | ContainsCreateOrConnectWithoutPrintOrderInput[]
    createMany?: ContainsCreateManyPrintOrderInputEnvelope
    connect?: ContainsWhereUniqueInput | ContainsWhereUniqueInput[]
  }

  export type ContainsUncheckedCreateNestedManyWithoutPrintOrderInput = {
    create?: XOR<ContainsCreateWithoutPrintOrderInput, ContainsUncheckedCreateWithoutPrintOrderInput> | ContainsCreateWithoutPrintOrderInput[] | ContainsUncheckedCreateWithoutPrintOrderInput[]
    connectOrCreate?: ContainsCreateOrConnectWithoutPrintOrderInput | ContainsCreateOrConnectWithoutPrintOrderInput[]
    createMany?: ContainsCreateManyPrintOrderInputEnvelope
    connect?: ContainsWhereUniqueInput | ContainsWhereUniqueInput[]
  }

  export type CustomerUpdateOneRequiredWithoutPrintOrdersNestedInput = {
    create?: XOR<CustomerCreateWithoutPrintOrdersInput, CustomerUncheckedCreateWithoutPrintOrdersInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutPrintOrdersInput
    upsert?: CustomerUpsertWithoutPrintOrdersInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutPrintOrdersInput, CustomerUpdateWithoutPrintOrdersInput>, CustomerUncheckedUpdateWithoutPrintOrdersInput>
  }

  export type ContainsUpdateManyWithoutPrintOrderNestedInput = {
    create?: XOR<ContainsCreateWithoutPrintOrderInput, ContainsUncheckedCreateWithoutPrintOrderInput> | ContainsCreateWithoutPrintOrderInput[] | ContainsUncheckedCreateWithoutPrintOrderInput[]
    connectOrCreate?: ContainsCreateOrConnectWithoutPrintOrderInput | ContainsCreateOrConnectWithoutPrintOrderInput[]
    upsert?: ContainsUpsertWithWhereUniqueWithoutPrintOrderInput | ContainsUpsertWithWhereUniqueWithoutPrintOrderInput[]
    createMany?: ContainsCreateManyPrintOrderInputEnvelope
    set?: ContainsWhereUniqueInput | ContainsWhereUniqueInput[]
    disconnect?: ContainsWhereUniqueInput | ContainsWhereUniqueInput[]
    delete?: ContainsWhereUniqueInput | ContainsWhereUniqueInput[]
    connect?: ContainsWhereUniqueInput | ContainsWhereUniqueInput[]
    update?: ContainsUpdateWithWhereUniqueWithoutPrintOrderInput | ContainsUpdateWithWhereUniqueWithoutPrintOrderInput[]
    updateMany?: ContainsUpdateManyWithWhereWithoutPrintOrderInput | ContainsUpdateManyWithWhereWithoutPrintOrderInput[]
    deleteMany?: ContainsScalarWhereInput | ContainsScalarWhereInput[]
  }

  export type ContainsUncheckedUpdateManyWithoutPrintOrderNestedInput = {
    create?: XOR<ContainsCreateWithoutPrintOrderInput, ContainsUncheckedCreateWithoutPrintOrderInput> | ContainsCreateWithoutPrintOrderInput[] | ContainsUncheckedCreateWithoutPrintOrderInput[]
    connectOrCreate?: ContainsCreateOrConnectWithoutPrintOrderInput | ContainsCreateOrConnectWithoutPrintOrderInput[]
    upsert?: ContainsUpsertWithWhereUniqueWithoutPrintOrderInput | ContainsUpsertWithWhereUniqueWithoutPrintOrderInput[]
    createMany?: ContainsCreateManyPrintOrderInputEnvelope
    set?: ContainsWhereUniqueInput | ContainsWhereUniqueInput[]
    disconnect?: ContainsWhereUniqueInput | ContainsWhereUniqueInput[]
    delete?: ContainsWhereUniqueInput | ContainsWhereUniqueInput[]
    connect?: ContainsWhereUniqueInput | ContainsWhereUniqueInput[]
    update?: ContainsUpdateWithWhereUniqueWithoutPrintOrderInput | ContainsUpdateWithWhereUniqueWithoutPrintOrderInput[]
    updateMany?: ContainsUpdateManyWithWhereWithoutPrintOrderInput | ContainsUpdateManyWithWhereWithoutPrintOrderInput[]
    deleteMany?: ContainsScalarWhereInput | ContainsScalarWhereInput[]
  }

  export type CustomerCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<CustomerCreateWithoutDocumentsInput, CustomerUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutDocumentsInput
    connect?: CustomerWhereUniqueInput
  }

  export type PrinterCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<PrinterCreateWithoutDocumentsInput, PrinterUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: PrinterCreateOrConnectWithoutDocumentsInput
    connect?: PrinterWhereUniqueInput
  }

  export type ContainsCreateNestedManyWithoutDocumentInput = {
    create?: XOR<ContainsCreateWithoutDocumentInput, ContainsUncheckedCreateWithoutDocumentInput> | ContainsCreateWithoutDocumentInput[] | ContainsUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: ContainsCreateOrConnectWithoutDocumentInput | ContainsCreateOrConnectWithoutDocumentInput[]
    createMany?: ContainsCreateManyDocumentInputEnvelope
    connect?: ContainsWhereUniqueInput | ContainsWhereUniqueInput[]
  }

  export type ContainsUncheckedCreateNestedManyWithoutDocumentInput = {
    create?: XOR<ContainsCreateWithoutDocumentInput, ContainsUncheckedCreateWithoutDocumentInput> | ContainsCreateWithoutDocumentInput[] | ContainsUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: ContainsCreateOrConnectWithoutDocumentInput | ContainsCreateOrConnectWithoutDocumentInput[]
    createMany?: ContainsCreateManyDocumentInputEnvelope
    connect?: ContainsWhereUniqueInput | ContainsWhereUniqueInput[]
  }

  export type CustomerUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<CustomerCreateWithoutDocumentsInput, CustomerUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutDocumentsInput
    upsert?: CustomerUpsertWithoutDocumentsInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutDocumentsInput, CustomerUpdateWithoutDocumentsInput>, CustomerUncheckedUpdateWithoutDocumentsInput>
  }

  export type PrinterUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<PrinterCreateWithoutDocumentsInput, PrinterUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: PrinterCreateOrConnectWithoutDocumentsInput
    upsert?: PrinterUpsertWithoutDocumentsInput
    connect?: PrinterWhereUniqueInput
    update?: XOR<XOR<PrinterUpdateToOneWithWhereWithoutDocumentsInput, PrinterUpdateWithoutDocumentsInput>, PrinterUncheckedUpdateWithoutDocumentsInput>
  }

  export type ContainsUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<ContainsCreateWithoutDocumentInput, ContainsUncheckedCreateWithoutDocumentInput> | ContainsCreateWithoutDocumentInput[] | ContainsUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: ContainsCreateOrConnectWithoutDocumentInput | ContainsCreateOrConnectWithoutDocumentInput[]
    upsert?: ContainsUpsertWithWhereUniqueWithoutDocumentInput | ContainsUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: ContainsCreateManyDocumentInputEnvelope
    set?: ContainsWhereUniqueInput | ContainsWhereUniqueInput[]
    disconnect?: ContainsWhereUniqueInput | ContainsWhereUniqueInput[]
    delete?: ContainsWhereUniqueInput | ContainsWhereUniqueInput[]
    connect?: ContainsWhereUniqueInput | ContainsWhereUniqueInput[]
    update?: ContainsUpdateWithWhereUniqueWithoutDocumentInput | ContainsUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: ContainsUpdateManyWithWhereWithoutDocumentInput | ContainsUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: ContainsScalarWhereInput | ContainsScalarWhereInput[]
  }

  export type ContainsUncheckedUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<ContainsCreateWithoutDocumentInput, ContainsUncheckedCreateWithoutDocumentInput> | ContainsCreateWithoutDocumentInput[] | ContainsUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: ContainsCreateOrConnectWithoutDocumentInput | ContainsCreateOrConnectWithoutDocumentInput[]
    upsert?: ContainsUpsertWithWhereUniqueWithoutDocumentInput | ContainsUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: ContainsCreateManyDocumentInputEnvelope
    set?: ContainsWhereUniqueInput | ContainsWhereUniqueInput[]
    disconnect?: ContainsWhereUniqueInput | ContainsWhereUniqueInput[]
    delete?: ContainsWhereUniqueInput | ContainsWhereUniqueInput[]
    connect?: ContainsWhereUniqueInput | ContainsWhereUniqueInput[]
    update?: ContainsUpdateWithWhereUniqueWithoutDocumentInput | ContainsUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: ContainsUpdateManyWithWhereWithoutDocumentInput | ContainsUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: ContainsScalarWhereInput | ContainsScalarWhereInput[]
  }

  export type DocumentCreateNestedOneWithoutContainsInput = {
    create?: XOR<DocumentCreateWithoutContainsInput, DocumentUncheckedCreateWithoutContainsInput>
    connectOrCreate?: DocumentCreateOrConnectWithoutContainsInput
    connect?: DocumentWhereUniqueInput
  }

  export type PrintOrderCreateNestedOneWithoutContainsInput = {
    create?: XOR<PrintOrderCreateWithoutContainsInput, PrintOrderUncheckedCreateWithoutContainsInput>
    connectOrCreate?: PrintOrderCreateOrConnectWithoutContainsInput
    connect?: PrintOrderWhereUniqueInput
  }

  export type DocumentUpdateOneRequiredWithoutContainsNestedInput = {
    create?: XOR<DocumentCreateWithoutContainsInput, DocumentUncheckedCreateWithoutContainsInput>
    connectOrCreate?: DocumentCreateOrConnectWithoutContainsInput
    upsert?: DocumentUpsertWithoutContainsInput
    connect?: DocumentWhereUniqueInput
    update?: XOR<XOR<DocumentUpdateToOneWithWhereWithoutContainsInput, DocumentUpdateWithoutContainsInput>, DocumentUncheckedUpdateWithoutContainsInput>
  }

  export type PrintOrderUpdateOneRequiredWithoutContainsNestedInput = {
    create?: XOR<PrintOrderCreateWithoutContainsInput, PrintOrderUncheckedCreateWithoutContainsInput>
    connectOrCreate?: PrintOrderCreateOrConnectWithoutContainsInput
    upsert?: PrintOrderUpsertWithoutContainsInput
    connect?: PrintOrderWhereUniqueInput
    update?: XOR<XOR<PrintOrderUpdateToOneWithWhereWithoutContainsInput, PrintOrderUpdateWithoutContainsInput>, PrintOrderUncheckedUpdateWithoutContainsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type UserCreateWithoutAdminInput = {
    fname: string
    lname: string
    email: string
    phone: string
    usageHistory?: string | null
    hash: string
    hashedRt?: string | null
    role: string
    createAt?: Date | string
    updateAt?: Date | string
    spsomembers?: SPSOMemberCreateNestedManyWithoutUserInput
    customers?: CustomerCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAdminInput = {
    userId?: number
    fname: string
    lname: string
    email: string
    phone: string
    usageHistory?: string | null
    hash: string
    hashedRt?: string | null
    role: string
    createAt?: Date | string
    updateAt?: Date | string
    spsomembers?: SPSOMemberUncheckedCreateNestedManyWithoutUserInput
    customers?: CustomerUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAdminInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAdminInput, UserUncheckedCreateWithoutAdminInput>
  }

  export type UserCreateManyAdminInputEnvelope = {
    data: UserCreateManyAdminInput | UserCreateManyAdminInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutAdminInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutAdminInput, UserUncheckedUpdateWithoutAdminInput>
    create: XOR<UserCreateWithoutAdminInput, UserUncheckedCreateWithoutAdminInput>
  }

  export type UserUpdateWithWhereUniqueWithoutAdminInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutAdminInput, UserUncheckedUpdateWithoutAdminInput>
  }

  export type UserUpdateManyWithWhereWithoutAdminInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutAdminInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    userId?: IntFilter<"User"> | number
    fname?: StringFilter<"User"> | string
    lname?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    phone?: StringFilter<"User"> | string
    usageHistory?: StringNullableFilter<"User"> | string | null
    hash?: StringFilter<"User"> | string
    hashedRt?: StringNullableFilter<"User"> | string | null
    role?: StringFilter<"User"> | string
    adminEmail?: StringFilter<"User"> | string
    createAt?: DateTimeFilter<"User"> | Date | string
    updateAt?: DateTimeFilter<"User"> | Date | string
  }

  export type AdminCreateWithoutUserInput = {
    adminEmail: string
    password: string
  }

  export type AdminUncheckedCreateWithoutUserInput = {
    adminEmail: string
    password: string
  }

  export type AdminCreateOrConnectWithoutUserInput = {
    where: AdminWhereUniqueInput
    create: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
  }

  export type SPSOMemberCreateWithoutUserInput = {
    dob: Date | string
    address: string
    printers?: PrinterCreateNestedManyWithoutSpsomemberInput
    customers?: CustomerCreateNestedManyWithoutSpsomemberInput
  }

  export type SPSOMemberUncheckedCreateWithoutUserInput = {
    sosoMemberId?: number
    dob: Date | string
    address: string
    printers?: PrinterUncheckedCreateNestedManyWithoutSpsomemberInput
    customers?: CustomerUncheckedCreateNestedManyWithoutSpsomemberInput
  }

  export type SPSOMemberCreateOrConnectWithoutUserInput = {
    where: SPSOMemberWhereUniqueInput
    create: XOR<SPSOMemberCreateWithoutUserInput, SPSOMemberUncheckedCreateWithoutUserInput>
  }

  export type SPSOMemberCreateManyUserInputEnvelope = {
    data: SPSOMemberCreateManyUserInput | SPSOMemberCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CustomerCreateWithoutUserInput = {
    ppHistory?: string | null
    accBalance?: number
    summary?: string | null
    remainPages?: number
    spsomember?: SPSOMemberCreateNestedOneWithoutCustomersInput
    feedbacks?: FeedbackCreateNestedManyWithoutCustomerInput
    pagePurchaseOrders?: PagePurchaseOrderCreateNestedManyWithoutCustomerInput
    printOrders?: PrintOrderCreateNestedManyWithoutCustomerInput
    documents?: DocumentCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutUserInput = {
    customerId?: number
    ppHistory?: string | null
    accBalance?: number
    summary?: string | null
    remainPages?: number
    spsoMemberId?: number | null
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutCustomerInput
    pagePurchaseOrders?: PagePurchaseOrderUncheckedCreateNestedManyWithoutCustomerInput
    printOrders?: PrintOrderUncheckedCreateNestedManyWithoutCustomerInput
    documents?: DocumentUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutUserInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutUserInput, CustomerUncheckedCreateWithoutUserInput>
  }

  export type CustomerCreateManyUserInputEnvelope = {
    data: CustomerCreateManyUserInput | CustomerCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AdminUpsertWithoutUserInput = {
    update: XOR<AdminUpdateWithoutUserInput, AdminUncheckedUpdateWithoutUserInput>
    create: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    where?: AdminWhereInput
  }

  export type AdminUpdateToOneWithWhereWithoutUserInput = {
    where?: AdminWhereInput
    data: XOR<AdminUpdateWithoutUserInput, AdminUncheckedUpdateWithoutUserInput>
  }

  export type AdminUpdateWithoutUserInput = {
    adminEmail?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type AdminUncheckedUpdateWithoutUserInput = {
    adminEmail?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type SPSOMemberUpsertWithWhereUniqueWithoutUserInput = {
    where: SPSOMemberWhereUniqueInput
    update: XOR<SPSOMemberUpdateWithoutUserInput, SPSOMemberUncheckedUpdateWithoutUserInput>
    create: XOR<SPSOMemberCreateWithoutUserInput, SPSOMemberUncheckedCreateWithoutUserInput>
  }

  export type SPSOMemberUpdateWithWhereUniqueWithoutUserInput = {
    where: SPSOMemberWhereUniqueInput
    data: XOR<SPSOMemberUpdateWithoutUserInput, SPSOMemberUncheckedUpdateWithoutUserInput>
  }

  export type SPSOMemberUpdateManyWithWhereWithoutUserInput = {
    where: SPSOMemberScalarWhereInput
    data: XOR<SPSOMemberUpdateManyMutationInput, SPSOMemberUncheckedUpdateManyWithoutUserInput>
  }

  export type SPSOMemberScalarWhereInput = {
    AND?: SPSOMemberScalarWhereInput | SPSOMemberScalarWhereInput[]
    OR?: SPSOMemberScalarWhereInput[]
    NOT?: SPSOMemberScalarWhereInput | SPSOMemberScalarWhereInput[]
    sosoMemberId?: IntFilter<"SPSOMember"> | number
    dob?: DateTimeFilter<"SPSOMember"> | Date | string
    address?: StringFilter<"SPSOMember"> | string
    userId?: IntFilter<"SPSOMember"> | number
  }

  export type CustomerUpsertWithWhereUniqueWithoutUserInput = {
    where: CustomerWhereUniqueInput
    update: XOR<CustomerUpdateWithoutUserInput, CustomerUncheckedUpdateWithoutUserInput>
    create: XOR<CustomerCreateWithoutUserInput, CustomerUncheckedCreateWithoutUserInput>
  }

  export type CustomerUpdateWithWhereUniqueWithoutUserInput = {
    where: CustomerWhereUniqueInput
    data: XOR<CustomerUpdateWithoutUserInput, CustomerUncheckedUpdateWithoutUserInput>
  }

  export type CustomerUpdateManyWithWhereWithoutUserInput = {
    where: CustomerScalarWhereInput
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyWithoutUserInput>
  }

  export type CustomerScalarWhereInput = {
    AND?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
    OR?: CustomerScalarWhereInput[]
    NOT?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
    customerId?: IntFilter<"Customer"> | number
    ppHistory?: StringNullableFilter<"Customer"> | string | null
    accBalance?: FloatFilter<"Customer"> | number
    summary?: StringNullableFilter<"Customer"> | string | null
    remainPages?: IntFilter<"Customer"> | number
    userId?: IntFilter<"Customer"> | number
    spsoMemberId?: IntNullableFilter<"Customer"> | number | null
  }

  export type UserCreateWithoutSpsomembersInput = {
    fname: string
    lname: string
    email: string
    phone: string
    usageHistory?: string | null
    hash: string
    hashedRt?: string | null
    role: string
    createAt?: Date | string
    updateAt?: Date | string
    admin: AdminCreateNestedOneWithoutUserInput
    customers?: CustomerCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSpsomembersInput = {
    userId?: number
    fname: string
    lname: string
    email: string
    phone: string
    usageHistory?: string | null
    hash: string
    hashedRt?: string | null
    role: string
    adminEmail: string
    createAt?: Date | string
    updateAt?: Date | string
    customers?: CustomerUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSpsomembersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSpsomembersInput, UserUncheckedCreateWithoutSpsomembersInput>
  }

  export type PrinterCreateWithoutSpsomemberInput = {
    model: string
    brand: string
    description?: string | null
    facility: string
    building: string
    room: string
    documents?: DocumentCreateNestedManyWithoutPrinterInput
  }

  export type PrinterUncheckedCreateWithoutSpsomemberInput = {
    printerId?: number
    model: string
    brand: string
    description?: string | null
    facility: string
    building: string
    room: string
    documents?: DocumentUncheckedCreateNestedManyWithoutPrinterInput
  }

  export type PrinterCreateOrConnectWithoutSpsomemberInput = {
    where: PrinterWhereUniqueInput
    create: XOR<PrinterCreateWithoutSpsomemberInput, PrinterUncheckedCreateWithoutSpsomemberInput>
  }

  export type PrinterCreateManySpsomemberInputEnvelope = {
    data: PrinterCreateManySpsomemberInput | PrinterCreateManySpsomemberInput[]
    skipDuplicates?: boolean
  }

  export type CustomerCreateWithoutSpsomemberInput = {
    ppHistory?: string | null
    accBalance?: number
    summary?: string | null
    remainPages?: number
    user?: UserCreateNestedOneWithoutCustomersInput
    feedbacks?: FeedbackCreateNestedManyWithoutCustomerInput
    pagePurchaseOrders?: PagePurchaseOrderCreateNestedManyWithoutCustomerInput
    printOrders?: PrintOrderCreateNestedManyWithoutCustomerInput
    documents?: DocumentCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutSpsomemberInput = {
    customerId?: number
    ppHistory?: string | null
    accBalance?: number
    summary?: string | null
    remainPages?: number
    userId: number
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutCustomerInput
    pagePurchaseOrders?: PagePurchaseOrderUncheckedCreateNestedManyWithoutCustomerInput
    printOrders?: PrintOrderUncheckedCreateNestedManyWithoutCustomerInput
    documents?: DocumentUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutSpsomemberInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutSpsomemberInput, CustomerUncheckedCreateWithoutSpsomemberInput>
  }

  export type CustomerCreateManySpsomemberInputEnvelope = {
    data: CustomerCreateManySpsomemberInput | CustomerCreateManySpsomemberInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutSpsomembersInput = {
    update: XOR<UserUpdateWithoutSpsomembersInput, UserUncheckedUpdateWithoutSpsomembersInput>
    create: XOR<UserCreateWithoutSpsomembersInput, UserUncheckedCreateWithoutSpsomembersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSpsomembersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSpsomembersInput, UserUncheckedUpdateWithoutSpsomembersInput>
  }

  export type UserUpdateWithoutSpsomembersInput = {
    fname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    usageHistory?: NullableStringFieldUpdateOperationsInput | string | null
    hash?: StringFieldUpdateOperationsInput | string
    hashedRt?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    admin?: AdminUpdateOneRequiredWithoutUserNestedInput
    customers?: CustomerUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSpsomembersInput = {
    userId?: IntFieldUpdateOperationsInput | number
    fname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    usageHistory?: NullableStringFieldUpdateOperationsInput | string | null
    hash?: StringFieldUpdateOperationsInput | string
    hashedRt?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    adminEmail?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customers?: CustomerUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PrinterUpsertWithWhereUniqueWithoutSpsomemberInput = {
    where: PrinterWhereUniqueInput
    update: XOR<PrinterUpdateWithoutSpsomemberInput, PrinterUncheckedUpdateWithoutSpsomemberInput>
    create: XOR<PrinterCreateWithoutSpsomemberInput, PrinterUncheckedCreateWithoutSpsomemberInput>
  }

  export type PrinterUpdateWithWhereUniqueWithoutSpsomemberInput = {
    where: PrinterWhereUniqueInput
    data: XOR<PrinterUpdateWithoutSpsomemberInput, PrinterUncheckedUpdateWithoutSpsomemberInput>
  }

  export type PrinterUpdateManyWithWhereWithoutSpsomemberInput = {
    where: PrinterScalarWhereInput
    data: XOR<PrinterUpdateManyMutationInput, PrinterUncheckedUpdateManyWithoutSpsomemberInput>
  }

  export type PrinterScalarWhereInput = {
    AND?: PrinterScalarWhereInput | PrinterScalarWhereInput[]
    OR?: PrinterScalarWhereInput[]
    NOT?: PrinterScalarWhereInput | PrinterScalarWhereInput[]
    printerId?: IntFilter<"Printer"> | number
    model?: StringFilter<"Printer"> | string
    brand?: StringFilter<"Printer"> | string
    description?: StringNullableFilter<"Printer"> | string | null
    facility?: StringFilter<"Printer"> | string
    building?: StringFilter<"Printer"> | string
    room?: StringFilter<"Printer"> | string
    spsomemberId?: IntFilter<"Printer"> | number
  }

  export type CustomerUpsertWithWhereUniqueWithoutSpsomemberInput = {
    where: CustomerWhereUniqueInput
    update: XOR<CustomerUpdateWithoutSpsomemberInput, CustomerUncheckedUpdateWithoutSpsomemberInput>
    create: XOR<CustomerCreateWithoutSpsomemberInput, CustomerUncheckedCreateWithoutSpsomemberInput>
  }

  export type CustomerUpdateWithWhereUniqueWithoutSpsomemberInput = {
    where: CustomerWhereUniqueInput
    data: XOR<CustomerUpdateWithoutSpsomemberInput, CustomerUncheckedUpdateWithoutSpsomemberInput>
  }

  export type CustomerUpdateManyWithWhereWithoutSpsomemberInput = {
    where: CustomerScalarWhereInput
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyWithoutSpsomemberInput>
  }

  export type UserCreateWithoutCustomersInput = {
    fname: string
    lname: string
    email: string
    phone: string
    usageHistory?: string | null
    hash: string
    hashedRt?: string | null
    role: string
    createAt?: Date | string
    updateAt?: Date | string
    admin: AdminCreateNestedOneWithoutUserInput
    spsomembers?: SPSOMemberCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCustomersInput = {
    userId?: number
    fname: string
    lname: string
    email: string
    phone: string
    usageHistory?: string | null
    hash: string
    hashedRt?: string | null
    role: string
    adminEmail: string
    createAt?: Date | string
    updateAt?: Date | string
    spsomembers?: SPSOMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCustomersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCustomersInput, UserUncheckedCreateWithoutCustomersInput>
  }

  export type SPSOMemberCreateWithoutCustomersInput = {
    dob: Date | string
    address: string
    user: UserCreateNestedOneWithoutSpsomembersInput
    printers?: PrinterCreateNestedManyWithoutSpsomemberInput
  }

  export type SPSOMemberUncheckedCreateWithoutCustomersInput = {
    sosoMemberId?: number
    dob: Date | string
    address: string
    userId: number
    printers?: PrinterUncheckedCreateNestedManyWithoutSpsomemberInput
  }

  export type SPSOMemberCreateOrConnectWithoutCustomersInput = {
    where: SPSOMemberWhereUniqueInput
    create: XOR<SPSOMemberCreateWithoutCustomersInput, SPSOMemberUncheckedCreateWithoutCustomersInput>
  }

  export type FeedbackCreateWithoutCustomerInput = {
    feedTime: Date | string
    rating: number
    contentByCustomer: string
  }

  export type FeedbackUncheckedCreateWithoutCustomerInput = {
    feedbackId?: number
    feedTime: Date | string
    rating: number
    contentByCustomer: string
  }

  export type FeedbackCreateOrConnectWithoutCustomerInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutCustomerInput, FeedbackUncheckedCreateWithoutCustomerInput>
  }

  export type FeedbackCreateManyCustomerInputEnvelope = {
    data: FeedbackCreateManyCustomerInput | FeedbackCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type PagePurchaseOrderCreateWithoutCustomerInput = {
    purchaseTime: Date | string
    ppoStatus?: string
    pageNum?: number
    price: number
    paymentMethod: string
  }

  export type PagePurchaseOrderUncheckedCreateWithoutCustomerInput = {
    ppoId?: number
    purchaseTime: Date | string
    ppoStatus?: string
    pageNum?: number
    price: number
    paymentMethod: string
  }

  export type PagePurchaseOrderCreateOrConnectWithoutCustomerInput = {
    where: PagePurchaseOrderWhereUniqueInput
    create: XOR<PagePurchaseOrderCreateWithoutCustomerInput, PagePurchaseOrderUncheckedCreateWithoutCustomerInput>
  }

  export type PagePurchaseOrderCreateManyCustomerInputEnvelope = {
    data: PagePurchaseOrderCreateManyCustomerInput | PagePurchaseOrderCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type PrintOrderCreateWithoutCustomerInput = {
    attributes: string
    startTime: Date | string
    endTime: Date | string
    poStatus?: string
    numCopies: number
    contains?: ContainsCreateNestedManyWithoutPrintOrderInput
  }

  export type PrintOrderUncheckedCreateWithoutCustomerInput = {
    printOrderId?: number
    attributes: string
    startTime: Date | string
    endTime: Date | string
    poStatus?: string
    numCopies: number
    contains?: ContainsUncheckedCreateNestedManyWithoutPrintOrderInput
  }

  export type PrintOrderCreateOrConnectWithoutCustomerInput = {
    where: PrintOrderWhereUniqueInput
    create: XOR<PrintOrderCreateWithoutCustomerInput, PrintOrderUncheckedCreateWithoutCustomerInput>
  }

  export type PrintOrderCreateManyCustomerInputEnvelope = {
    data: PrintOrderCreateManyCustomerInput | PrintOrderCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type DocumentCreateWithoutCustomerInput = {
    docName: string
    docQuantity: number
    printer: PrinterCreateNestedOneWithoutDocumentsInput
    contains?: ContainsCreateNestedManyWithoutDocumentInput
  }

  export type DocumentUncheckedCreateWithoutCustomerInput = {
    documentId?: number
    docName: string
    printerId: number
    docQuantity: number
    contains?: ContainsUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type DocumentCreateOrConnectWithoutCustomerInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutCustomerInput, DocumentUncheckedCreateWithoutCustomerInput>
  }

  export type DocumentCreateManyCustomerInputEnvelope = {
    data: DocumentCreateManyCustomerInput | DocumentCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCustomersInput = {
    update: XOR<UserUpdateWithoutCustomersInput, UserUncheckedUpdateWithoutCustomersInput>
    create: XOR<UserCreateWithoutCustomersInput, UserUncheckedCreateWithoutCustomersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCustomersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCustomersInput, UserUncheckedUpdateWithoutCustomersInput>
  }

  export type UserUpdateWithoutCustomersInput = {
    fname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    usageHistory?: NullableStringFieldUpdateOperationsInput | string | null
    hash?: StringFieldUpdateOperationsInput | string
    hashedRt?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    admin?: AdminUpdateOneRequiredWithoutUserNestedInput
    spsomembers?: SPSOMemberUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCustomersInput = {
    userId?: IntFieldUpdateOperationsInput | number
    fname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    usageHistory?: NullableStringFieldUpdateOperationsInput | string | null
    hash?: StringFieldUpdateOperationsInput | string
    hashedRt?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    adminEmail?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spsomembers?: SPSOMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SPSOMemberUpsertWithoutCustomersInput = {
    update: XOR<SPSOMemberUpdateWithoutCustomersInput, SPSOMemberUncheckedUpdateWithoutCustomersInput>
    create: XOR<SPSOMemberCreateWithoutCustomersInput, SPSOMemberUncheckedCreateWithoutCustomersInput>
    where?: SPSOMemberWhereInput
  }

  export type SPSOMemberUpdateToOneWithWhereWithoutCustomersInput = {
    where?: SPSOMemberWhereInput
    data: XOR<SPSOMemberUpdateWithoutCustomersInput, SPSOMemberUncheckedUpdateWithoutCustomersInput>
  }

  export type SPSOMemberUpdateWithoutCustomersInput = {
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutSpsomembersNestedInput
    printers?: PrinterUpdateManyWithoutSpsomemberNestedInput
  }

  export type SPSOMemberUncheckedUpdateWithoutCustomersInput = {
    sosoMemberId?: IntFieldUpdateOperationsInput | number
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    printers?: PrinterUncheckedUpdateManyWithoutSpsomemberNestedInput
  }

  export type FeedbackUpsertWithWhereUniqueWithoutCustomerInput = {
    where: FeedbackWhereUniqueInput
    update: XOR<FeedbackUpdateWithoutCustomerInput, FeedbackUncheckedUpdateWithoutCustomerInput>
    create: XOR<FeedbackCreateWithoutCustomerInput, FeedbackUncheckedCreateWithoutCustomerInput>
  }

  export type FeedbackUpdateWithWhereUniqueWithoutCustomerInput = {
    where: FeedbackWhereUniqueInput
    data: XOR<FeedbackUpdateWithoutCustomerInput, FeedbackUncheckedUpdateWithoutCustomerInput>
  }

  export type FeedbackUpdateManyWithWhereWithoutCustomerInput = {
    where: FeedbackScalarWhereInput
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyWithoutCustomerInput>
  }

  export type FeedbackScalarWhereInput = {
    AND?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
    OR?: FeedbackScalarWhereInput[]
    NOT?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
    feedbackId?: IntFilter<"Feedback"> | number
    customerId?: IntFilter<"Feedback"> | number
    feedTime?: DateTimeFilter<"Feedback"> | Date | string
    rating?: IntFilter<"Feedback"> | number
    contentByCustomer?: StringFilter<"Feedback"> | string
  }

  export type PagePurchaseOrderUpsertWithWhereUniqueWithoutCustomerInput = {
    where: PagePurchaseOrderWhereUniqueInput
    update: XOR<PagePurchaseOrderUpdateWithoutCustomerInput, PagePurchaseOrderUncheckedUpdateWithoutCustomerInput>
    create: XOR<PagePurchaseOrderCreateWithoutCustomerInput, PagePurchaseOrderUncheckedCreateWithoutCustomerInput>
  }

  export type PagePurchaseOrderUpdateWithWhereUniqueWithoutCustomerInput = {
    where: PagePurchaseOrderWhereUniqueInput
    data: XOR<PagePurchaseOrderUpdateWithoutCustomerInput, PagePurchaseOrderUncheckedUpdateWithoutCustomerInput>
  }

  export type PagePurchaseOrderUpdateManyWithWhereWithoutCustomerInput = {
    where: PagePurchaseOrderScalarWhereInput
    data: XOR<PagePurchaseOrderUpdateManyMutationInput, PagePurchaseOrderUncheckedUpdateManyWithoutCustomerInput>
  }

  export type PagePurchaseOrderScalarWhereInput = {
    AND?: PagePurchaseOrderScalarWhereInput | PagePurchaseOrderScalarWhereInput[]
    OR?: PagePurchaseOrderScalarWhereInput[]
    NOT?: PagePurchaseOrderScalarWhereInput | PagePurchaseOrderScalarWhereInput[]
    ppoId?: IntFilter<"PagePurchaseOrder"> | number
    purchaseTime?: DateTimeFilter<"PagePurchaseOrder"> | Date | string
    customerId?: IntFilter<"PagePurchaseOrder"> | number
    ppoStatus?: StringFilter<"PagePurchaseOrder"> | string
    pageNum?: IntFilter<"PagePurchaseOrder"> | number
    price?: FloatFilter<"PagePurchaseOrder"> | number
    paymentMethod?: StringFilter<"PagePurchaseOrder"> | string
  }

  export type PrintOrderUpsertWithWhereUniqueWithoutCustomerInput = {
    where: PrintOrderWhereUniqueInput
    update: XOR<PrintOrderUpdateWithoutCustomerInput, PrintOrderUncheckedUpdateWithoutCustomerInput>
    create: XOR<PrintOrderCreateWithoutCustomerInput, PrintOrderUncheckedCreateWithoutCustomerInput>
  }

  export type PrintOrderUpdateWithWhereUniqueWithoutCustomerInput = {
    where: PrintOrderWhereUniqueInput
    data: XOR<PrintOrderUpdateWithoutCustomerInput, PrintOrderUncheckedUpdateWithoutCustomerInput>
  }

  export type PrintOrderUpdateManyWithWhereWithoutCustomerInput = {
    where: PrintOrderScalarWhereInput
    data: XOR<PrintOrderUpdateManyMutationInput, PrintOrderUncheckedUpdateManyWithoutCustomerInput>
  }

  export type PrintOrderScalarWhereInput = {
    AND?: PrintOrderScalarWhereInput | PrintOrderScalarWhereInput[]
    OR?: PrintOrderScalarWhereInput[]
    NOT?: PrintOrderScalarWhereInput | PrintOrderScalarWhereInput[]
    printOrderId?: IntFilter<"PrintOrder"> | number
    attributes?: StringFilter<"PrintOrder"> | string
    startTime?: DateTimeFilter<"PrintOrder"> | Date | string
    endTime?: DateTimeFilter<"PrintOrder"> | Date | string
    poStatus?: StringFilter<"PrintOrder"> | string
    numCopies?: IntFilter<"PrintOrder"> | number
    customerId?: IntFilter<"PrintOrder"> | number
  }

  export type DocumentUpsertWithWhereUniqueWithoutCustomerInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutCustomerInput, DocumentUncheckedUpdateWithoutCustomerInput>
    create: XOR<DocumentCreateWithoutCustomerInput, DocumentUncheckedCreateWithoutCustomerInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutCustomerInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutCustomerInput, DocumentUncheckedUpdateWithoutCustomerInput>
  }

  export type DocumentUpdateManyWithWhereWithoutCustomerInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutCustomerInput>
  }

  export type DocumentScalarWhereInput = {
    AND?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    OR?: DocumentScalarWhereInput[]
    NOT?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    documentId?: IntFilter<"Document"> | number
    docName?: StringFilter<"Document"> | string
    customerId?: IntFilter<"Document"> | number
    printerId?: IntFilter<"Document"> | number
    docQuantity?: IntFilter<"Document"> | number
  }

  export type CustomerCreateWithoutFeedbacksInput = {
    ppHistory?: string | null
    accBalance?: number
    summary?: string | null
    remainPages?: number
    user?: UserCreateNestedOneWithoutCustomersInput
    spsomember?: SPSOMemberCreateNestedOneWithoutCustomersInput
    pagePurchaseOrders?: PagePurchaseOrderCreateNestedManyWithoutCustomerInput
    printOrders?: PrintOrderCreateNestedManyWithoutCustomerInput
    documents?: DocumentCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutFeedbacksInput = {
    customerId?: number
    ppHistory?: string | null
    accBalance?: number
    summary?: string | null
    remainPages?: number
    userId: number
    spsoMemberId?: number | null
    pagePurchaseOrders?: PagePurchaseOrderUncheckedCreateNestedManyWithoutCustomerInput
    printOrders?: PrintOrderUncheckedCreateNestedManyWithoutCustomerInput
    documents?: DocumentUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutFeedbacksInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutFeedbacksInput, CustomerUncheckedCreateWithoutFeedbacksInput>
  }

  export type CustomerUpsertWithoutFeedbacksInput = {
    update: XOR<CustomerUpdateWithoutFeedbacksInput, CustomerUncheckedUpdateWithoutFeedbacksInput>
    create: XOR<CustomerCreateWithoutFeedbacksInput, CustomerUncheckedCreateWithoutFeedbacksInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutFeedbacksInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutFeedbacksInput, CustomerUncheckedUpdateWithoutFeedbacksInput>
  }

  export type CustomerUpdateWithoutFeedbacksInput = {
    ppHistory?: NullableStringFieldUpdateOperationsInput | string | null
    accBalance?: FloatFieldUpdateOperationsInput | number
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    remainPages?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutCustomersNestedInput
    spsomember?: SPSOMemberUpdateOneWithoutCustomersNestedInput
    pagePurchaseOrders?: PagePurchaseOrderUpdateManyWithoutCustomerNestedInput
    printOrders?: PrintOrderUpdateManyWithoutCustomerNestedInput
    documents?: DocumentUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutFeedbacksInput = {
    customerId?: IntFieldUpdateOperationsInput | number
    ppHistory?: NullableStringFieldUpdateOperationsInput | string | null
    accBalance?: FloatFieldUpdateOperationsInput | number
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    remainPages?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    spsoMemberId?: NullableIntFieldUpdateOperationsInput | number | null
    pagePurchaseOrders?: PagePurchaseOrderUncheckedUpdateManyWithoutCustomerNestedInput
    printOrders?: PrintOrderUncheckedUpdateManyWithoutCustomerNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type SPSOMemberCreateWithoutPrintersInput = {
    dob: Date | string
    address: string
    user: UserCreateNestedOneWithoutSpsomembersInput
    customers?: CustomerCreateNestedManyWithoutSpsomemberInput
  }

  export type SPSOMemberUncheckedCreateWithoutPrintersInput = {
    sosoMemberId?: number
    dob: Date | string
    address: string
    userId: number
    customers?: CustomerUncheckedCreateNestedManyWithoutSpsomemberInput
  }

  export type SPSOMemberCreateOrConnectWithoutPrintersInput = {
    where: SPSOMemberWhereUniqueInput
    create: XOR<SPSOMemberCreateWithoutPrintersInput, SPSOMemberUncheckedCreateWithoutPrintersInput>
  }

  export type DocumentCreateWithoutPrinterInput = {
    docName: string
    docQuantity: number
    customer: CustomerCreateNestedOneWithoutDocumentsInput
    contains?: ContainsCreateNestedManyWithoutDocumentInput
  }

  export type DocumentUncheckedCreateWithoutPrinterInput = {
    documentId?: number
    docName: string
    customerId: number
    docQuantity: number
    contains?: ContainsUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type DocumentCreateOrConnectWithoutPrinterInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutPrinterInput, DocumentUncheckedCreateWithoutPrinterInput>
  }

  export type DocumentCreateManyPrinterInputEnvelope = {
    data: DocumentCreateManyPrinterInput | DocumentCreateManyPrinterInput[]
    skipDuplicates?: boolean
  }

  export type SPSOMemberUpsertWithoutPrintersInput = {
    update: XOR<SPSOMemberUpdateWithoutPrintersInput, SPSOMemberUncheckedUpdateWithoutPrintersInput>
    create: XOR<SPSOMemberCreateWithoutPrintersInput, SPSOMemberUncheckedCreateWithoutPrintersInput>
    where?: SPSOMemberWhereInput
  }

  export type SPSOMemberUpdateToOneWithWhereWithoutPrintersInput = {
    where?: SPSOMemberWhereInput
    data: XOR<SPSOMemberUpdateWithoutPrintersInput, SPSOMemberUncheckedUpdateWithoutPrintersInput>
  }

  export type SPSOMemberUpdateWithoutPrintersInput = {
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutSpsomembersNestedInput
    customers?: CustomerUpdateManyWithoutSpsomemberNestedInput
  }

  export type SPSOMemberUncheckedUpdateWithoutPrintersInput = {
    sosoMemberId?: IntFieldUpdateOperationsInput | number
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    customers?: CustomerUncheckedUpdateManyWithoutSpsomemberNestedInput
  }

  export type DocumentUpsertWithWhereUniqueWithoutPrinterInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutPrinterInput, DocumentUncheckedUpdateWithoutPrinterInput>
    create: XOR<DocumentCreateWithoutPrinterInput, DocumentUncheckedCreateWithoutPrinterInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutPrinterInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutPrinterInput, DocumentUncheckedUpdateWithoutPrinterInput>
  }

  export type DocumentUpdateManyWithWhereWithoutPrinterInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutPrinterInput>
  }

  export type CustomerCreateWithoutPagePurchaseOrdersInput = {
    ppHistory?: string | null
    accBalance?: number
    summary?: string | null
    remainPages?: number
    user?: UserCreateNestedOneWithoutCustomersInput
    spsomember?: SPSOMemberCreateNestedOneWithoutCustomersInput
    feedbacks?: FeedbackCreateNestedManyWithoutCustomerInput
    printOrders?: PrintOrderCreateNestedManyWithoutCustomerInput
    documents?: DocumentCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutPagePurchaseOrdersInput = {
    customerId?: number
    ppHistory?: string | null
    accBalance?: number
    summary?: string | null
    remainPages?: number
    userId: number
    spsoMemberId?: number | null
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutCustomerInput
    printOrders?: PrintOrderUncheckedCreateNestedManyWithoutCustomerInput
    documents?: DocumentUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutPagePurchaseOrdersInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutPagePurchaseOrdersInput, CustomerUncheckedCreateWithoutPagePurchaseOrdersInput>
  }

  export type CustomerUpsertWithoutPagePurchaseOrdersInput = {
    update: XOR<CustomerUpdateWithoutPagePurchaseOrdersInput, CustomerUncheckedUpdateWithoutPagePurchaseOrdersInput>
    create: XOR<CustomerCreateWithoutPagePurchaseOrdersInput, CustomerUncheckedCreateWithoutPagePurchaseOrdersInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutPagePurchaseOrdersInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutPagePurchaseOrdersInput, CustomerUncheckedUpdateWithoutPagePurchaseOrdersInput>
  }

  export type CustomerUpdateWithoutPagePurchaseOrdersInput = {
    ppHistory?: NullableStringFieldUpdateOperationsInput | string | null
    accBalance?: FloatFieldUpdateOperationsInput | number
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    remainPages?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutCustomersNestedInput
    spsomember?: SPSOMemberUpdateOneWithoutCustomersNestedInput
    feedbacks?: FeedbackUpdateManyWithoutCustomerNestedInput
    printOrders?: PrintOrderUpdateManyWithoutCustomerNestedInput
    documents?: DocumentUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutPagePurchaseOrdersInput = {
    customerId?: IntFieldUpdateOperationsInput | number
    ppHistory?: NullableStringFieldUpdateOperationsInput | string | null
    accBalance?: FloatFieldUpdateOperationsInput | number
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    remainPages?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    spsoMemberId?: NullableIntFieldUpdateOperationsInput | number | null
    feedbacks?: FeedbackUncheckedUpdateManyWithoutCustomerNestedInput
    printOrders?: PrintOrderUncheckedUpdateManyWithoutCustomerNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerCreateWithoutPrintOrdersInput = {
    ppHistory?: string | null
    accBalance?: number
    summary?: string | null
    remainPages?: number
    user?: UserCreateNestedOneWithoutCustomersInput
    spsomember?: SPSOMemberCreateNestedOneWithoutCustomersInput
    feedbacks?: FeedbackCreateNestedManyWithoutCustomerInput
    pagePurchaseOrders?: PagePurchaseOrderCreateNestedManyWithoutCustomerInput
    documents?: DocumentCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutPrintOrdersInput = {
    customerId?: number
    ppHistory?: string | null
    accBalance?: number
    summary?: string | null
    remainPages?: number
    userId: number
    spsoMemberId?: number | null
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutCustomerInput
    pagePurchaseOrders?: PagePurchaseOrderUncheckedCreateNestedManyWithoutCustomerInput
    documents?: DocumentUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutPrintOrdersInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutPrintOrdersInput, CustomerUncheckedCreateWithoutPrintOrdersInput>
  }

  export type ContainsCreateWithoutPrintOrderInput = {
    document: DocumentCreateNestedOneWithoutContainsInput
  }

  export type ContainsUncheckedCreateWithoutPrintOrderInput = {
    id?: number
    documentId: number
  }

  export type ContainsCreateOrConnectWithoutPrintOrderInput = {
    where: ContainsWhereUniqueInput
    create: XOR<ContainsCreateWithoutPrintOrderInput, ContainsUncheckedCreateWithoutPrintOrderInput>
  }

  export type ContainsCreateManyPrintOrderInputEnvelope = {
    data: ContainsCreateManyPrintOrderInput | ContainsCreateManyPrintOrderInput[]
    skipDuplicates?: boolean
  }

  export type CustomerUpsertWithoutPrintOrdersInput = {
    update: XOR<CustomerUpdateWithoutPrintOrdersInput, CustomerUncheckedUpdateWithoutPrintOrdersInput>
    create: XOR<CustomerCreateWithoutPrintOrdersInput, CustomerUncheckedCreateWithoutPrintOrdersInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutPrintOrdersInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutPrintOrdersInput, CustomerUncheckedUpdateWithoutPrintOrdersInput>
  }

  export type CustomerUpdateWithoutPrintOrdersInput = {
    ppHistory?: NullableStringFieldUpdateOperationsInput | string | null
    accBalance?: FloatFieldUpdateOperationsInput | number
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    remainPages?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutCustomersNestedInput
    spsomember?: SPSOMemberUpdateOneWithoutCustomersNestedInput
    feedbacks?: FeedbackUpdateManyWithoutCustomerNestedInput
    pagePurchaseOrders?: PagePurchaseOrderUpdateManyWithoutCustomerNestedInput
    documents?: DocumentUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutPrintOrdersInput = {
    customerId?: IntFieldUpdateOperationsInput | number
    ppHistory?: NullableStringFieldUpdateOperationsInput | string | null
    accBalance?: FloatFieldUpdateOperationsInput | number
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    remainPages?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    spsoMemberId?: NullableIntFieldUpdateOperationsInput | number | null
    feedbacks?: FeedbackUncheckedUpdateManyWithoutCustomerNestedInput
    pagePurchaseOrders?: PagePurchaseOrderUncheckedUpdateManyWithoutCustomerNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type ContainsUpsertWithWhereUniqueWithoutPrintOrderInput = {
    where: ContainsWhereUniqueInput
    update: XOR<ContainsUpdateWithoutPrintOrderInput, ContainsUncheckedUpdateWithoutPrintOrderInput>
    create: XOR<ContainsCreateWithoutPrintOrderInput, ContainsUncheckedCreateWithoutPrintOrderInput>
  }

  export type ContainsUpdateWithWhereUniqueWithoutPrintOrderInput = {
    where: ContainsWhereUniqueInput
    data: XOR<ContainsUpdateWithoutPrintOrderInput, ContainsUncheckedUpdateWithoutPrintOrderInput>
  }

  export type ContainsUpdateManyWithWhereWithoutPrintOrderInput = {
    where: ContainsScalarWhereInput
    data: XOR<ContainsUpdateManyMutationInput, ContainsUncheckedUpdateManyWithoutPrintOrderInput>
  }

  export type ContainsScalarWhereInput = {
    AND?: ContainsScalarWhereInput | ContainsScalarWhereInput[]
    OR?: ContainsScalarWhereInput[]
    NOT?: ContainsScalarWhereInput | ContainsScalarWhereInput[]
    id?: IntFilter<"Contains"> | number
    documentId?: IntFilter<"Contains"> | number
    printOrderId?: IntFilter<"Contains"> | number
  }

  export type CustomerCreateWithoutDocumentsInput = {
    ppHistory?: string | null
    accBalance?: number
    summary?: string | null
    remainPages?: number
    user?: UserCreateNestedOneWithoutCustomersInput
    spsomember?: SPSOMemberCreateNestedOneWithoutCustomersInput
    feedbacks?: FeedbackCreateNestedManyWithoutCustomerInput
    pagePurchaseOrders?: PagePurchaseOrderCreateNestedManyWithoutCustomerInput
    printOrders?: PrintOrderCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutDocumentsInput = {
    customerId?: number
    ppHistory?: string | null
    accBalance?: number
    summary?: string | null
    remainPages?: number
    userId: number
    spsoMemberId?: number | null
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutCustomerInput
    pagePurchaseOrders?: PagePurchaseOrderUncheckedCreateNestedManyWithoutCustomerInput
    printOrders?: PrintOrderUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutDocumentsInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutDocumentsInput, CustomerUncheckedCreateWithoutDocumentsInput>
  }

  export type PrinterCreateWithoutDocumentsInput = {
    model: string
    brand: string
    description?: string | null
    facility: string
    building: string
    room: string
    spsomember: SPSOMemberCreateNestedOneWithoutPrintersInput
  }

  export type PrinterUncheckedCreateWithoutDocumentsInput = {
    printerId?: number
    model: string
    brand: string
    description?: string | null
    facility: string
    building: string
    room: string
    spsomemberId: number
  }

  export type PrinterCreateOrConnectWithoutDocumentsInput = {
    where: PrinterWhereUniqueInput
    create: XOR<PrinterCreateWithoutDocumentsInput, PrinterUncheckedCreateWithoutDocumentsInput>
  }

  export type ContainsCreateWithoutDocumentInput = {
    printOrder: PrintOrderCreateNestedOneWithoutContainsInput
  }

  export type ContainsUncheckedCreateWithoutDocumentInput = {
    id?: number
    printOrderId: number
  }

  export type ContainsCreateOrConnectWithoutDocumentInput = {
    where: ContainsWhereUniqueInput
    create: XOR<ContainsCreateWithoutDocumentInput, ContainsUncheckedCreateWithoutDocumentInput>
  }

  export type ContainsCreateManyDocumentInputEnvelope = {
    data: ContainsCreateManyDocumentInput | ContainsCreateManyDocumentInput[]
    skipDuplicates?: boolean
  }

  export type CustomerUpsertWithoutDocumentsInput = {
    update: XOR<CustomerUpdateWithoutDocumentsInput, CustomerUncheckedUpdateWithoutDocumentsInput>
    create: XOR<CustomerCreateWithoutDocumentsInput, CustomerUncheckedCreateWithoutDocumentsInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutDocumentsInput, CustomerUncheckedUpdateWithoutDocumentsInput>
  }

  export type CustomerUpdateWithoutDocumentsInput = {
    ppHistory?: NullableStringFieldUpdateOperationsInput | string | null
    accBalance?: FloatFieldUpdateOperationsInput | number
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    remainPages?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutCustomersNestedInput
    spsomember?: SPSOMemberUpdateOneWithoutCustomersNestedInput
    feedbacks?: FeedbackUpdateManyWithoutCustomerNestedInput
    pagePurchaseOrders?: PagePurchaseOrderUpdateManyWithoutCustomerNestedInput
    printOrders?: PrintOrderUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutDocumentsInput = {
    customerId?: IntFieldUpdateOperationsInput | number
    ppHistory?: NullableStringFieldUpdateOperationsInput | string | null
    accBalance?: FloatFieldUpdateOperationsInput | number
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    remainPages?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    spsoMemberId?: NullableIntFieldUpdateOperationsInput | number | null
    feedbacks?: FeedbackUncheckedUpdateManyWithoutCustomerNestedInput
    pagePurchaseOrders?: PagePurchaseOrderUncheckedUpdateManyWithoutCustomerNestedInput
    printOrders?: PrintOrderUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type PrinterUpsertWithoutDocumentsInput = {
    update: XOR<PrinterUpdateWithoutDocumentsInput, PrinterUncheckedUpdateWithoutDocumentsInput>
    create: XOR<PrinterCreateWithoutDocumentsInput, PrinterUncheckedCreateWithoutDocumentsInput>
    where?: PrinterWhereInput
  }

  export type PrinterUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: PrinterWhereInput
    data: XOR<PrinterUpdateWithoutDocumentsInput, PrinterUncheckedUpdateWithoutDocumentsInput>
  }

  export type PrinterUpdateWithoutDocumentsInput = {
    model?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    facility?: StringFieldUpdateOperationsInput | string
    building?: StringFieldUpdateOperationsInput | string
    room?: StringFieldUpdateOperationsInput | string
    spsomember?: SPSOMemberUpdateOneRequiredWithoutPrintersNestedInput
  }

  export type PrinterUncheckedUpdateWithoutDocumentsInput = {
    printerId?: IntFieldUpdateOperationsInput | number
    model?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    facility?: StringFieldUpdateOperationsInput | string
    building?: StringFieldUpdateOperationsInput | string
    room?: StringFieldUpdateOperationsInput | string
    spsomemberId?: IntFieldUpdateOperationsInput | number
  }

  export type ContainsUpsertWithWhereUniqueWithoutDocumentInput = {
    where: ContainsWhereUniqueInput
    update: XOR<ContainsUpdateWithoutDocumentInput, ContainsUncheckedUpdateWithoutDocumentInput>
    create: XOR<ContainsCreateWithoutDocumentInput, ContainsUncheckedCreateWithoutDocumentInput>
  }

  export type ContainsUpdateWithWhereUniqueWithoutDocumentInput = {
    where: ContainsWhereUniqueInput
    data: XOR<ContainsUpdateWithoutDocumentInput, ContainsUncheckedUpdateWithoutDocumentInput>
  }

  export type ContainsUpdateManyWithWhereWithoutDocumentInput = {
    where: ContainsScalarWhereInput
    data: XOR<ContainsUpdateManyMutationInput, ContainsUncheckedUpdateManyWithoutDocumentInput>
  }

  export type DocumentCreateWithoutContainsInput = {
    docName: string
    docQuantity: number
    customer: CustomerCreateNestedOneWithoutDocumentsInput
    printer: PrinterCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateWithoutContainsInput = {
    documentId?: number
    docName: string
    customerId: number
    printerId: number
    docQuantity: number
  }

  export type DocumentCreateOrConnectWithoutContainsInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutContainsInput, DocumentUncheckedCreateWithoutContainsInput>
  }

  export type PrintOrderCreateWithoutContainsInput = {
    attributes: string
    startTime: Date | string
    endTime: Date | string
    poStatus?: string
    numCopies: number
    customer: CustomerCreateNestedOneWithoutPrintOrdersInput
  }

  export type PrintOrderUncheckedCreateWithoutContainsInput = {
    printOrderId?: number
    attributes: string
    startTime: Date | string
    endTime: Date | string
    poStatus?: string
    numCopies: number
    customerId: number
  }

  export type PrintOrderCreateOrConnectWithoutContainsInput = {
    where: PrintOrderWhereUniqueInput
    create: XOR<PrintOrderCreateWithoutContainsInput, PrintOrderUncheckedCreateWithoutContainsInput>
  }

  export type DocumentUpsertWithoutContainsInput = {
    update: XOR<DocumentUpdateWithoutContainsInput, DocumentUncheckedUpdateWithoutContainsInput>
    create: XOR<DocumentCreateWithoutContainsInput, DocumentUncheckedCreateWithoutContainsInput>
    where?: DocumentWhereInput
  }

  export type DocumentUpdateToOneWithWhereWithoutContainsInput = {
    where?: DocumentWhereInput
    data: XOR<DocumentUpdateWithoutContainsInput, DocumentUncheckedUpdateWithoutContainsInput>
  }

  export type DocumentUpdateWithoutContainsInput = {
    docName?: StringFieldUpdateOperationsInput | string
    docQuantity?: IntFieldUpdateOperationsInput | number
    customer?: CustomerUpdateOneRequiredWithoutDocumentsNestedInput
    printer?: PrinterUpdateOneRequiredWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateWithoutContainsInput = {
    documentId?: IntFieldUpdateOperationsInput | number
    docName?: StringFieldUpdateOperationsInput | string
    customerId?: IntFieldUpdateOperationsInput | number
    printerId?: IntFieldUpdateOperationsInput | number
    docQuantity?: IntFieldUpdateOperationsInput | number
  }

  export type PrintOrderUpsertWithoutContainsInput = {
    update: XOR<PrintOrderUpdateWithoutContainsInput, PrintOrderUncheckedUpdateWithoutContainsInput>
    create: XOR<PrintOrderCreateWithoutContainsInput, PrintOrderUncheckedCreateWithoutContainsInput>
    where?: PrintOrderWhereInput
  }

  export type PrintOrderUpdateToOneWithWhereWithoutContainsInput = {
    where?: PrintOrderWhereInput
    data: XOR<PrintOrderUpdateWithoutContainsInput, PrintOrderUncheckedUpdateWithoutContainsInput>
  }

  export type PrintOrderUpdateWithoutContainsInput = {
    attributes?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    poStatus?: StringFieldUpdateOperationsInput | string
    numCopies?: IntFieldUpdateOperationsInput | number
    customer?: CustomerUpdateOneRequiredWithoutPrintOrdersNestedInput
  }

  export type PrintOrderUncheckedUpdateWithoutContainsInput = {
    printOrderId?: IntFieldUpdateOperationsInput | number
    attributes?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    poStatus?: StringFieldUpdateOperationsInput | string
    numCopies?: IntFieldUpdateOperationsInput | number
    customerId?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateManyAdminInput = {
    userId?: number
    fname: string
    lname: string
    email: string
    phone: string
    usageHistory?: string | null
    hash: string
    hashedRt?: string | null
    role: string
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type UserUpdateWithoutAdminInput = {
    fname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    usageHistory?: NullableStringFieldUpdateOperationsInput | string | null
    hash?: StringFieldUpdateOperationsInput | string
    hashedRt?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spsomembers?: SPSOMemberUpdateManyWithoutUserNestedInput
    customers?: CustomerUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAdminInput = {
    userId?: IntFieldUpdateOperationsInput | number
    fname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    usageHistory?: NullableStringFieldUpdateOperationsInput | string | null
    hash?: StringFieldUpdateOperationsInput | string
    hashedRt?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spsomembers?: SPSOMemberUncheckedUpdateManyWithoutUserNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutAdminInput = {
    userId?: IntFieldUpdateOperationsInput | number
    fname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    usageHistory?: NullableStringFieldUpdateOperationsInput | string | null
    hash?: StringFieldUpdateOperationsInput | string
    hashedRt?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SPSOMemberCreateManyUserInput = {
    sosoMemberId?: number
    dob: Date | string
    address: string
  }

  export type CustomerCreateManyUserInput = {
    customerId?: number
    ppHistory?: string | null
    accBalance?: number
    summary?: string | null
    remainPages?: number
    spsoMemberId?: number | null
  }

  export type SPSOMemberUpdateWithoutUserInput = {
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    printers?: PrinterUpdateManyWithoutSpsomemberNestedInput
    customers?: CustomerUpdateManyWithoutSpsomemberNestedInput
  }

  export type SPSOMemberUncheckedUpdateWithoutUserInput = {
    sosoMemberId?: IntFieldUpdateOperationsInput | number
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    printers?: PrinterUncheckedUpdateManyWithoutSpsomemberNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutSpsomemberNestedInput
  }

  export type SPSOMemberUncheckedUpdateManyWithoutUserInput = {
    sosoMemberId?: IntFieldUpdateOperationsInput | number
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
  }

  export type CustomerUpdateWithoutUserInput = {
    ppHistory?: NullableStringFieldUpdateOperationsInput | string | null
    accBalance?: FloatFieldUpdateOperationsInput | number
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    remainPages?: IntFieldUpdateOperationsInput | number
    spsomember?: SPSOMemberUpdateOneWithoutCustomersNestedInput
    feedbacks?: FeedbackUpdateManyWithoutCustomerNestedInput
    pagePurchaseOrders?: PagePurchaseOrderUpdateManyWithoutCustomerNestedInput
    printOrders?: PrintOrderUpdateManyWithoutCustomerNestedInput
    documents?: DocumentUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutUserInput = {
    customerId?: IntFieldUpdateOperationsInput | number
    ppHistory?: NullableStringFieldUpdateOperationsInput | string | null
    accBalance?: FloatFieldUpdateOperationsInput | number
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    remainPages?: IntFieldUpdateOperationsInput | number
    spsoMemberId?: NullableIntFieldUpdateOperationsInput | number | null
    feedbacks?: FeedbackUncheckedUpdateManyWithoutCustomerNestedInput
    pagePurchaseOrders?: PagePurchaseOrderUncheckedUpdateManyWithoutCustomerNestedInput
    printOrders?: PrintOrderUncheckedUpdateManyWithoutCustomerNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateManyWithoutUserInput = {
    customerId?: IntFieldUpdateOperationsInput | number
    ppHistory?: NullableStringFieldUpdateOperationsInput | string | null
    accBalance?: FloatFieldUpdateOperationsInput | number
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    remainPages?: IntFieldUpdateOperationsInput | number
    spsoMemberId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PrinterCreateManySpsomemberInput = {
    printerId?: number
    model: string
    brand: string
    description?: string | null
    facility: string
    building: string
    room: string
  }

  export type CustomerCreateManySpsomemberInput = {
    customerId?: number
    ppHistory?: string | null
    accBalance?: number
    summary?: string | null
    remainPages?: number
    userId: number
  }

  export type PrinterUpdateWithoutSpsomemberInput = {
    model?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    facility?: StringFieldUpdateOperationsInput | string
    building?: StringFieldUpdateOperationsInput | string
    room?: StringFieldUpdateOperationsInput | string
    documents?: DocumentUpdateManyWithoutPrinterNestedInput
  }

  export type PrinterUncheckedUpdateWithoutSpsomemberInput = {
    printerId?: IntFieldUpdateOperationsInput | number
    model?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    facility?: StringFieldUpdateOperationsInput | string
    building?: StringFieldUpdateOperationsInput | string
    room?: StringFieldUpdateOperationsInput | string
    documents?: DocumentUncheckedUpdateManyWithoutPrinterNestedInput
  }

  export type PrinterUncheckedUpdateManyWithoutSpsomemberInput = {
    printerId?: IntFieldUpdateOperationsInput | number
    model?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    facility?: StringFieldUpdateOperationsInput | string
    building?: StringFieldUpdateOperationsInput | string
    room?: StringFieldUpdateOperationsInput | string
  }

  export type CustomerUpdateWithoutSpsomemberInput = {
    ppHistory?: NullableStringFieldUpdateOperationsInput | string | null
    accBalance?: FloatFieldUpdateOperationsInput | number
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    remainPages?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutCustomersNestedInput
    feedbacks?: FeedbackUpdateManyWithoutCustomerNestedInput
    pagePurchaseOrders?: PagePurchaseOrderUpdateManyWithoutCustomerNestedInput
    printOrders?: PrintOrderUpdateManyWithoutCustomerNestedInput
    documents?: DocumentUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutSpsomemberInput = {
    customerId?: IntFieldUpdateOperationsInput | number
    ppHistory?: NullableStringFieldUpdateOperationsInput | string | null
    accBalance?: FloatFieldUpdateOperationsInput | number
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    remainPages?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    feedbacks?: FeedbackUncheckedUpdateManyWithoutCustomerNestedInput
    pagePurchaseOrders?: PagePurchaseOrderUncheckedUpdateManyWithoutCustomerNestedInput
    printOrders?: PrintOrderUncheckedUpdateManyWithoutCustomerNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateManyWithoutSpsomemberInput = {
    customerId?: IntFieldUpdateOperationsInput | number
    ppHistory?: NullableStringFieldUpdateOperationsInput | string | null
    accBalance?: FloatFieldUpdateOperationsInput | number
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    remainPages?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type FeedbackCreateManyCustomerInput = {
    feedbackId?: number
    feedTime: Date | string
    rating: number
    contentByCustomer: string
  }

  export type PagePurchaseOrderCreateManyCustomerInput = {
    ppoId?: number
    purchaseTime: Date | string
    ppoStatus?: string
    pageNum?: number
    price: number
    paymentMethod: string
  }

  export type PrintOrderCreateManyCustomerInput = {
    printOrderId?: number
    attributes: string
    startTime: Date | string
    endTime: Date | string
    poStatus?: string
    numCopies: number
  }

  export type DocumentCreateManyCustomerInput = {
    documentId?: number
    docName: string
    printerId: number
    docQuantity: number
  }

  export type FeedbackUpdateWithoutCustomerInput = {
    feedTime?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
    contentByCustomer?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackUncheckedUpdateWithoutCustomerInput = {
    feedbackId?: IntFieldUpdateOperationsInput | number
    feedTime?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
    contentByCustomer?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackUncheckedUpdateManyWithoutCustomerInput = {
    feedbackId?: IntFieldUpdateOperationsInput | number
    feedTime?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
    contentByCustomer?: StringFieldUpdateOperationsInput | string
  }

  export type PagePurchaseOrderUpdateWithoutCustomerInput = {
    purchaseTime?: DateTimeFieldUpdateOperationsInput | Date | string
    ppoStatus?: StringFieldUpdateOperationsInput | string
    pageNum?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
  }

  export type PagePurchaseOrderUncheckedUpdateWithoutCustomerInput = {
    ppoId?: IntFieldUpdateOperationsInput | number
    purchaseTime?: DateTimeFieldUpdateOperationsInput | Date | string
    ppoStatus?: StringFieldUpdateOperationsInput | string
    pageNum?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
  }

  export type PagePurchaseOrderUncheckedUpdateManyWithoutCustomerInput = {
    ppoId?: IntFieldUpdateOperationsInput | number
    purchaseTime?: DateTimeFieldUpdateOperationsInput | Date | string
    ppoStatus?: StringFieldUpdateOperationsInput | string
    pageNum?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
  }

  export type PrintOrderUpdateWithoutCustomerInput = {
    attributes?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    poStatus?: StringFieldUpdateOperationsInput | string
    numCopies?: IntFieldUpdateOperationsInput | number
    contains?: ContainsUpdateManyWithoutPrintOrderNestedInput
  }

  export type PrintOrderUncheckedUpdateWithoutCustomerInput = {
    printOrderId?: IntFieldUpdateOperationsInput | number
    attributes?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    poStatus?: StringFieldUpdateOperationsInput | string
    numCopies?: IntFieldUpdateOperationsInput | number
    contains?: ContainsUncheckedUpdateManyWithoutPrintOrderNestedInput
  }

  export type PrintOrderUncheckedUpdateManyWithoutCustomerInput = {
    printOrderId?: IntFieldUpdateOperationsInput | number
    attributes?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    poStatus?: StringFieldUpdateOperationsInput | string
    numCopies?: IntFieldUpdateOperationsInput | number
  }

  export type DocumentUpdateWithoutCustomerInput = {
    docName?: StringFieldUpdateOperationsInput | string
    docQuantity?: IntFieldUpdateOperationsInput | number
    printer?: PrinterUpdateOneRequiredWithoutDocumentsNestedInput
    contains?: ContainsUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateWithoutCustomerInput = {
    documentId?: IntFieldUpdateOperationsInput | number
    docName?: StringFieldUpdateOperationsInput | string
    printerId?: IntFieldUpdateOperationsInput | number
    docQuantity?: IntFieldUpdateOperationsInput | number
    contains?: ContainsUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateManyWithoutCustomerInput = {
    documentId?: IntFieldUpdateOperationsInput | number
    docName?: StringFieldUpdateOperationsInput | string
    printerId?: IntFieldUpdateOperationsInput | number
    docQuantity?: IntFieldUpdateOperationsInput | number
  }

  export type DocumentCreateManyPrinterInput = {
    documentId?: number
    docName: string
    customerId: number
    docQuantity: number
  }

  export type DocumentUpdateWithoutPrinterInput = {
    docName?: StringFieldUpdateOperationsInput | string
    docQuantity?: IntFieldUpdateOperationsInput | number
    customer?: CustomerUpdateOneRequiredWithoutDocumentsNestedInput
    contains?: ContainsUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateWithoutPrinterInput = {
    documentId?: IntFieldUpdateOperationsInput | number
    docName?: StringFieldUpdateOperationsInput | string
    customerId?: IntFieldUpdateOperationsInput | number
    docQuantity?: IntFieldUpdateOperationsInput | number
    contains?: ContainsUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateManyWithoutPrinterInput = {
    documentId?: IntFieldUpdateOperationsInput | number
    docName?: StringFieldUpdateOperationsInput | string
    customerId?: IntFieldUpdateOperationsInput | number
    docQuantity?: IntFieldUpdateOperationsInput | number
  }

  export type ContainsCreateManyPrintOrderInput = {
    id?: number
    documentId: number
  }

  export type ContainsUpdateWithoutPrintOrderInput = {
    document?: DocumentUpdateOneRequiredWithoutContainsNestedInput
  }

  export type ContainsUncheckedUpdateWithoutPrintOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentId?: IntFieldUpdateOperationsInput | number
  }

  export type ContainsUncheckedUpdateManyWithoutPrintOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentId?: IntFieldUpdateOperationsInput | number
  }

  export type ContainsCreateManyDocumentInput = {
    id?: number
    printOrderId: number
  }

  export type ContainsUpdateWithoutDocumentInput = {
    printOrder?: PrintOrderUpdateOneRequiredWithoutContainsNestedInput
  }

  export type ContainsUncheckedUpdateWithoutDocumentInput = {
    id?: IntFieldUpdateOperationsInput | number
    printOrderId?: IntFieldUpdateOperationsInput | number
  }

  export type ContainsUncheckedUpdateManyWithoutDocumentInput = {
    id?: IntFieldUpdateOperationsInput | number
    printOrderId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use AdminCountOutputTypeDefaultArgs instead
     */
    export type AdminCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AdminCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SPSOMemberCountOutputTypeDefaultArgs instead
     */
    export type SPSOMemberCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SPSOMemberCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CustomerCountOutputTypeDefaultArgs instead
     */
    export type CustomerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CustomerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PrinterCountOutputTypeDefaultArgs instead
     */
    export type PrinterCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PrinterCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PrintOrderCountOutputTypeDefaultArgs instead
     */
    export type PrintOrderCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PrintOrderCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DocumentCountOutputTypeDefaultArgs instead
     */
    export type DocumentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DocumentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AdminDefaultArgs instead
     */
    export type AdminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AdminDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SPSOMemberDefaultArgs instead
     */
    export type SPSOMemberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SPSOMemberDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CustomerDefaultArgs instead
     */
    export type CustomerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CustomerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FeedbackDefaultArgs instead
     */
    export type FeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FeedbackDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PrinterDefaultArgs instead
     */
    export type PrinterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PrinterDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PagePurchaseOrderDefaultArgs instead
     */
    export type PagePurchaseOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PagePurchaseOrderDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PrintOrderDefaultArgs instead
     */
    export type PrintOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PrintOrderDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DocumentDefaultArgs instead
     */
    export type DocumentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DocumentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContainsDefaultArgs instead
     */
    export type ContainsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ContainsDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}