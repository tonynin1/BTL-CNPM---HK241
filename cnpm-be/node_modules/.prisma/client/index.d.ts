
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model SPSOMember
 * 
 */
export type SPSOMember = $Result.DefaultSelection<Prisma.$SPSOMemberPayload>
/**
 * Model Customer
 * 
 */
export type Customer = $Result.DefaultSelection<Prisma.$CustomerPayload>
/**
 * Model Feedback
 * 
 */
export type Feedback = $Result.DefaultSelection<Prisma.$FeedbackPayload>
/**
 * Model Printer
 * 
 */
export type Printer = $Result.DefaultSelection<Prisma.$PrinterPayload>
/**
 * Model PurchaseOrder
 * 
 */
export type PurchaseOrder = $Result.DefaultSelection<Prisma.$PurchaseOrderPayload>
/**
 * Model PrintOrder
 * 
 */
export type PrintOrder = $Result.DefaultSelection<Prisma.$PrintOrderPayload>
/**
 * Model Document
 * 
 */
export type Document = $Result.DefaultSelection<Prisma.$DocumentPayload>
/**
 * Model PrintRecord
 * 
 */
export type PrintRecord = $Result.DefaultSelection<Prisma.$PrintRecordPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more SPSOMembers
 * const sPSOMembers = await prisma.sPSOMember.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more SPSOMembers
   * const sPSOMembers = await prisma.sPSOMember.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.sPSOMember`: Exposes CRUD operations for the **SPSOMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SPSOMembers
    * const sPSOMembers = await prisma.sPSOMember.findMany()
    * ```
    */
  get sPSOMember(): Prisma.SPSOMemberDelegate<ExtArgs>;

  /**
   * `prisma.customer`: Exposes CRUD operations for the **Customer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customer.findMany()
    * ```
    */
  get customer(): Prisma.CustomerDelegate<ExtArgs>;

  /**
   * `prisma.feedback`: Exposes CRUD operations for the **Feedback** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Feedbacks
    * const feedbacks = await prisma.feedback.findMany()
    * ```
    */
  get feedback(): Prisma.FeedbackDelegate<ExtArgs>;

  /**
   * `prisma.printer`: Exposes CRUD operations for the **Printer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Printers
    * const printers = await prisma.printer.findMany()
    * ```
    */
  get printer(): Prisma.PrinterDelegate<ExtArgs>;

  /**
   * `prisma.purchaseOrder`: Exposes CRUD operations for the **PurchaseOrder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PurchaseOrders
    * const purchaseOrders = await prisma.purchaseOrder.findMany()
    * ```
    */
  get purchaseOrder(): Prisma.PurchaseOrderDelegate<ExtArgs>;

  /**
   * `prisma.printOrder`: Exposes CRUD operations for the **PrintOrder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PrintOrders
    * const printOrders = await prisma.printOrder.findMany()
    * ```
    */
  get printOrder(): Prisma.PrintOrderDelegate<ExtArgs>;

  /**
   * `prisma.document`: Exposes CRUD operations for the **Document** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Documents
    * const documents = await prisma.document.findMany()
    * ```
    */
  get document(): Prisma.DocumentDelegate<ExtArgs>;

  /**
   * `prisma.printRecord`: Exposes CRUD operations for the **PrintRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PrintRecords
    * const printRecords = await prisma.printRecord.findMany()
    * ```
    */
  get printRecord(): Prisma.PrintRecordDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.16.2
   * Query Engine version: 34ace0eb2704183d2c05b60b52fba5c43c13f303
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    SPSOMember: 'SPSOMember',
    Customer: 'Customer',
    Feedback: 'Feedback',
    Printer: 'Printer',
    PurchaseOrder: 'PurchaseOrder',
    PrintOrder: 'PrintOrder',
    Document: 'Document',
    PrintRecord: 'PrintRecord'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "sPSOMember" | "customer" | "feedback" | "printer" | "purchaseOrder" | "printOrder" | "document" | "printRecord"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      SPSOMember: {
        payload: Prisma.$SPSOMemberPayload<ExtArgs>
        fields: Prisma.SPSOMemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SPSOMemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SPSOMemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SPSOMemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SPSOMemberPayload>
          }
          findFirst: {
            args: Prisma.SPSOMemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SPSOMemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SPSOMemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SPSOMemberPayload>
          }
          findMany: {
            args: Prisma.SPSOMemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SPSOMemberPayload>[]
          }
          create: {
            args: Prisma.SPSOMemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SPSOMemberPayload>
          }
          createMany: {
            args: Prisma.SPSOMemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SPSOMemberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SPSOMemberPayload>[]
          }
          delete: {
            args: Prisma.SPSOMemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SPSOMemberPayload>
          }
          update: {
            args: Prisma.SPSOMemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SPSOMemberPayload>
          }
          deleteMany: {
            args: Prisma.SPSOMemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SPSOMemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SPSOMemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SPSOMemberPayload>
          }
          aggregate: {
            args: Prisma.SPSOMemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSPSOMember>
          }
          groupBy: {
            args: Prisma.SPSOMemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<SPSOMemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.SPSOMemberCountArgs<ExtArgs>
            result: $Utils.Optional<SPSOMemberCountAggregateOutputType> | number
          }
        }
      }
      Customer: {
        payload: Prisma.$CustomerPayload<ExtArgs>
        fields: Prisma.CustomerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findFirst: {
            args: Prisma.CustomerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findMany: {
            args: Prisma.CustomerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          create: {
            args: Prisma.CustomerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          createMany: {
            args: Prisma.CustomerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          delete: {
            args: Prisma.CustomerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          update: {
            args: Prisma.CustomerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          deleteMany: {
            args: Prisma.CustomerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CustomerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          aggregate: {
            args: Prisma.CustomerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomer>
          }
          groupBy: {
            args: Prisma.CustomerGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerCountAggregateOutputType> | number
          }
        }
      }
      Feedback: {
        payload: Prisma.$FeedbackPayload<ExtArgs>
        fields: Prisma.FeedbackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeedbackFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeedbackFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findFirst: {
            args: Prisma.FeedbackFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeedbackFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findMany: {
            args: Prisma.FeedbackFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          create: {
            args: Prisma.FeedbackCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          createMany: {
            args: Prisma.FeedbackCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FeedbackCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          delete: {
            args: Prisma.FeedbackDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          update: {
            args: Prisma.FeedbackUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          deleteMany: {
            args: Prisma.FeedbackDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeedbackUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FeedbackUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          aggregate: {
            args: Prisma.FeedbackAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeedback>
          }
          groupBy: {
            args: Prisma.FeedbackGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeedbackGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeedbackCountArgs<ExtArgs>
            result: $Utils.Optional<FeedbackCountAggregateOutputType> | number
          }
        }
      }
      Printer: {
        payload: Prisma.$PrinterPayload<ExtArgs>
        fields: Prisma.PrinterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PrinterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrinterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PrinterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrinterPayload>
          }
          findFirst: {
            args: Prisma.PrinterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrinterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PrinterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrinterPayload>
          }
          findMany: {
            args: Prisma.PrinterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrinterPayload>[]
          }
          create: {
            args: Prisma.PrinterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrinterPayload>
          }
          createMany: {
            args: Prisma.PrinterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PrinterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrinterPayload>[]
          }
          delete: {
            args: Prisma.PrinterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrinterPayload>
          }
          update: {
            args: Prisma.PrinterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrinterPayload>
          }
          deleteMany: {
            args: Prisma.PrinterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PrinterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PrinterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrinterPayload>
          }
          aggregate: {
            args: Prisma.PrinterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePrinter>
          }
          groupBy: {
            args: Prisma.PrinterGroupByArgs<ExtArgs>
            result: $Utils.Optional<PrinterGroupByOutputType>[]
          }
          count: {
            args: Prisma.PrinterCountArgs<ExtArgs>
            result: $Utils.Optional<PrinterCountAggregateOutputType> | number
          }
        }
      }
      PurchaseOrder: {
        payload: Prisma.$PurchaseOrderPayload<ExtArgs>
        fields: Prisma.PurchaseOrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PurchaseOrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PurchaseOrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderPayload>
          }
          findFirst: {
            args: Prisma.PurchaseOrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PurchaseOrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderPayload>
          }
          findMany: {
            args: Prisma.PurchaseOrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderPayload>[]
          }
          create: {
            args: Prisma.PurchaseOrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderPayload>
          }
          createMany: {
            args: Prisma.PurchaseOrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PurchaseOrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderPayload>[]
          }
          delete: {
            args: Prisma.PurchaseOrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderPayload>
          }
          update: {
            args: Prisma.PurchaseOrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderPayload>
          }
          deleteMany: {
            args: Prisma.PurchaseOrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PurchaseOrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PurchaseOrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderPayload>
          }
          aggregate: {
            args: Prisma.PurchaseOrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePurchaseOrder>
          }
          groupBy: {
            args: Prisma.PurchaseOrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<PurchaseOrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.PurchaseOrderCountArgs<ExtArgs>
            result: $Utils.Optional<PurchaseOrderCountAggregateOutputType> | number
          }
        }
      }
      PrintOrder: {
        payload: Prisma.$PrintOrderPayload<ExtArgs>
        fields: Prisma.PrintOrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PrintOrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrintOrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PrintOrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrintOrderPayload>
          }
          findFirst: {
            args: Prisma.PrintOrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrintOrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PrintOrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrintOrderPayload>
          }
          findMany: {
            args: Prisma.PrintOrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrintOrderPayload>[]
          }
          create: {
            args: Prisma.PrintOrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrintOrderPayload>
          }
          createMany: {
            args: Prisma.PrintOrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PrintOrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrintOrderPayload>[]
          }
          delete: {
            args: Prisma.PrintOrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrintOrderPayload>
          }
          update: {
            args: Prisma.PrintOrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrintOrderPayload>
          }
          deleteMany: {
            args: Prisma.PrintOrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PrintOrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PrintOrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrintOrderPayload>
          }
          aggregate: {
            args: Prisma.PrintOrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePrintOrder>
          }
          groupBy: {
            args: Prisma.PrintOrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<PrintOrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.PrintOrderCountArgs<ExtArgs>
            result: $Utils.Optional<PrintOrderCountAggregateOutputType> | number
          }
        }
      }
      Document: {
        payload: Prisma.$DocumentPayload<ExtArgs>
        fields: Prisma.DocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findFirst: {
            args: Prisma.DocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findMany: {
            args: Prisma.DocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          create: {
            args: Prisma.DocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          createMany: {
            args: Prisma.DocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          delete: {
            args: Prisma.DocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          update: {
            args: Prisma.DocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          deleteMany: {
            args: Prisma.DocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          aggregate: {
            args: Prisma.DocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocument>
          }
          groupBy: {
            args: Prisma.DocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentCountAggregateOutputType> | number
          }
        }
      }
      PrintRecord: {
        payload: Prisma.$PrintRecordPayload<ExtArgs>
        fields: Prisma.PrintRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PrintRecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrintRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PrintRecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrintRecordPayload>
          }
          findFirst: {
            args: Prisma.PrintRecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrintRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PrintRecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrintRecordPayload>
          }
          findMany: {
            args: Prisma.PrintRecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrintRecordPayload>[]
          }
          create: {
            args: Prisma.PrintRecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrintRecordPayload>
          }
          createMany: {
            args: Prisma.PrintRecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PrintRecordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrintRecordPayload>[]
          }
          delete: {
            args: Prisma.PrintRecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrintRecordPayload>
          }
          update: {
            args: Prisma.PrintRecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrintRecordPayload>
          }
          deleteMany: {
            args: Prisma.PrintRecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PrintRecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PrintRecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrintRecordPayload>
          }
          aggregate: {
            args: Prisma.PrintRecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePrintRecord>
          }
          groupBy: {
            args: Prisma.PrintRecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<PrintRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.PrintRecordCountArgs<ExtArgs>
            result: $Utils.Optional<PrintRecordCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CustomerCountOutputType
   */

  export type CustomerCountOutputType = {
    feedbacks: number
    purchaseOrders: number
    printOrders: number
  }

  export type CustomerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feedbacks?: boolean | CustomerCountOutputTypeCountFeedbacksArgs
    purchaseOrders?: boolean | CustomerCountOutputTypeCountPurchaseOrdersArgs
    printOrders?: boolean | CustomerCountOutputTypeCountPrintOrdersArgs
  }

  // Custom InputTypes
  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCountOutputType
     */
    select?: CustomerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountPurchaseOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PurchaseOrderWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountPrintOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrintOrderWhereInput
  }


  /**
   * Count Type PrinterCountOutputType
   */

  export type PrinterCountOutputType = {
    purchaseOrders: number
    printOrders: number
    printRecords: number
  }

  export type PrinterCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    purchaseOrders?: boolean | PrinterCountOutputTypeCountPurchaseOrdersArgs
    printOrders?: boolean | PrinterCountOutputTypeCountPrintOrdersArgs
    printRecords?: boolean | PrinterCountOutputTypeCountPrintRecordsArgs
  }

  // Custom InputTypes
  /**
   * PrinterCountOutputType without action
   */
  export type PrinterCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrinterCountOutputType
     */
    select?: PrinterCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PrinterCountOutputType without action
   */
  export type PrinterCountOutputTypeCountPurchaseOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PurchaseOrderWhereInput
  }

  /**
   * PrinterCountOutputType without action
   */
  export type PrinterCountOutputTypeCountPrintOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrintOrderWhereInput
  }

  /**
   * PrinterCountOutputType without action
   */
  export type PrinterCountOutputTypeCountPrintRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrintRecordWhereInput
  }


  /**
   * Count Type DocumentCountOutputType
   */

  export type DocumentCountOutputType = {
    printRecords: number
  }

  export type DocumentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    printRecords?: boolean | DocumentCountOutputTypeCountPrintRecordsArgs
  }

  // Custom InputTypes
  /**
   * DocumentCountOutputType without action
   */
  export type DocumentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentCountOutputType
     */
    select?: DocumentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DocumentCountOutputType without action
   */
  export type DocumentCountOutputTypeCountPrintRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrintRecordWhereInput
  }


  /**
   * Models
   */

  /**
   * Model SPSOMember
   */

  export type AggregateSPSOMember = {
    _count: SPSOMemberCountAggregateOutputType | null
    _min: SPSOMemberMinAggregateOutputType | null
    _max: SPSOMemberMaxAggregateOutputType | null
  }

  export type SPSOMemberMinAggregateOutputType = {
    memberId: string | null
    birthDate: Date | null
    address: string | null
    fullName: string | null
    email: string | null
    phoneNumber: string | null
    usageHistory: string | null
  }

  export type SPSOMemberMaxAggregateOutputType = {
    memberId: string | null
    birthDate: Date | null
    address: string | null
    fullName: string | null
    email: string | null
    phoneNumber: string | null
    usageHistory: string | null
  }

  export type SPSOMemberCountAggregateOutputType = {
    memberId: number
    birthDate: number
    address: number
    fullName: number
    email: number
    phoneNumber: number
    usageHistory: number
    _all: number
  }


  export type SPSOMemberMinAggregateInputType = {
    memberId?: true
    birthDate?: true
    address?: true
    fullName?: true
    email?: true
    phoneNumber?: true
    usageHistory?: true
  }

  export type SPSOMemberMaxAggregateInputType = {
    memberId?: true
    birthDate?: true
    address?: true
    fullName?: true
    email?: true
    phoneNumber?: true
    usageHistory?: true
  }

  export type SPSOMemberCountAggregateInputType = {
    memberId?: true
    birthDate?: true
    address?: true
    fullName?: true
    email?: true
    phoneNumber?: true
    usageHistory?: true
    _all?: true
  }

  export type SPSOMemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SPSOMember to aggregate.
     */
    where?: SPSOMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SPSOMembers to fetch.
     */
    orderBy?: SPSOMemberOrderByWithRelationInput | SPSOMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SPSOMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SPSOMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SPSOMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SPSOMembers
    **/
    _count?: true | SPSOMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SPSOMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SPSOMemberMaxAggregateInputType
  }

  export type GetSPSOMemberAggregateType<T extends SPSOMemberAggregateArgs> = {
        [P in keyof T & keyof AggregateSPSOMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSPSOMember[P]>
      : GetScalarType<T[P], AggregateSPSOMember[P]>
  }




  export type SPSOMemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SPSOMemberWhereInput
    orderBy?: SPSOMemberOrderByWithAggregationInput | SPSOMemberOrderByWithAggregationInput[]
    by: SPSOMemberScalarFieldEnum[] | SPSOMemberScalarFieldEnum
    having?: SPSOMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SPSOMemberCountAggregateInputType | true
    _min?: SPSOMemberMinAggregateInputType
    _max?: SPSOMemberMaxAggregateInputType
  }

  export type SPSOMemberGroupByOutputType = {
    memberId: string
    birthDate: Date
    address: string
    fullName: string
    email: string
    phoneNumber: string
    usageHistory: string
    _count: SPSOMemberCountAggregateOutputType | null
    _min: SPSOMemberMinAggregateOutputType | null
    _max: SPSOMemberMaxAggregateOutputType | null
  }

  type GetSPSOMemberGroupByPayload<T extends SPSOMemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SPSOMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SPSOMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SPSOMemberGroupByOutputType[P]>
            : GetScalarType<T[P], SPSOMemberGroupByOutputType[P]>
        }
      >
    >


  export type SPSOMemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    memberId?: boolean
    birthDate?: boolean
    address?: boolean
    fullName?: boolean
    email?: boolean
    phoneNumber?: boolean
    usageHistory?: boolean
    customer?: boolean | SPSOMember$customerArgs<ExtArgs>
  }, ExtArgs["result"]["sPSOMember"]>

  export type SPSOMemberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    memberId?: boolean
    birthDate?: boolean
    address?: boolean
    fullName?: boolean
    email?: boolean
    phoneNumber?: boolean
    usageHistory?: boolean
  }, ExtArgs["result"]["sPSOMember"]>

  export type SPSOMemberSelectScalar = {
    memberId?: boolean
    birthDate?: boolean
    address?: boolean
    fullName?: boolean
    email?: boolean
    phoneNumber?: boolean
    usageHistory?: boolean
  }

  export type SPSOMemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | SPSOMember$customerArgs<ExtArgs>
  }
  export type SPSOMemberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SPSOMemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SPSOMember"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      memberId: string
      birthDate: Date
      address: string
      fullName: string
      email: string
      phoneNumber: string
      usageHistory: string
    }, ExtArgs["result"]["sPSOMember"]>
    composites: {}
  }

  type SPSOMemberGetPayload<S extends boolean | null | undefined | SPSOMemberDefaultArgs> = $Result.GetResult<Prisma.$SPSOMemberPayload, S>

  type SPSOMemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SPSOMemberFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SPSOMemberCountAggregateInputType | true
    }

  export interface SPSOMemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SPSOMember'], meta: { name: 'SPSOMember' } }
    /**
     * Find zero or one SPSOMember that matches the filter.
     * @param {SPSOMemberFindUniqueArgs} args - Arguments to find a SPSOMember
     * @example
     * // Get one SPSOMember
     * const sPSOMember = await prisma.sPSOMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SPSOMemberFindUniqueArgs>(args: SelectSubset<T, SPSOMemberFindUniqueArgs<ExtArgs>>): Prisma__SPSOMemberClient<$Result.GetResult<Prisma.$SPSOMemberPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SPSOMember that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SPSOMemberFindUniqueOrThrowArgs} args - Arguments to find a SPSOMember
     * @example
     * // Get one SPSOMember
     * const sPSOMember = await prisma.sPSOMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SPSOMemberFindUniqueOrThrowArgs>(args: SelectSubset<T, SPSOMemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SPSOMemberClient<$Result.GetResult<Prisma.$SPSOMemberPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SPSOMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SPSOMemberFindFirstArgs} args - Arguments to find a SPSOMember
     * @example
     * // Get one SPSOMember
     * const sPSOMember = await prisma.sPSOMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SPSOMemberFindFirstArgs>(args?: SelectSubset<T, SPSOMemberFindFirstArgs<ExtArgs>>): Prisma__SPSOMemberClient<$Result.GetResult<Prisma.$SPSOMemberPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SPSOMember that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SPSOMemberFindFirstOrThrowArgs} args - Arguments to find a SPSOMember
     * @example
     * // Get one SPSOMember
     * const sPSOMember = await prisma.sPSOMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SPSOMemberFindFirstOrThrowArgs>(args?: SelectSubset<T, SPSOMemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__SPSOMemberClient<$Result.GetResult<Prisma.$SPSOMemberPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SPSOMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SPSOMemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SPSOMembers
     * const sPSOMembers = await prisma.sPSOMember.findMany()
     * 
     * // Get first 10 SPSOMembers
     * const sPSOMembers = await prisma.sPSOMember.findMany({ take: 10 })
     * 
     * // Only select the `memberId`
     * const sPSOMemberWithMemberIdOnly = await prisma.sPSOMember.findMany({ select: { memberId: true } })
     * 
     */
    findMany<T extends SPSOMemberFindManyArgs>(args?: SelectSubset<T, SPSOMemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SPSOMemberPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SPSOMember.
     * @param {SPSOMemberCreateArgs} args - Arguments to create a SPSOMember.
     * @example
     * // Create one SPSOMember
     * const SPSOMember = await prisma.sPSOMember.create({
     *   data: {
     *     // ... data to create a SPSOMember
     *   }
     * })
     * 
     */
    create<T extends SPSOMemberCreateArgs>(args: SelectSubset<T, SPSOMemberCreateArgs<ExtArgs>>): Prisma__SPSOMemberClient<$Result.GetResult<Prisma.$SPSOMemberPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SPSOMembers.
     * @param {SPSOMemberCreateManyArgs} args - Arguments to create many SPSOMembers.
     * @example
     * // Create many SPSOMembers
     * const sPSOMember = await prisma.sPSOMember.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SPSOMemberCreateManyArgs>(args?: SelectSubset<T, SPSOMemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SPSOMembers and returns the data saved in the database.
     * @param {SPSOMemberCreateManyAndReturnArgs} args - Arguments to create many SPSOMembers.
     * @example
     * // Create many SPSOMembers
     * const sPSOMember = await prisma.sPSOMember.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SPSOMembers and only return the `memberId`
     * const sPSOMemberWithMemberIdOnly = await prisma.sPSOMember.createManyAndReturn({ 
     *   select: { memberId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SPSOMemberCreateManyAndReturnArgs>(args?: SelectSubset<T, SPSOMemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SPSOMemberPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SPSOMember.
     * @param {SPSOMemberDeleteArgs} args - Arguments to delete one SPSOMember.
     * @example
     * // Delete one SPSOMember
     * const SPSOMember = await prisma.sPSOMember.delete({
     *   where: {
     *     // ... filter to delete one SPSOMember
     *   }
     * })
     * 
     */
    delete<T extends SPSOMemberDeleteArgs>(args: SelectSubset<T, SPSOMemberDeleteArgs<ExtArgs>>): Prisma__SPSOMemberClient<$Result.GetResult<Prisma.$SPSOMemberPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SPSOMember.
     * @param {SPSOMemberUpdateArgs} args - Arguments to update one SPSOMember.
     * @example
     * // Update one SPSOMember
     * const sPSOMember = await prisma.sPSOMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SPSOMemberUpdateArgs>(args: SelectSubset<T, SPSOMemberUpdateArgs<ExtArgs>>): Prisma__SPSOMemberClient<$Result.GetResult<Prisma.$SPSOMemberPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SPSOMembers.
     * @param {SPSOMemberDeleteManyArgs} args - Arguments to filter SPSOMembers to delete.
     * @example
     * // Delete a few SPSOMembers
     * const { count } = await prisma.sPSOMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SPSOMemberDeleteManyArgs>(args?: SelectSubset<T, SPSOMemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SPSOMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SPSOMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SPSOMembers
     * const sPSOMember = await prisma.sPSOMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SPSOMemberUpdateManyArgs>(args: SelectSubset<T, SPSOMemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SPSOMember.
     * @param {SPSOMemberUpsertArgs} args - Arguments to update or create a SPSOMember.
     * @example
     * // Update or create a SPSOMember
     * const sPSOMember = await prisma.sPSOMember.upsert({
     *   create: {
     *     // ... data to create a SPSOMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SPSOMember we want to update
     *   }
     * })
     */
    upsert<T extends SPSOMemberUpsertArgs>(args: SelectSubset<T, SPSOMemberUpsertArgs<ExtArgs>>): Prisma__SPSOMemberClient<$Result.GetResult<Prisma.$SPSOMemberPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SPSOMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SPSOMemberCountArgs} args - Arguments to filter SPSOMembers to count.
     * @example
     * // Count the number of SPSOMembers
     * const count = await prisma.sPSOMember.count({
     *   where: {
     *     // ... the filter for the SPSOMembers we want to count
     *   }
     * })
    **/
    count<T extends SPSOMemberCountArgs>(
      args?: Subset<T, SPSOMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SPSOMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SPSOMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SPSOMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SPSOMemberAggregateArgs>(args: Subset<T, SPSOMemberAggregateArgs>): Prisma.PrismaPromise<GetSPSOMemberAggregateType<T>>

    /**
     * Group by SPSOMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SPSOMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SPSOMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SPSOMemberGroupByArgs['orderBy'] }
        : { orderBy?: SPSOMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SPSOMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSPSOMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SPSOMember model
   */
  readonly fields: SPSOMemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SPSOMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SPSOMemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends SPSOMember$customerArgs<ExtArgs> = {}>(args?: Subset<T, SPSOMember$customerArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SPSOMember model
   */ 
  interface SPSOMemberFieldRefs {
    readonly memberId: FieldRef<"SPSOMember", 'String'>
    readonly birthDate: FieldRef<"SPSOMember", 'DateTime'>
    readonly address: FieldRef<"SPSOMember", 'String'>
    readonly fullName: FieldRef<"SPSOMember", 'String'>
    readonly email: FieldRef<"SPSOMember", 'String'>
    readonly phoneNumber: FieldRef<"SPSOMember", 'String'>
    readonly usageHistory: FieldRef<"SPSOMember", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SPSOMember findUnique
   */
  export type SPSOMemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SPSOMember
     */
    select?: SPSOMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SPSOMemberInclude<ExtArgs> | null
    /**
     * Filter, which SPSOMember to fetch.
     */
    where: SPSOMemberWhereUniqueInput
  }

  /**
   * SPSOMember findUniqueOrThrow
   */
  export type SPSOMemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SPSOMember
     */
    select?: SPSOMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SPSOMemberInclude<ExtArgs> | null
    /**
     * Filter, which SPSOMember to fetch.
     */
    where: SPSOMemberWhereUniqueInput
  }

  /**
   * SPSOMember findFirst
   */
  export type SPSOMemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SPSOMember
     */
    select?: SPSOMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SPSOMemberInclude<ExtArgs> | null
    /**
     * Filter, which SPSOMember to fetch.
     */
    where?: SPSOMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SPSOMembers to fetch.
     */
    orderBy?: SPSOMemberOrderByWithRelationInput | SPSOMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SPSOMembers.
     */
    cursor?: SPSOMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SPSOMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SPSOMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SPSOMembers.
     */
    distinct?: SPSOMemberScalarFieldEnum | SPSOMemberScalarFieldEnum[]
  }

  /**
   * SPSOMember findFirstOrThrow
   */
  export type SPSOMemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SPSOMember
     */
    select?: SPSOMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SPSOMemberInclude<ExtArgs> | null
    /**
     * Filter, which SPSOMember to fetch.
     */
    where?: SPSOMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SPSOMembers to fetch.
     */
    orderBy?: SPSOMemberOrderByWithRelationInput | SPSOMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SPSOMembers.
     */
    cursor?: SPSOMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SPSOMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SPSOMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SPSOMembers.
     */
    distinct?: SPSOMemberScalarFieldEnum | SPSOMemberScalarFieldEnum[]
  }

  /**
   * SPSOMember findMany
   */
  export type SPSOMemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SPSOMember
     */
    select?: SPSOMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SPSOMemberInclude<ExtArgs> | null
    /**
     * Filter, which SPSOMembers to fetch.
     */
    where?: SPSOMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SPSOMembers to fetch.
     */
    orderBy?: SPSOMemberOrderByWithRelationInput | SPSOMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SPSOMembers.
     */
    cursor?: SPSOMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SPSOMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SPSOMembers.
     */
    skip?: number
    distinct?: SPSOMemberScalarFieldEnum | SPSOMemberScalarFieldEnum[]
  }

  /**
   * SPSOMember create
   */
  export type SPSOMemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SPSOMember
     */
    select?: SPSOMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SPSOMemberInclude<ExtArgs> | null
    /**
     * The data needed to create a SPSOMember.
     */
    data: XOR<SPSOMemberCreateInput, SPSOMemberUncheckedCreateInput>
  }

  /**
   * SPSOMember createMany
   */
  export type SPSOMemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SPSOMembers.
     */
    data: SPSOMemberCreateManyInput | SPSOMemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SPSOMember createManyAndReturn
   */
  export type SPSOMemberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SPSOMember
     */
    select?: SPSOMemberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SPSOMembers.
     */
    data: SPSOMemberCreateManyInput | SPSOMemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SPSOMember update
   */
  export type SPSOMemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SPSOMember
     */
    select?: SPSOMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SPSOMemberInclude<ExtArgs> | null
    /**
     * The data needed to update a SPSOMember.
     */
    data: XOR<SPSOMemberUpdateInput, SPSOMemberUncheckedUpdateInput>
    /**
     * Choose, which SPSOMember to update.
     */
    where: SPSOMemberWhereUniqueInput
  }

  /**
   * SPSOMember updateMany
   */
  export type SPSOMemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SPSOMembers.
     */
    data: XOR<SPSOMemberUpdateManyMutationInput, SPSOMemberUncheckedUpdateManyInput>
    /**
     * Filter which SPSOMembers to update
     */
    where?: SPSOMemberWhereInput
  }

  /**
   * SPSOMember upsert
   */
  export type SPSOMemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SPSOMember
     */
    select?: SPSOMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SPSOMemberInclude<ExtArgs> | null
    /**
     * The filter to search for the SPSOMember to update in case it exists.
     */
    where: SPSOMemberWhereUniqueInput
    /**
     * In case the SPSOMember found by the `where` argument doesn't exist, create a new SPSOMember with this data.
     */
    create: XOR<SPSOMemberCreateInput, SPSOMemberUncheckedCreateInput>
    /**
     * In case the SPSOMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SPSOMemberUpdateInput, SPSOMemberUncheckedUpdateInput>
  }

  /**
   * SPSOMember delete
   */
  export type SPSOMemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SPSOMember
     */
    select?: SPSOMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SPSOMemberInclude<ExtArgs> | null
    /**
     * Filter which SPSOMember to delete.
     */
    where: SPSOMemberWhereUniqueInput
  }

  /**
   * SPSOMember deleteMany
   */
  export type SPSOMemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SPSOMembers to delete
     */
    where?: SPSOMemberWhereInput
  }

  /**
   * SPSOMember.customer
   */
  export type SPSOMember$customerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    where?: CustomerWhereInput
  }

  /**
   * SPSOMember without action
   */
  export type SPSOMemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SPSOMember
     */
    select?: SPSOMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SPSOMemberInclude<ExtArgs> | null
  }


  /**
   * Model Customer
   */

  export type AggregateCustomer = {
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  export type CustomerAvgAggregateOutputType = {
    accountBalance: number | null
    remainingPages: number | null
  }

  export type CustomerSumAggregateOutputType = {
    accountBalance: number | null
    remainingPages: number | null
  }

  export type CustomerMinAggregateOutputType = {
    customerId: string | null
    purchaseAndPrintHistory: string | null
    accountBalance: number | null
    summary: string | null
    remainingPages: number | null
    fullName: string | null
    email: string | null
    phoneNumber: string | null
    usageHistory: string | null
    parameterChanges: string | null
    memberId: string | null
  }

  export type CustomerMaxAggregateOutputType = {
    customerId: string | null
    purchaseAndPrintHistory: string | null
    accountBalance: number | null
    summary: string | null
    remainingPages: number | null
    fullName: string | null
    email: string | null
    phoneNumber: string | null
    usageHistory: string | null
    parameterChanges: string | null
    memberId: string | null
  }

  export type CustomerCountAggregateOutputType = {
    customerId: number
    purchaseAndPrintHistory: number
    accountBalance: number
    summary: number
    remainingPages: number
    fullName: number
    email: number
    phoneNumber: number
    usageHistory: number
    parameterChanges: number
    memberId: number
    _all: number
  }


  export type CustomerAvgAggregateInputType = {
    accountBalance?: true
    remainingPages?: true
  }

  export type CustomerSumAggregateInputType = {
    accountBalance?: true
    remainingPages?: true
  }

  export type CustomerMinAggregateInputType = {
    customerId?: true
    purchaseAndPrintHistory?: true
    accountBalance?: true
    summary?: true
    remainingPages?: true
    fullName?: true
    email?: true
    phoneNumber?: true
    usageHistory?: true
    parameterChanges?: true
    memberId?: true
  }

  export type CustomerMaxAggregateInputType = {
    customerId?: true
    purchaseAndPrintHistory?: true
    accountBalance?: true
    summary?: true
    remainingPages?: true
    fullName?: true
    email?: true
    phoneNumber?: true
    usageHistory?: true
    parameterChanges?: true
    memberId?: true
  }

  export type CustomerCountAggregateInputType = {
    customerId?: true
    purchaseAndPrintHistory?: true
    accountBalance?: true
    summary?: true
    remainingPages?: true
    fullName?: true
    email?: true
    phoneNumber?: true
    usageHistory?: true
    parameterChanges?: true
    memberId?: true
    _all?: true
  }

  export type CustomerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customer to aggregate.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Customers
    **/
    _count?: true | CustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerMaxAggregateInputType
  }

  export type GetCustomerAggregateType<T extends CustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer[P]>
      : GetScalarType<T[P], AggregateCustomer[P]>
  }




  export type CustomerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
    orderBy?: CustomerOrderByWithAggregationInput | CustomerOrderByWithAggregationInput[]
    by: CustomerScalarFieldEnum[] | CustomerScalarFieldEnum
    having?: CustomerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerCountAggregateInputType | true
    _avg?: CustomerAvgAggregateInputType
    _sum?: CustomerSumAggregateInputType
    _min?: CustomerMinAggregateInputType
    _max?: CustomerMaxAggregateInputType
  }

  export type CustomerGroupByOutputType = {
    customerId: string
    purchaseAndPrintHistory: string
    accountBalance: number
    summary: string
    remainingPages: number
    fullName: string
    email: string
    phoneNumber: string
    usageHistory: string
    parameterChanges: string
    memberId: string | null
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  type GetCustomerGroupByPayload<T extends CustomerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerGroupByOutputType[P]>
        }
      >
    >


  export type CustomerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    customerId?: boolean
    purchaseAndPrintHistory?: boolean
    accountBalance?: boolean
    summary?: boolean
    remainingPages?: boolean
    fullName?: boolean
    email?: boolean
    phoneNumber?: boolean
    usageHistory?: boolean
    parameterChanges?: boolean
    memberId?: boolean
    spsomember?: boolean | Customer$spsomemberArgs<ExtArgs>
    feedbacks?: boolean | Customer$feedbacksArgs<ExtArgs>
    purchaseOrders?: boolean | Customer$purchaseOrdersArgs<ExtArgs>
    printOrders?: boolean | Customer$printOrdersArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    customerId?: boolean
    purchaseAndPrintHistory?: boolean
    accountBalance?: boolean
    summary?: boolean
    remainingPages?: boolean
    fullName?: boolean
    email?: boolean
    phoneNumber?: boolean
    usageHistory?: boolean
    parameterChanges?: boolean
    memberId?: boolean
    spsomember?: boolean | Customer$spsomemberArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectScalar = {
    customerId?: boolean
    purchaseAndPrintHistory?: boolean
    accountBalance?: boolean
    summary?: boolean
    remainingPages?: boolean
    fullName?: boolean
    email?: boolean
    phoneNumber?: boolean
    usageHistory?: boolean
    parameterChanges?: boolean
    memberId?: boolean
  }

  export type CustomerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    spsomember?: boolean | Customer$spsomemberArgs<ExtArgs>
    feedbacks?: boolean | Customer$feedbacksArgs<ExtArgs>
    purchaseOrders?: boolean | Customer$purchaseOrdersArgs<ExtArgs>
    printOrders?: boolean | Customer$printOrdersArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CustomerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    spsomember?: boolean | Customer$spsomemberArgs<ExtArgs>
  }

  export type $CustomerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Customer"
    objects: {
      spsomember: Prisma.$SPSOMemberPayload<ExtArgs> | null
      feedbacks: Prisma.$FeedbackPayload<ExtArgs>[]
      purchaseOrders: Prisma.$PurchaseOrderPayload<ExtArgs>[]
      printOrders: Prisma.$PrintOrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      customerId: string
      purchaseAndPrintHistory: string
      accountBalance: number
      summary: string
      remainingPages: number
      fullName: string
      email: string
      phoneNumber: string
      usageHistory: string
      parameterChanges: string
      memberId: string | null
    }, ExtArgs["result"]["customer"]>
    composites: {}
  }

  type CustomerGetPayload<S extends boolean | null | undefined | CustomerDefaultArgs> = $Result.GetResult<Prisma.$CustomerPayload, S>

  type CustomerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CustomerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CustomerCountAggregateInputType | true
    }

  export interface CustomerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Customer'], meta: { name: 'Customer' } }
    /**
     * Find zero or one Customer that matches the filter.
     * @param {CustomerFindUniqueArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerFindUniqueArgs>(args: SelectSubset<T, CustomerFindUniqueArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Customer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CustomerFindUniqueOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Customer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerFindFirstArgs>(args?: SelectSubset<T, CustomerFindFirstArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Customer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customer.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customer.findMany({ take: 10 })
     * 
     * // Only select the `customerId`
     * const customerWithCustomerIdOnly = await prisma.customer.findMany({ select: { customerId: true } })
     * 
     */
    findMany<T extends CustomerFindManyArgs>(args?: SelectSubset<T, CustomerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Customer.
     * @param {CustomerCreateArgs} args - Arguments to create a Customer.
     * @example
     * // Create one Customer
     * const Customer = await prisma.customer.create({
     *   data: {
     *     // ... data to create a Customer
     *   }
     * })
     * 
     */
    create<T extends CustomerCreateArgs>(args: SelectSubset<T, CustomerCreateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Customers.
     * @param {CustomerCreateManyArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerCreateManyArgs>(args?: SelectSubset<T, CustomerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Customers and returns the data saved in the database.
     * @param {CustomerCreateManyAndReturnArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Customers and only return the `customerId`
     * const customerWithCustomerIdOnly = await prisma.customer.createManyAndReturn({ 
     *   select: { customerId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomerCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Customer.
     * @param {CustomerDeleteArgs} args - Arguments to delete one Customer.
     * @example
     * // Delete one Customer
     * const Customer = await prisma.customer.delete({
     *   where: {
     *     // ... filter to delete one Customer
     *   }
     * })
     * 
     */
    delete<T extends CustomerDeleteArgs>(args: SelectSubset<T, CustomerDeleteArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Customer.
     * @param {CustomerUpdateArgs} args - Arguments to update one Customer.
     * @example
     * // Update one Customer
     * const customer = await prisma.customer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerUpdateArgs>(args: SelectSubset<T, CustomerUpdateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Customers.
     * @param {CustomerDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerDeleteManyArgs>(args?: SelectSubset<T, CustomerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerUpdateManyArgs>(args: SelectSubset<T, CustomerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Customer.
     * @param {CustomerUpsertArgs} args - Arguments to update or create a Customer.
     * @example
     * // Update or create a Customer
     * const customer = await prisma.customer.upsert({
     *   create: {
     *     // ... data to create a Customer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer we want to update
     *   }
     * })
     */
    upsert<T extends CustomerUpsertArgs>(args: SelectSubset<T, CustomerUpsertArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customer.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends CustomerCountArgs>(
      args?: Subset<T, CustomerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerAggregateArgs>(args: Subset<T, CustomerAggregateArgs>): Prisma.PrismaPromise<GetCustomerAggregateType<T>>

    /**
     * Group by Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerGroupByArgs['orderBy'] }
        : { orderBy?: CustomerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Customer model
   */
  readonly fields: CustomerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Customer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    spsomember<T extends Customer$spsomemberArgs<ExtArgs> = {}>(args?: Subset<T, Customer$spsomemberArgs<ExtArgs>>): Prisma__SPSOMemberClient<$Result.GetResult<Prisma.$SPSOMemberPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    feedbacks<T extends Customer$feedbacksArgs<ExtArgs> = {}>(args?: Subset<T, Customer$feedbacksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany"> | Null>
    purchaseOrders<T extends Customer$purchaseOrdersArgs<ExtArgs> = {}>(args?: Subset<T, Customer$purchaseOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "findMany"> | Null>
    printOrders<T extends Customer$printOrdersArgs<ExtArgs> = {}>(args?: Subset<T, Customer$printOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrintOrderPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Customer model
   */ 
  interface CustomerFieldRefs {
    readonly customerId: FieldRef<"Customer", 'String'>
    readonly purchaseAndPrintHistory: FieldRef<"Customer", 'String'>
    readonly accountBalance: FieldRef<"Customer", 'Float'>
    readonly summary: FieldRef<"Customer", 'String'>
    readonly remainingPages: FieldRef<"Customer", 'Int'>
    readonly fullName: FieldRef<"Customer", 'String'>
    readonly email: FieldRef<"Customer", 'String'>
    readonly phoneNumber: FieldRef<"Customer", 'String'>
    readonly usageHistory: FieldRef<"Customer", 'String'>
    readonly parameterChanges: FieldRef<"Customer", 'String'>
    readonly memberId: FieldRef<"Customer", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Customer findUnique
   */
  export type CustomerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findUniqueOrThrow
   */
  export type CustomerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findFirst
   */
  export type CustomerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findFirstOrThrow
   */
  export type CustomerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findMany
   */
  export type CustomerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customers to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer create
   */
  export type CustomerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to create a Customer.
     */
    data: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
  }

  /**
   * Customer createMany
   */
  export type CustomerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Customer createManyAndReturn
   */
  export type CustomerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Customer update
   */
  export type CustomerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to update a Customer.
     */
    data: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
    /**
     * Choose, which Customer to update.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer updateMany
   */
  export type CustomerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
  }

  /**
   * Customer upsert
   */
  export type CustomerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The filter to search for the Customer to update in case it exists.
     */
    where: CustomerWhereUniqueInput
    /**
     * In case the Customer found by the `where` argument doesn't exist, create a new Customer with this data.
     */
    create: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
    /**
     * In case the Customer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
  }

  /**
   * Customer delete
   */
  export type CustomerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter which Customer to delete.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer deleteMany
   */
  export type CustomerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customers to delete
     */
    where?: CustomerWhereInput
  }

  /**
   * Customer.spsomember
   */
  export type Customer$spsomemberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SPSOMember
     */
    select?: SPSOMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SPSOMemberInclude<ExtArgs> | null
    where?: SPSOMemberWhereInput
  }

  /**
   * Customer.feedbacks
   */
  export type Customer$feedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    cursor?: FeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Customer.purchaseOrders
   */
  export type Customer$purchaseOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    where?: PurchaseOrderWhereInput
    orderBy?: PurchaseOrderOrderByWithRelationInput | PurchaseOrderOrderByWithRelationInput[]
    cursor?: PurchaseOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PurchaseOrderScalarFieldEnum | PurchaseOrderScalarFieldEnum[]
  }

  /**
   * Customer.printOrders
   */
  export type Customer$printOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintOrder
     */
    select?: PrintOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrintOrderInclude<ExtArgs> | null
    where?: PrintOrderWhereInput
    orderBy?: PrintOrderOrderByWithRelationInput | PrintOrderOrderByWithRelationInput[]
    cursor?: PrintOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PrintOrderScalarFieldEnum | PrintOrderScalarFieldEnum[]
  }

  /**
   * Customer without action
   */
  export type CustomerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
  }


  /**
   * Model Feedback
   */

  export type AggregateFeedback = {
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  export type FeedbackAvgAggregateOutputType = {
    rating: number | null
  }

  export type FeedbackSumAggregateOutputType = {
    rating: number | null
  }

  export type FeedbackMinAggregateOutputType = {
    feedbackId: string | null
    rating: number | null
    content: string | null
    feedbackTime: Date | null
    customerId: string | null
  }

  export type FeedbackMaxAggregateOutputType = {
    feedbackId: string | null
    rating: number | null
    content: string | null
    feedbackTime: Date | null
    customerId: string | null
  }

  export type FeedbackCountAggregateOutputType = {
    feedbackId: number
    rating: number
    content: number
    feedbackTime: number
    customerId: number
    _all: number
  }


  export type FeedbackAvgAggregateInputType = {
    rating?: true
  }

  export type FeedbackSumAggregateInputType = {
    rating?: true
  }

  export type FeedbackMinAggregateInputType = {
    feedbackId?: true
    rating?: true
    content?: true
    feedbackTime?: true
    customerId?: true
  }

  export type FeedbackMaxAggregateInputType = {
    feedbackId?: true
    rating?: true
    content?: true
    feedbackTime?: true
    customerId?: true
  }

  export type FeedbackCountAggregateInputType = {
    feedbackId?: true
    rating?: true
    content?: true
    feedbackTime?: true
    customerId?: true
    _all?: true
  }

  export type FeedbackAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedback to aggregate.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Feedbacks
    **/
    _count?: true | FeedbackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeedbackAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeedbackSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeedbackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeedbackMaxAggregateInputType
  }

  export type GetFeedbackAggregateType<T extends FeedbackAggregateArgs> = {
        [P in keyof T & keyof AggregateFeedback]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedback[P]>
      : GetScalarType<T[P], AggregateFeedback[P]>
  }




  export type FeedbackGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithAggregationInput | FeedbackOrderByWithAggregationInput[]
    by: FeedbackScalarFieldEnum[] | FeedbackScalarFieldEnum
    having?: FeedbackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeedbackCountAggregateInputType | true
    _avg?: FeedbackAvgAggregateInputType
    _sum?: FeedbackSumAggregateInputType
    _min?: FeedbackMinAggregateInputType
    _max?: FeedbackMaxAggregateInputType
  }

  export type FeedbackGroupByOutputType = {
    feedbackId: string
    rating: number
    content: string
    feedbackTime: Date
    customerId: string
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  type GetFeedbackGroupByPayload<T extends FeedbackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeedbackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeedbackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
            : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
        }
      >
    >


  export type FeedbackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    feedbackId?: boolean
    rating?: boolean
    content?: boolean
    feedbackTime?: boolean
    customerId?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    feedbackId?: boolean
    rating?: boolean
    content?: boolean
    feedbackTime?: boolean
    customerId?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectScalar = {
    feedbackId?: boolean
    rating?: boolean
    content?: boolean
    feedbackTime?: boolean
    customerId?: boolean
  }

  export type FeedbackInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }
  export type FeedbackIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }

  export type $FeedbackPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Feedback"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      feedbackId: string
      rating: number
      content: string
      feedbackTime: Date
      customerId: string
    }, ExtArgs["result"]["feedback"]>
    composites: {}
  }

  type FeedbackGetPayload<S extends boolean | null | undefined | FeedbackDefaultArgs> = $Result.GetResult<Prisma.$FeedbackPayload, S>

  type FeedbackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FeedbackFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FeedbackCountAggregateInputType | true
    }

  export interface FeedbackDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Feedback'], meta: { name: 'Feedback' } }
    /**
     * Find zero or one Feedback that matches the filter.
     * @param {FeedbackFindUniqueArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeedbackFindUniqueArgs>(args: SelectSubset<T, FeedbackFindUniqueArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Feedback that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FeedbackFindUniqueOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeedbackFindUniqueOrThrowArgs>(args: SelectSubset<T, FeedbackFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Feedback that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeedbackFindFirstArgs>(args?: SelectSubset<T, FeedbackFindFirstArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Feedback that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeedbackFindFirstOrThrowArgs>(args?: SelectSubset<T, FeedbackFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Feedbacks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Feedbacks
     * const feedbacks = await prisma.feedback.findMany()
     * 
     * // Get first 10 Feedbacks
     * const feedbacks = await prisma.feedback.findMany({ take: 10 })
     * 
     * // Only select the `feedbackId`
     * const feedbackWithFeedbackIdOnly = await prisma.feedback.findMany({ select: { feedbackId: true } })
     * 
     */
    findMany<T extends FeedbackFindManyArgs>(args?: SelectSubset<T, FeedbackFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Feedback.
     * @param {FeedbackCreateArgs} args - Arguments to create a Feedback.
     * @example
     * // Create one Feedback
     * const Feedback = await prisma.feedback.create({
     *   data: {
     *     // ... data to create a Feedback
     *   }
     * })
     * 
     */
    create<T extends FeedbackCreateArgs>(args: SelectSubset<T, FeedbackCreateArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Feedbacks.
     * @param {FeedbackCreateManyArgs} args - Arguments to create many Feedbacks.
     * @example
     * // Create many Feedbacks
     * const feedback = await prisma.feedback.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeedbackCreateManyArgs>(args?: SelectSubset<T, FeedbackCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Feedbacks and returns the data saved in the database.
     * @param {FeedbackCreateManyAndReturnArgs} args - Arguments to create many Feedbacks.
     * @example
     * // Create many Feedbacks
     * const feedback = await prisma.feedback.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Feedbacks and only return the `feedbackId`
     * const feedbackWithFeedbackIdOnly = await prisma.feedback.createManyAndReturn({ 
     *   select: { feedbackId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FeedbackCreateManyAndReturnArgs>(args?: SelectSubset<T, FeedbackCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Feedback.
     * @param {FeedbackDeleteArgs} args - Arguments to delete one Feedback.
     * @example
     * // Delete one Feedback
     * const Feedback = await prisma.feedback.delete({
     *   where: {
     *     // ... filter to delete one Feedback
     *   }
     * })
     * 
     */
    delete<T extends FeedbackDeleteArgs>(args: SelectSubset<T, FeedbackDeleteArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Feedback.
     * @param {FeedbackUpdateArgs} args - Arguments to update one Feedback.
     * @example
     * // Update one Feedback
     * const feedback = await prisma.feedback.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeedbackUpdateArgs>(args: SelectSubset<T, FeedbackUpdateArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Feedbacks.
     * @param {FeedbackDeleteManyArgs} args - Arguments to filter Feedbacks to delete.
     * @example
     * // Delete a few Feedbacks
     * const { count } = await prisma.feedback.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeedbackDeleteManyArgs>(args?: SelectSubset<T, FeedbackDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Feedbacks
     * const feedback = await prisma.feedback.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeedbackUpdateManyArgs>(args: SelectSubset<T, FeedbackUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Feedback.
     * @param {FeedbackUpsertArgs} args - Arguments to update or create a Feedback.
     * @example
     * // Update or create a Feedback
     * const feedback = await prisma.feedback.upsert({
     *   create: {
     *     // ... data to create a Feedback
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Feedback we want to update
     *   }
     * })
     */
    upsert<T extends FeedbackUpsertArgs>(args: SelectSubset<T, FeedbackUpsertArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackCountArgs} args - Arguments to filter Feedbacks to count.
     * @example
     * // Count the number of Feedbacks
     * const count = await prisma.feedback.count({
     *   where: {
     *     // ... the filter for the Feedbacks we want to count
     *   }
     * })
    **/
    count<T extends FeedbackCountArgs>(
      args?: Subset<T, FeedbackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedbackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeedbackAggregateArgs>(args: Subset<T, FeedbackAggregateArgs>): Prisma.PrismaPromise<GetFeedbackAggregateType<T>>

    /**
     * Group by Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeedbackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeedbackGroupByArgs['orderBy'] }
        : { orderBy?: FeedbackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeedbackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedbackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Feedback model
   */
  readonly fields: FeedbackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Feedback.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeedbackClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Feedback model
   */ 
  interface FeedbackFieldRefs {
    readonly feedbackId: FieldRef<"Feedback", 'String'>
    readonly rating: FieldRef<"Feedback", 'Int'>
    readonly content: FieldRef<"Feedback", 'String'>
    readonly feedbackTime: FieldRef<"Feedback", 'DateTime'>
    readonly customerId: FieldRef<"Feedback", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Feedback findUnique
   */
  export type FeedbackFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback findUniqueOrThrow
   */
  export type FeedbackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback findFirst
   */
  export type FeedbackFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback findFirstOrThrow
   */
  export type FeedbackFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback findMany
   */
  export type FeedbackFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedbacks to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback create
   */
  export type FeedbackCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The data needed to create a Feedback.
     */
    data: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
  }

  /**
   * Feedback createMany
   */
  export type FeedbackCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Feedbacks.
     */
    data: FeedbackCreateManyInput | FeedbackCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Feedback createManyAndReturn
   */
  export type FeedbackCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Feedbacks.
     */
    data: FeedbackCreateManyInput | FeedbackCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Feedback update
   */
  export type FeedbackUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The data needed to update a Feedback.
     */
    data: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
    /**
     * Choose, which Feedback to update.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback updateMany
   */
  export type FeedbackUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Feedbacks.
     */
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyInput>
    /**
     * Filter which Feedbacks to update
     */
    where?: FeedbackWhereInput
  }

  /**
   * Feedback upsert
   */
  export type FeedbackUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The filter to search for the Feedback to update in case it exists.
     */
    where: FeedbackWhereUniqueInput
    /**
     * In case the Feedback found by the `where` argument doesn't exist, create a new Feedback with this data.
     */
    create: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
    /**
     * In case the Feedback was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
  }

  /**
   * Feedback delete
   */
  export type FeedbackDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter which Feedback to delete.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback deleteMany
   */
  export type FeedbackDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedbacks to delete
     */
    where?: FeedbackWhereInput
  }

  /**
   * Feedback without action
   */
  export type FeedbackDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
  }


  /**
   * Model Printer
   */

  export type AggregatePrinter = {
    _count: PrinterCountAggregateOutputType | null
    _min: PrinterMinAggregateOutputType | null
    _max: PrinterMaxAggregateOutputType | null
  }

  export type PrinterMinAggregateOutputType = {
    printerId: string | null
    printerType: string | null
    brandName: string | null
    description: string | null
    facility: string | null
    building: string | null
    room: string | null
    isInstalled: boolean | null
  }

  export type PrinterMaxAggregateOutputType = {
    printerId: string | null
    printerType: string | null
    brandName: string | null
    description: string | null
    facility: string | null
    building: string | null
    room: string | null
    isInstalled: boolean | null
  }

  export type PrinterCountAggregateOutputType = {
    printerId: number
    printerType: number
    brandName: number
    description: number
    facility: number
    building: number
    room: number
    isInstalled: number
    _all: number
  }


  export type PrinterMinAggregateInputType = {
    printerId?: true
    printerType?: true
    brandName?: true
    description?: true
    facility?: true
    building?: true
    room?: true
    isInstalled?: true
  }

  export type PrinterMaxAggregateInputType = {
    printerId?: true
    printerType?: true
    brandName?: true
    description?: true
    facility?: true
    building?: true
    room?: true
    isInstalled?: true
  }

  export type PrinterCountAggregateInputType = {
    printerId?: true
    printerType?: true
    brandName?: true
    description?: true
    facility?: true
    building?: true
    room?: true
    isInstalled?: true
    _all?: true
  }

  export type PrinterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Printer to aggregate.
     */
    where?: PrinterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Printers to fetch.
     */
    orderBy?: PrinterOrderByWithRelationInput | PrinterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PrinterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Printers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Printers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Printers
    **/
    _count?: true | PrinterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PrinterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PrinterMaxAggregateInputType
  }

  export type GetPrinterAggregateType<T extends PrinterAggregateArgs> = {
        [P in keyof T & keyof AggregatePrinter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePrinter[P]>
      : GetScalarType<T[P], AggregatePrinter[P]>
  }




  export type PrinterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrinterWhereInput
    orderBy?: PrinterOrderByWithAggregationInput | PrinterOrderByWithAggregationInput[]
    by: PrinterScalarFieldEnum[] | PrinterScalarFieldEnum
    having?: PrinterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PrinterCountAggregateInputType | true
    _min?: PrinterMinAggregateInputType
    _max?: PrinterMaxAggregateInputType
  }

  export type PrinterGroupByOutputType = {
    printerId: string
    printerType: string
    brandName: string
    description: string
    facility: string
    building: string
    room: string
    isInstalled: boolean
    _count: PrinterCountAggregateOutputType | null
    _min: PrinterMinAggregateOutputType | null
    _max: PrinterMaxAggregateOutputType | null
  }

  type GetPrinterGroupByPayload<T extends PrinterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PrinterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PrinterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PrinterGroupByOutputType[P]>
            : GetScalarType<T[P], PrinterGroupByOutputType[P]>
        }
      >
    >


  export type PrinterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    printerId?: boolean
    printerType?: boolean
    brandName?: boolean
    description?: boolean
    facility?: boolean
    building?: boolean
    room?: boolean
    isInstalled?: boolean
    purchaseOrders?: boolean | Printer$purchaseOrdersArgs<ExtArgs>
    printOrders?: boolean | Printer$printOrdersArgs<ExtArgs>
    printRecords?: boolean | Printer$printRecordsArgs<ExtArgs>
    _count?: boolean | PrinterCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["printer"]>

  export type PrinterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    printerId?: boolean
    printerType?: boolean
    brandName?: boolean
    description?: boolean
    facility?: boolean
    building?: boolean
    room?: boolean
    isInstalled?: boolean
  }, ExtArgs["result"]["printer"]>

  export type PrinterSelectScalar = {
    printerId?: boolean
    printerType?: boolean
    brandName?: boolean
    description?: boolean
    facility?: boolean
    building?: boolean
    room?: boolean
    isInstalled?: boolean
  }

  export type PrinterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    purchaseOrders?: boolean | Printer$purchaseOrdersArgs<ExtArgs>
    printOrders?: boolean | Printer$printOrdersArgs<ExtArgs>
    printRecords?: boolean | Printer$printRecordsArgs<ExtArgs>
    _count?: boolean | PrinterCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PrinterIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PrinterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Printer"
    objects: {
      purchaseOrders: Prisma.$PurchaseOrderPayload<ExtArgs>[]
      printOrders: Prisma.$PrintOrderPayload<ExtArgs>[]
      printRecords: Prisma.$PrintRecordPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      printerId: string
      printerType: string
      brandName: string
      description: string
      facility: string
      building: string
      room: string
      isInstalled: boolean
    }, ExtArgs["result"]["printer"]>
    composites: {}
  }

  type PrinterGetPayload<S extends boolean | null | undefined | PrinterDefaultArgs> = $Result.GetResult<Prisma.$PrinterPayload, S>

  type PrinterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PrinterFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PrinterCountAggregateInputType | true
    }

  export interface PrinterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Printer'], meta: { name: 'Printer' } }
    /**
     * Find zero or one Printer that matches the filter.
     * @param {PrinterFindUniqueArgs} args - Arguments to find a Printer
     * @example
     * // Get one Printer
     * const printer = await prisma.printer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PrinterFindUniqueArgs>(args: SelectSubset<T, PrinterFindUniqueArgs<ExtArgs>>): Prisma__PrinterClient<$Result.GetResult<Prisma.$PrinterPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Printer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PrinterFindUniqueOrThrowArgs} args - Arguments to find a Printer
     * @example
     * // Get one Printer
     * const printer = await prisma.printer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PrinterFindUniqueOrThrowArgs>(args: SelectSubset<T, PrinterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PrinterClient<$Result.GetResult<Prisma.$PrinterPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Printer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrinterFindFirstArgs} args - Arguments to find a Printer
     * @example
     * // Get one Printer
     * const printer = await prisma.printer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PrinterFindFirstArgs>(args?: SelectSubset<T, PrinterFindFirstArgs<ExtArgs>>): Prisma__PrinterClient<$Result.GetResult<Prisma.$PrinterPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Printer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrinterFindFirstOrThrowArgs} args - Arguments to find a Printer
     * @example
     * // Get one Printer
     * const printer = await prisma.printer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PrinterFindFirstOrThrowArgs>(args?: SelectSubset<T, PrinterFindFirstOrThrowArgs<ExtArgs>>): Prisma__PrinterClient<$Result.GetResult<Prisma.$PrinterPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Printers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrinterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Printers
     * const printers = await prisma.printer.findMany()
     * 
     * // Get first 10 Printers
     * const printers = await prisma.printer.findMany({ take: 10 })
     * 
     * // Only select the `printerId`
     * const printerWithPrinterIdOnly = await prisma.printer.findMany({ select: { printerId: true } })
     * 
     */
    findMany<T extends PrinterFindManyArgs>(args?: SelectSubset<T, PrinterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrinterPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Printer.
     * @param {PrinterCreateArgs} args - Arguments to create a Printer.
     * @example
     * // Create one Printer
     * const Printer = await prisma.printer.create({
     *   data: {
     *     // ... data to create a Printer
     *   }
     * })
     * 
     */
    create<T extends PrinterCreateArgs>(args: SelectSubset<T, PrinterCreateArgs<ExtArgs>>): Prisma__PrinterClient<$Result.GetResult<Prisma.$PrinterPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Printers.
     * @param {PrinterCreateManyArgs} args - Arguments to create many Printers.
     * @example
     * // Create many Printers
     * const printer = await prisma.printer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PrinterCreateManyArgs>(args?: SelectSubset<T, PrinterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Printers and returns the data saved in the database.
     * @param {PrinterCreateManyAndReturnArgs} args - Arguments to create many Printers.
     * @example
     * // Create many Printers
     * const printer = await prisma.printer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Printers and only return the `printerId`
     * const printerWithPrinterIdOnly = await prisma.printer.createManyAndReturn({ 
     *   select: { printerId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PrinterCreateManyAndReturnArgs>(args?: SelectSubset<T, PrinterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrinterPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Printer.
     * @param {PrinterDeleteArgs} args - Arguments to delete one Printer.
     * @example
     * // Delete one Printer
     * const Printer = await prisma.printer.delete({
     *   where: {
     *     // ... filter to delete one Printer
     *   }
     * })
     * 
     */
    delete<T extends PrinterDeleteArgs>(args: SelectSubset<T, PrinterDeleteArgs<ExtArgs>>): Prisma__PrinterClient<$Result.GetResult<Prisma.$PrinterPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Printer.
     * @param {PrinterUpdateArgs} args - Arguments to update one Printer.
     * @example
     * // Update one Printer
     * const printer = await prisma.printer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PrinterUpdateArgs>(args: SelectSubset<T, PrinterUpdateArgs<ExtArgs>>): Prisma__PrinterClient<$Result.GetResult<Prisma.$PrinterPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Printers.
     * @param {PrinterDeleteManyArgs} args - Arguments to filter Printers to delete.
     * @example
     * // Delete a few Printers
     * const { count } = await prisma.printer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PrinterDeleteManyArgs>(args?: SelectSubset<T, PrinterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Printers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrinterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Printers
     * const printer = await prisma.printer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PrinterUpdateManyArgs>(args: SelectSubset<T, PrinterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Printer.
     * @param {PrinterUpsertArgs} args - Arguments to update or create a Printer.
     * @example
     * // Update or create a Printer
     * const printer = await prisma.printer.upsert({
     *   create: {
     *     // ... data to create a Printer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Printer we want to update
     *   }
     * })
     */
    upsert<T extends PrinterUpsertArgs>(args: SelectSubset<T, PrinterUpsertArgs<ExtArgs>>): Prisma__PrinterClient<$Result.GetResult<Prisma.$PrinterPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Printers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrinterCountArgs} args - Arguments to filter Printers to count.
     * @example
     * // Count the number of Printers
     * const count = await prisma.printer.count({
     *   where: {
     *     // ... the filter for the Printers we want to count
     *   }
     * })
    **/
    count<T extends PrinterCountArgs>(
      args?: Subset<T, PrinterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PrinterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Printer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrinterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PrinterAggregateArgs>(args: Subset<T, PrinterAggregateArgs>): Prisma.PrismaPromise<GetPrinterAggregateType<T>>

    /**
     * Group by Printer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrinterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PrinterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PrinterGroupByArgs['orderBy'] }
        : { orderBy?: PrinterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PrinterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPrinterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Printer model
   */
  readonly fields: PrinterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Printer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PrinterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    purchaseOrders<T extends Printer$purchaseOrdersArgs<ExtArgs> = {}>(args?: Subset<T, Printer$purchaseOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "findMany"> | Null>
    printOrders<T extends Printer$printOrdersArgs<ExtArgs> = {}>(args?: Subset<T, Printer$printOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrintOrderPayload<ExtArgs>, T, "findMany"> | Null>
    printRecords<T extends Printer$printRecordsArgs<ExtArgs> = {}>(args?: Subset<T, Printer$printRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrintRecordPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Printer model
   */ 
  interface PrinterFieldRefs {
    readonly printerId: FieldRef<"Printer", 'String'>
    readonly printerType: FieldRef<"Printer", 'String'>
    readonly brandName: FieldRef<"Printer", 'String'>
    readonly description: FieldRef<"Printer", 'String'>
    readonly facility: FieldRef<"Printer", 'String'>
    readonly building: FieldRef<"Printer", 'String'>
    readonly room: FieldRef<"Printer", 'String'>
    readonly isInstalled: FieldRef<"Printer", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Printer findUnique
   */
  export type PrinterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Printer
     */
    select?: PrinterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrinterInclude<ExtArgs> | null
    /**
     * Filter, which Printer to fetch.
     */
    where: PrinterWhereUniqueInput
  }

  /**
   * Printer findUniqueOrThrow
   */
  export type PrinterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Printer
     */
    select?: PrinterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrinterInclude<ExtArgs> | null
    /**
     * Filter, which Printer to fetch.
     */
    where: PrinterWhereUniqueInput
  }

  /**
   * Printer findFirst
   */
  export type PrinterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Printer
     */
    select?: PrinterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrinterInclude<ExtArgs> | null
    /**
     * Filter, which Printer to fetch.
     */
    where?: PrinterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Printers to fetch.
     */
    orderBy?: PrinterOrderByWithRelationInput | PrinterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Printers.
     */
    cursor?: PrinterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Printers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Printers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Printers.
     */
    distinct?: PrinterScalarFieldEnum | PrinterScalarFieldEnum[]
  }

  /**
   * Printer findFirstOrThrow
   */
  export type PrinterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Printer
     */
    select?: PrinterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrinterInclude<ExtArgs> | null
    /**
     * Filter, which Printer to fetch.
     */
    where?: PrinterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Printers to fetch.
     */
    orderBy?: PrinterOrderByWithRelationInput | PrinterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Printers.
     */
    cursor?: PrinterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Printers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Printers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Printers.
     */
    distinct?: PrinterScalarFieldEnum | PrinterScalarFieldEnum[]
  }

  /**
   * Printer findMany
   */
  export type PrinterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Printer
     */
    select?: PrinterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrinterInclude<ExtArgs> | null
    /**
     * Filter, which Printers to fetch.
     */
    where?: PrinterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Printers to fetch.
     */
    orderBy?: PrinterOrderByWithRelationInput | PrinterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Printers.
     */
    cursor?: PrinterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Printers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Printers.
     */
    skip?: number
    distinct?: PrinterScalarFieldEnum | PrinterScalarFieldEnum[]
  }

  /**
   * Printer create
   */
  export type PrinterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Printer
     */
    select?: PrinterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrinterInclude<ExtArgs> | null
    /**
     * The data needed to create a Printer.
     */
    data: XOR<PrinterCreateInput, PrinterUncheckedCreateInput>
  }

  /**
   * Printer createMany
   */
  export type PrinterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Printers.
     */
    data: PrinterCreateManyInput | PrinterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Printer createManyAndReturn
   */
  export type PrinterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Printer
     */
    select?: PrinterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Printers.
     */
    data: PrinterCreateManyInput | PrinterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Printer update
   */
  export type PrinterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Printer
     */
    select?: PrinterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrinterInclude<ExtArgs> | null
    /**
     * The data needed to update a Printer.
     */
    data: XOR<PrinterUpdateInput, PrinterUncheckedUpdateInput>
    /**
     * Choose, which Printer to update.
     */
    where: PrinterWhereUniqueInput
  }

  /**
   * Printer updateMany
   */
  export type PrinterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Printers.
     */
    data: XOR<PrinterUpdateManyMutationInput, PrinterUncheckedUpdateManyInput>
    /**
     * Filter which Printers to update
     */
    where?: PrinterWhereInput
  }

  /**
   * Printer upsert
   */
  export type PrinterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Printer
     */
    select?: PrinterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrinterInclude<ExtArgs> | null
    /**
     * The filter to search for the Printer to update in case it exists.
     */
    where: PrinterWhereUniqueInput
    /**
     * In case the Printer found by the `where` argument doesn't exist, create a new Printer with this data.
     */
    create: XOR<PrinterCreateInput, PrinterUncheckedCreateInput>
    /**
     * In case the Printer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PrinterUpdateInput, PrinterUncheckedUpdateInput>
  }

  /**
   * Printer delete
   */
  export type PrinterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Printer
     */
    select?: PrinterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrinterInclude<ExtArgs> | null
    /**
     * Filter which Printer to delete.
     */
    where: PrinterWhereUniqueInput
  }

  /**
   * Printer deleteMany
   */
  export type PrinterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Printers to delete
     */
    where?: PrinterWhereInput
  }

  /**
   * Printer.purchaseOrders
   */
  export type Printer$purchaseOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    where?: PurchaseOrderWhereInput
    orderBy?: PurchaseOrderOrderByWithRelationInput | PurchaseOrderOrderByWithRelationInput[]
    cursor?: PurchaseOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PurchaseOrderScalarFieldEnum | PurchaseOrderScalarFieldEnum[]
  }

  /**
   * Printer.printOrders
   */
  export type Printer$printOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintOrder
     */
    select?: PrintOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrintOrderInclude<ExtArgs> | null
    where?: PrintOrderWhereInput
    orderBy?: PrintOrderOrderByWithRelationInput | PrintOrderOrderByWithRelationInput[]
    cursor?: PrintOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PrintOrderScalarFieldEnum | PrintOrderScalarFieldEnum[]
  }

  /**
   * Printer.printRecords
   */
  export type Printer$printRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintRecord
     */
    select?: PrintRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrintRecordInclude<ExtArgs> | null
    where?: PrintRecordWhereInput
    orderBy?: PrintRecordOrderByWithRelationInput | PrintRecordOrderByWithRelationInput[]
    cursor?: PrintRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PrintRecordScalarFieldEnum | PrintRecordScalarFieldEnum[]
  }

  /**
   * Printer without action
   */
  export type PrinterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Printer
     */
    select?: PrinterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrinterInclude<ExtArgs> | null
  }


  /**
   * Model PurchaseOrder
   */

  export type AggregatePurchaseOrder = {
    _count: PurchaseOrderCountAggregateOutputType | null
    _avg: PurchaseOrderAvgAggregateOutputType | null
    _sum: PurchaseOrderSumAggregateOutputType | null
    _min: PurchaseOrderMinAggregateOutputType | null
    _max: PurchaseOrderMaxAggregateOutputType | null
  }

  export type PurchaseOrderAvgAggregateOutputType = {
    price: number | null
    quantity: number | null
  }

  export type PurchaseOrderSumAggregateOutputType = {
    price: number | null
    quantity: number | null
  }

  export type PurchaseOrderMinAggregateOutputType = {
    transactionId: string | null
    purchaseTime: Date | null
    price: number | null
    status: string | null
    quantity: number | null
    paperType: string | null
    customerId: string | null
    printerId: string | null
  }

  export type PurchaseOrderMaxAggregateOutputType = {
    transactionId: string | null
    purchaseTime: Date | null
    price: number | null
    status: string | null
    quantity: number | null
    paperType: string | null
    customerId: string | null
    printerId: string | null
  }

  export type PurchaseOrderCountAggregateOutputType = {
    transactionId: number
    purchaseTime: number
    price: number
    status: number
    quantity: number
    paperType: number
    customerId: number
    printerId: number
    _all: number
  }


  export type PurchaseOrderAvgAggregateInputType = {
    price?: true
    quantity?: true
  }

  export type PurchaseOrderSumAggregateInputType = {
    price?: true
    quantity?: true
  }

  export type PurchaseOrderMinAggregateInputType = {
    transactionId?: true
    purchaseTime?: true
    price?: true
    status?: true
    quantity?: true
    paperType?: true
    customerId?: true
    printerId?: true
  }

  export type PurchaseOrderMaxAggregateInputType = {
    transactionId?: true
    purchaseTime?: true
    price?: true
    status?: true
    quantity?: true
    paperType?: true
    customerId?: true
    printerId?: true
  }

  export type PurchaseOrderCountAggregateInputType = {
    transactionId?: true
    purchaseTime?: true
    price?: true
    status?: true
    quantity?: true
    paperType?: true
    customerId?: true
    printerId?: true
    _all?: true
  }

  export type PurchaseOrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PurchaseOrder to aggregate.
     */
    where?: PurchaseOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseOrders to fetch.
     */
    orderBy?: PurchaseOrderOrderByWithRelationInput | PurchaseOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PurchaseOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PurchaseOrders
    **/
    _count?: true | PurchaseOrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PurchaseOrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PurchaseOrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PurchaseOrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PurchaseOrderMaxAggregateInputType
  }

  export type GetPurchaseOrderAggregateType<T extends PurchaseOrderAggregateArgs> = {
        [P in keyof T & keyof AggregatePurchaseOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePurchaseOrder[P]>
      : GetScalarType<T[P], AggregatePurchaseOrder[P]>
  }




  export type PurchaseOrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PurchaseOrderWhereInput
    orderBy?: PurchaseOrderOrderByWithAggregationInput | PurchaseOrderOrderByWithAggregationInput[]
    by: PurchaseOrderScalarFieldEnum[] | PurchaseOrderScalarFieldEnum
    having?: PurchaseOrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PurchaseOrderCountAggregateInputType | true
    _avg?: PurchaseOrderAvgAggregateInputType
    _sum?: PurchaseOrderSumAggregateInputType
    _min?: PurchaseOrderMinAggregateInputType
    _max?: PurchaseOrderMaxAggregateInputType
  }

  export type PurchaseOrderGroupByOutputType = {
    transactionId: string
    purchaseTime: Date
    price: number
    status: string
    quantity: number
    paperType: string
    customerId: string
    printerId: string
    _count: PurchaseOrderCountAggregateOutputType | null
    _avg: PurchaseOrderAvgAggregateOutputType | null
    _sum: PurchaseOrderSumAggregateOutputType | null
    _min: PurchaseOrderMinAggregateOutputType | null
    _max: PurchaseOrderMaxAggregateOutputType | null
  }

  type GetPurchaseOrderGroupByPayload<T extends PurchaseOrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PurchaseOrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PurchaseOrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PurchaseOrderGroupByOutputType[P]>
            : GetScalarType<T[P], PurchaseOrderGroupByOutputType[P]>
        }
      >
    >


  export type PurchaseOrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    transactionId?: boolean
    purchaseTime?: boolean
    price?: boolean
    status?: boolean
    quantity?: boolean
    paperType?: boolean
    customerId?: boolean
    printerId?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    printer?: boolean | PrinterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["purchaseOrder"]>

  export type PurchaseOrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    transactionId?: boolean
    purchaseTime?: boolean
    price?: boolean
    status?: boolean
    quantity?: boolean
    paperType?: boolean
    customerId?: boolean
    printerId?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    printer?: boolean | PrinterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["purchaseOrder"]>

  export type PurchaseOrderSelectScalar = {
    transactionId?: boolean
    purchaseTime?: boolean
    price?: boolean
    status?: boolean
    quantity?: boolean
    paperType?: boolean
    customerId?: boolean
    printerId?: boolean
  }

  export type PurchaseOrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    printer?: boolean | PrinterDefaultArgs<ExtArgs>
  }
  export type PurchaseOrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    printer?: boolean | PrinterDefaultArgs<ExtArgs>
  }

  export type $PurchaseOrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PurchaseOrder"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs>
      printer: Prisma.$PrinterPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      transactionId: string
      purchaseTime: Date
      price: number
      status: string
      quantity: number
      paperType: string
      customerId: string
      printerId: string
    }, ExtArgs["result"]["purchaseOrder"]>
    composites: {}
  }

  type PurchaseOrderGetPayload<S extends boolean | null | undefined | PurchaseOrderDefaultArgs> = $Result.GetResult<Prisma.$PurchaseOrderPayload, S>

  type PurchaseOrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PurchaseOrderFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PurchaseOrderCountAggregateInputType | true
    }

  export interface PurchaseOrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PurchaseOrder'], meta: { name: 'PurchaseOrder' } }
    /**
     * Find zero or one PurchaseOrder that matches the filter.
     * @param {PurchaseOrderFindUniqueArgs} args - Arguments to find a PurchaseOrder
     * @example
     * // Get one PurchaseOrder
     * const purchaseOrder = await prisma.purchaseOrder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PurchaseOrderFindUniqueArgs>(args: SelectSubset<T, PurchaseOrderFindUniqueArgs<ExtArgs>>): Prisma__PurchaseOrderClient<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PurchaseOrder that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PurchaseOrderFindUniqueOrThrowArgs} args - Arguments to find a PurchaseOrder
     * @example
     * // Get one PurchaseOrder
     * const purchaseOrder = await prisma.purchaseOrder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PurchaseOrderFindUniqueOrThrowArgs>(args: SelectSubset<T, PurchaseOrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PurchaseOrderClient<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PurchaseOrder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderFindFirstArgs} args - Arguments to find a PurchaseOrder
     * @example
     * // Get one PurchaseOrder
     * const purchaseOrder = await prisma.purchaseOrder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PurchaseOrderFindFirstArgs>(args?: SelectSubset<T, PurchaseOrderFindFirstArgs<ExtArgs>>): Prisma__PurchaseOrderClient<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PurchaseOrder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderFindFirstOrThrowArgs} args - Arguments to find a PurchaseOrder
     * @example
     * // Get one PurchaseOrder
     * const purchaseOrder = await prisma.purchaseOrder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PurchaseOrderFindFirstOrThrowArgs>(args?: SelectSubset<T, PurchaseOrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__PurchaseOrderClient<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PurchaseOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PurchaseOrders
     * const purchaseOrders = await prisma.purchaseOrder.findMany()
     * 
     * // Get first 10 PurchaseOrders
     * const purchaseOrders = await prisma.purchaseOrder.findMany({ take: 10 })
     * 
     * // Only select the `transactionId`
     * const purchaseOrderWithTransactionIdOnly = await prisma.purchaseOrder.findMany({ select: { transactionId: true } })
     * 
     */
    findMany<T extends PurchaseOrderFindManyArgs>(args?: SelectSubset<T, PurchaseOrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PurchaseOrder.
     * @param {PurchaseOrderCreateArgs} args - Arguments to create a PurchaseOrder.
     * @example
     * // Create one PurchaseOrder
     * const PurchaseOrder = await prisma.purchaseOrder.create({
     *   data: {
     *     // ... data to create a PurchaseOrder
     *   }
     * })
     * 
     */
    create<T extends PurchaseOrderCreateArgs>(args: SelectSubset<T, PurchaseOrderCreateArgs<ExtArgs>>): Prisma__PurchaseOrderClient<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PurchaseOrders.
     * @param {PurchaseOrderCreateManyArgs} args - Arguments to create many PurchaseOrders.
     * @example
     * // Create many PurchaseOrders
     * const purchaseOrder = await prisma.purchaseOrder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PurchaseOrderCreateManyArgs>(args?: SelectSubset<T, PurchaseOrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PurchaseOrders and returns the data saved in the database.
     * @param {PurchaseOrderCreateManyAndReturnArgs} args - Arguments to create many PurchaseOrders.
     * @example
     * // Create many PurchaseOrders
     * const purchaseOrder = await prisma.purchaseOrder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PurchaseOrders and only return the `transactionId`
     * const purchaseOrderWithTransactionIdOnly = await prisma.purchaseOrder.createManyAndReturn({ 
     *   select: { transactionId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PurchaseOrderCreateManyAndReturnArgs>(args?: SelectSubset<T, PurchaseOrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PurchaseOrder.
     * @param {PurchaseOrderDeleteArgs} args - Arguments to delete one PurchaseOrder.
     * @example
     * // Delete one PurchaseOrder
     * const PurchaseOrder = await prisma.purchaseOrder.delete({
     *   where: {
     *     // ... filter to delete one PurchaseOrder
     *   }
     * })
     * 
     */
    delete<T extends PurchaseOrderDeleteArgs>(args: SelectSubset<T, PurchaseOrderDeleteArgs<ExtArgs>>): Prisma__PurchaseOrderClient<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PurchaseOrder.
     * @param {PurchaseOrderUpdateArgs} args - Arguments to update one PurchaseOrder.
     * @example
     * // Update one PurchaseOrder
     * const purchaseOrder = await prisma.purchaseOrder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PurchaseOrderUpdateArgs>(args: SelectSubset<T, PurchaseOrderUpdateArgs<ExtArgs>>): Prisma__PurchaseOrderClient<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PurchaseOrders.
     * @param {PurchaseOrderDeleteManyArgs} args - Arguments to filter PurchaseOrders to delete.
     * @example
     * // Delete a few PurchaseOrders
     * const { count } = await prisma.purchaseOrder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PurchaseOrderDeleteManyArgs>(args?: SelectSubset<T, PurchaseOrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PurchaseOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PurchaseOrders
     * const purchaseOrder = await prisma.purchaseOrder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PurchaseOrderUpdateManyArgs>(args: SelectSubset<T, PurchaseOrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PurchaseOrder.
     * @param {PurchaseOrderUpsertArgs} args - Arguments to update or create a PurchaseOrder.
     * @example
     * // Update or create a PurchaseOrder
     * const purchaseOrder = await prisma.purchaseOrder.upsert({
     *   create: {
     *     // ... data to create a PurchaseOrder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PurchaseOrder we want to update
     *   }
     * })
     */
    upsert<T extends PurchaseOrderUpsertArgs>(args: SelectSubset<T, PurchaseOrderUpsertArgs<ExtArgs>>): Prisma__PurchaseOrderClient<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PurchaseOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderCountArgs} args - Arguments to filter PurchaseOrders to count.
     * @example
     * // Count the number of PurchaseOrders
     * const count = await prisma.purchaseOrder.count({
     *   where: {
     *     // ... the filter for the PurchaseOrders we want to count
     *   }
     * })
    **/
    count<T extends PurchaseOrderCountArgs>(
      args?: Subset<T, PurchaseOrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PurchaseOrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PurchaseOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PurchaseOrderAggregateArgs>(args: Subset<T, PurchaseOrderAggregateArgs>): Prisma.PrismaPromise<GetPurchaseOrderAggregateType<T>>

    /**
     * Group by PurchaseOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PurchaseOrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PurchaseOrderGroupByArgs['orderBy'] }
        : { orderBy?: PurchaseOrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PurchaseOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPurchaseOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PurchaseOrder model
   */
  readonly fields: PurchaseOrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PurchaseOrder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PurchaseOrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    printer<T extends PrinterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PrinterDefaultArgs<ExtArgs>>): Prisma__PrinterClient<$Result.GetResult<Prisma.$PrinterPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PurchaseOrder model
   */ 
  interface PurchaseOrderFieldRefs {
    readonly transactionId: FieldRef<"PurchaseOrder", 'String'>
    readonly purchaseTime: FieldRef<"PurchaseOrder", 'DateTime'>
    readonly price: FieldRef<"PurchaseOrder", 'Float'>
    readonly status: FieldRef<"PurchaseOrder", 'String'>
    readonly quantity: FieldRef<"PurchaseOrder", 'Int'>
    readonly paperType: FieldRef<"PurchaseOrder", 'String'>
    readonly customerId: FieldRef<"PurchaseOrder", 'String'>
    readonly printerId: FieldRef<"PurchaseOrder", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PurchaseOrder findUnique
   */
  export type PurchaseOrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseOrder to fetch.
     */
    where: PurchaseOrderWhereUniqueInput
  }

  /**
   * PurchaseOrder findUniqueOrThrow
   */
  export type PurchaseOrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseOrder to fetch.
     */
    where: PurchaseOrderWhereUniqueInput
  }

  /**
   * PurchaseOrder findFirst
   */
  export type PurchaseOrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseOrder to fetch.
     */
    where?: PurchaseOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseOrders to fetch.
     */
    orderBy?: PurchaseOrderOrderByWithRelationInput | PurchaseOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PurchaseOrders.
     */
    cursor?: PurchaseOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PurchaseOrders.
     */
    distinct?: PurchaseOrderScalarFieldEnum | PurchaseOrderScalarFieldEnum[]
  }

  /**
   * PurchaseOrder findFirstOrThrow
   */
  export type PurchaseOrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseOrder to fetch.
     */
    where?: PurchaseOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseOrders to fetch.
     */
    orderBy?: PurchaseOrderOrderByWithRelationInput | PurchaseOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PurchaseOrders.
     */
    cursor?: PurchaseOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PurchaseOrders.
     */
    distinct?: PurchaseOrderScalarFieldEnum | PurchaseOrderScalarFieldEnum[]
  }

  /**
   * PurchaseOrder findMany
   */
  export type PurchaseOrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseOrders to fetch.
     */
    where?: PurchaseOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseOrders to fetch.
     */
    orderBy?: PurchaseOrderOrderByWithRelationInput | PurchaseOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PurchaseOrders.
     */
    cursor?: PurchaseOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseOrders.
     */
    skip?: number
    distinct?: PurchaseOrderScalarFieldEnum | PurchaseOrderScalarFieldEnum[]
  }

  /**
   * PurchaseOrder create
   */
  export type PurchaseOrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    /**
     * The data needed to create a PurchaseOrder.
     */
    data: XOR<PurchaseOrderCreateInput, PurchaseOrderUncheckedCreateInput>
  }

  /**
   * PurchaseOrder createMany
   */
  export type PurchaseOrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PurchaseOrders.
     */
    data: PurchaseOrderCreateManyInput | PurchaseOrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PurchaseOrder createManyAndReturn
   */
  export type PurchaseOrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PurchaseOrders.
     */
    data: PurchaseOrderCreateManyInput | PurchaseOrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PurchaseOrder update
   */
  export type PurchaseOrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    /**
     * The data needed to update a PurchaseOrder.
     */
    data: XOR<PurchaseOrderUpdateInput, PurchaseOrderUncheckedUpdateInput>
    /**
     * Choose, which PurchaseOrder to update.
     */
    where: PurchaseOrderWhereUniqueInput
  }

  /**
   * PurchaseOrder updateMany
   */
  export type PurchaseOrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PurchaseOrders.
     */
    data: XOR<PurchaseOrderUpdateManyMutationInput, PurchaseOrderUncheckedUpdateManyInput>
    /**
     * Filter which PurchaseOrders to update
     */
    where?: PurchaseOrderWhereInput
  }

  /**
   * PurchaseOrder upsert
   */
  export type PurchaseOrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    /**
     * The filter to search for the PurchaseOrder to update in case it exists.
     */
    where: PurchaseOrderWhereUniqueInput
    /**
     * In case the PurchaseOrder found by the `where` argument doesn't exist, create a new PurchaseOrder with this data.
     */
    create: XOR<PurchaseOrderCreateInput, PurchaseOrderUncheckedCreateInput>
    /**
     * In case the PurchaseOrder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PurchaseOrderUpdateInput, PurchaseOrderUncheckedUpdateInput>
  }

  /**
   * PurchaseOrder delete
   */
  export type PurchaseOrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    /**
     * Filter which PurchaseOrder to delete.
     */
    where: PurchaseOrderWhereUniqueInput
  }

  /**
   * PurchaseOrder deleteMany
   */
  export type PurchaseOrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PurchaseOrders to delete
     */
    where?: PurchaseOrderWhereInput
  }

  /**
   * PurchaseOrder without action
   */
  export type PurchaseOrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
  }


  /**
   * Model PrintOrder
   */

  export type AggregatePrintOrder = {
    _count: PrintOrderCountAggregateOutputType | null
    _avg: PrintOrderAvgAggregateOutputType | null
    _sum: PrintOrderSumAggregateOutputType | null
    _min: PrintOrderMinAggregateOutputType | null
    _max: PrintOrderMaxAggregateOutputType | null
  }

  export type PrintOrderAvgAggregateOutputType = {
    copyCount: number | null
  }

  export type PrintOrderSumAggregateOutputType = {
    copyCount: number | null
  }

  export type PrintOrderMinAggregateOutputType = {
    orderId: string | null
    printAttributes: string | null
    startTime: Date | null
    endTime: Date | null
    status: string | null
    copyCount: number | null
    printedDocument: string | null
    customerId: string | null
    printerId: string | null
  }

  export type PrintOrderMaxAggregateOutputType = {
    orderId: string | null
    printAttributes: string | null
    startTime: Date | null
    endTime: Date | null
    status: string | null
    copyCount: number | null
    printedDocument: string | null
    customerId: string | null
    printerId: string | null
  }

  export type PrintOrderCountAggregateOutputType = {
    orderId: number
    printAttributes: number
    startTime: number
    endTime: number
    status: number
    copyCount: number
    printedDocument: number
    customerId: number
    printerId: number
    _all: number
  }


  export type PrintOrderAvgAggregateInputType = {
    copyCount?: true
  }

  export type PrintOrderSumAggregateInputType = {
    copyCount?: true
  }

  export type PrintOrderMinAggregateInputType = {
    orderId?: true
    printAttributes?: true
    startTime?: true
    endTime?: true
    status?: true
    copyCount?: true
    printedDocument?: true
    customerId?: true
    printerId?: true
  }

  export type PrintOrderMaxAggregateInputType = {
    orderId?: true
    printAttributes?: true
    startTime?: true
    endTime?: true
    status?: true
    copyCount?: true
    printedDocument?: true
    customerId?: true
    printerId?: true
  }

  export type PrintOrderCountAggregateInputType = {
    orderId?: true
    printAttributes?: true
    startTime?: true
    endTime?: true
    status?: true
    copyCount?: true
    printedDocument?: true
    customerId?: true
    printerId?: true
    _all?: true
  }

  export type PrintOrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PrintOrder to aggregate.
     */
    where?: PrintOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrintOrders to fetch.
     */
    orderBy?: PrintOrderOrderByWithRelationInput | PrintOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PrintOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrintOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrintOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PrintOrders
    **/
    _count?: true | PrintOrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PrintOrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PrintOrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PrintOrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PrintOrderMaxAggregateInputType
  }

  export type GetPrintOrderAggregateType<T extends PrintOrderAggregateArgs> = {
        [P in keyof T & keyof AggregatePrintOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePrintOrder[P]>
      : GetScalarType<T[P], AggregatePrintOrder[P]>
  }




  export type PrintOrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrintOrderWhereInput
    orderBy?: PrintOrderOrderByWithAggregationInput | PrintOrderOrderByWithAggregationInput[]
    by: PrintOrderScalarFieldEnum[] | PrintOrderScalarFieldEnum
    having?: PrintOrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PrintOrderCountAggregateInputType | true
    _avg?: PrintOrderAvgAggregateInputType
    _sum?: PrintOrderSumAggregateInputType
    _min?: PrintOrderMinAggregateInputType
    _max?: PrintOrderMaxAggregateInputType
  }

  export type PrintOrderGroupByOutputType = {
    orderId: string
    printAttributes: string
    startTime: Date
    endTime: Date
    status: string
    copyCount: number
    printedDocument: string
    customerId: string
    printerId: string
    _count: PrintOrderCountAggregateOutputType | null
    _avg: PrintOrderAvgAggregateOutputType | null
    _sum: PrintOrderSumAggregateOutputType | null
    _min: PrintOrderMinAggregateOutputType | null
    _max: PrintOrderMaxAggregateOutputType | null
  }

  type GetPrintOrderGroupByPayload<T extends PrintOrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PrintOrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PrintOrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PrintOrderGroupByOutputType[P]>
            : GetScalarType<T[P], PrintOrderGroupByOutputType[P]>
        }
      >
    >


  export type PrintOrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    orderId?: boolean
    printAttributes?: boolean
    startTime?: boolean
    endTime?: boolean
    status?: boolean
    copyCount?: boolean
    printedDocument?: boolean
    customerId?: boolean
    printerId?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    printer?: boolean | PrinterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["printOrder"]>

  export type PrintOrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    orderId?: boolean
    printAttributes?: boolean
    startTime?: boolean
    endTime?: boolean
    status?: boolean
    copyCount?: boolean
    printedDocument?: boolean
    customerId?: boolean
    printerId?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    printer?: boolean | PrinterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["printOrder"]>

  export type PrintOrderSelectScalar = {
    orderId?: boolean
    printAttributes?: boolean
    startTime?: boolean
    endTime?: boolean
    status?: boolean
    copyCount?: boolean
    printedDocument?: boolean
    customerId?: boolean
    printerId?: boolean
  }

  export type PrintOrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    printer?: boolean | PrinterDefaultArgs<ExtArgs>
  }
  export type PrintOrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    printer?: boolean | PrinterDefaultArgs<ExtArgs>
  }

  export type $PrintOrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PrintOrder"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs>
      printer: Prisma.$PrinterPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      orderId: string
      printAttributes: string
      startTime: Date
      endTime: Date
      status: string
      copyCount: number
      printedDocument: string
      customerId: string
      printerId: string
    }, ExtArgs["result"]["printOrder"]>
    composites: {}
  }

  type PrintOrderGetPayload<S extends boolean | null | undefined | PrintOrderDefaultArgs> = $Result.GetResult<Prisma.$PrintOrderPayload, S>

  type PrintOrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PrintOrderFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PrintOrderCountAggregateInputType | true
    }

  export interface PrintOrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PrintOrder'], meta: { name: 'PrintOrder' } }
    /**
     * Find zero or one PrintOrder that matches the filter.
     * @param {PrintOrderFindUniqueArgs} args - Arguments to find a PrintOrder
     * @example
     * // Get one PrintOrder
     * const printOrder = await prisma.printOrder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PrintOrderFindUniqueArgs>(args: SelectSubset<T, PrintOrderFindUniqueArgs<ExtArgs>>): Prisma__PrintOrderClient<$Result.GetResult<Prisma.$PrintOrderPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PrintOrder that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PrintOrderFindUniqueOrThrowArgs} args - Arguments to find a PrintOrder
     * @example
     * // Get one PrintOrder
     * const printOrder = await prisma.printOrder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PrintOrderFindUniqueOrThrowArgs>(args: SelectSubset<T, PrintOrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PrintOrderClient<$Result.GetResult<Prisma.$PrintOrderPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PrintOrder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrintOrderFindFirstArgs} args - Arguments to find a PrintOrder
     * @example
     * // Get one PrintOrder
     * const printOrder = await prisma.printOrder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PrintOrderFindFirstArgs>(args?: SelectSubset<T, PrintOrderFindFirstArgs<ExtArgs>>): Prisma__PrintOrderClient<$Result.GetResult<Prisma.$PrintOrderPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PrintOrder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrintOrderFindFirstOrThrowArgs} args - Arguments to find a PrintOrder
     * @example
     * // Get one PrintOrder
     * const printOrder = await prisma.printOrder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PrintOrderFindFirstOrThrowArgs>(args?: SelectSubset<T, PrintOrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__PrintOrderClient<$Result.GetResult<Prisma.$PrintOrderPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PrintOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrintOrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PrintOrders
     * const printOrders = await prisma.printOrder.findMany()
     * 
     * // Get first 10 PrintOrders
     * const printOrders = await prisma.printOrder.findMany({ take: 10 })
     * 
     * // Only select the `orderId`
     * const printOrderWithOrderIdOnly = await prisma.printOrder.findMany({ select: { orderId: true } })
     * 
     */
    findMany<T extends PrintOrderFindManyArgs>(args?: SelectSubset<T, PrintOrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrintOrderPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PrintOrder.
     * @param {PrintOrderCreateArgs} args - Arguments to create a PrintOrder.
     * @example
     * // Create one PrintOrder
     * const PrintOrder = await prisma.printOrder.create({
     *   data: {
     *     // ... data to create a PrintOrder
     *   }
     * })
     * 
     */
    create<T extends PrintOrderCreateArgs>(args: SelectSubset<T, PrintOrderCreateArgs<ExtArgs>>): Prisma__PrintOrderClient<$Result.GetResult<Prisma.$PrintOrderPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PrintOrders.
     * @param {PrintOrderCreateManyArgs} args - Arguments to create many PrintOrders.
     * @example
     * // Create many PrintOrders
     * const printOrder = await prisma.printOrder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PrintOrderCreateManyArgs>(args?: SelectSubset<T, PrintOrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PrintOrders and returns the data saved in the database.
     * @param {PrintOrderCreateManyAndReturnArgs} args - Arguments to create many PrintOrders.
     * @example
     * // Create many PrintOrders
     * const printOrder = await prisma.printOrder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PrintOrders and only return the `orderId`
     * const printOrderWithOrderIdOnly = await prisma.printOrder.createManyAndReturn({ 
     *   select: { orderId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PrintOrderCreateManyAndReturnArgs>(args?: SelectSubset<T, PrintOrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrintOrderPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PrintOrder.
     * @param {PrintOrderDeleteArgs} args - Arguments to delete one PrintOrder.
     * @example
     * // Delete one PrintOrder
     * const PrintOrder = await prisma.printOrder.delete({
     *   where: {
     *     // ... filter to delete one PrintOrder
     *   }
     * })
     * 
     */
    delete<T extends PrintOrderDeleteArgs>(args: SelectSubset<T, PrintOrderDeleteArgs<ExtArgs>>): Prisma__PrintOrderClient<$Result.GetResult<Prisma.$PrintOrderPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PrintOrder.
     * @param {PrintOrderUpdateArgs} args - Arguments to update one PrintOrder.
     * @example
     * // Update one PrintOrder
     * const printOrder = await prisma.printOrder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PrintOrderUpdateArgs>(args: SelectSubset<T, PrintOrderUpdateArgs<ExtArgs>>): Prisma__PrintOrderClient<$Result.GetResult<Prisma.$PrintOrderPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PrintOrders.
     * @param {PrintOrderDeleteManyArgs} args - Arguments to filter PrintOrders to delete.
     * @example
     * // Delete a few PrintOrders
     * const { count } = await prisma.printOrder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PrintOrderDeleteManyArgs>(args?: SelectSubset<T, PrintOrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PrintOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrintOrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PrintOrders
     * const printOrder = await prisma.printOrder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PrintOrderUpdateManyArgs>(args: SelectSubset<T, PrintOrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PrintOrder.
     * @param {PrintOrderUpsertArgs} args - Arguments to update or create a PrintOrder.
     * @example
     * // Update or create a PrintOrder
     * const printOrder = await prisma.printOrder.upsert({
     *   create: {
     *     // ... data to create a PrintOrder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PrintOrder we want to update
     *   }
     * })
     */
    upsert<T extends PrintOrderUpsertArgs>(args: SelectSubset<T, PrintOrderUpsertArgs<ExtArgs>>): Prisma__PrintOrderClient<$Result.GetResult<Prisma.$PrintOrderPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PrintOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrintOrderCountArgs} args - Arguments to filter PrintOrders to count.
     * @example
     * // Count the number of PrintOrders
     * const count = await prisma.printOrder.count({
     *   where: {
     *     // ... the filter for the PrintOrders we want to count
     *   }
     * })
    **/
    count<T extends PrintOrderCountArgs>(
      args?: Subset<T, PrintOrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PrintOrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PrintOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrintOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PrintOrderAggregateArgs>(args: Subset<T, PrintOrderAggregateArgs>): Prisma.PrismaPromise<GetPrintOrderAggregateType<T>>

    /**
     * Group by PrintOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrintOrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PrintOrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PrintOrderGroupByArgs['orderBy'] }
        : { orderBy?: PrintOrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PrintOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPrintOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PrintOrder model
   */
  readonly fields: PrintOrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PrintOrder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PrintOrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    printer<T extends PrinterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PrinterDefaultArgs<ExtArgs>>): Prisma__PrinterClient<$Result.GetResult<Prisma.$PrinterPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PrintOrder model
   */ 
  interface PrintOrderFieldRefs {
    readonly orderId: FieldRef<"PrintOrder", 'String'>
    readonly printAttributes: FieldRef<"PrintOrder", 'String'>
    readonly startTime: FieldRef<"PrintOrder", 'DateTime'>
    readonly endTime: FieldRef<"PrintOrder", 'DateTime'>
    readonly status: FieldRef<"PrintOrder", 'String'>
    readonly copyCount: FieldRef<"PrintOrder", 'Int'>
    readonly printedDocument: FieldRef<"PrintOrder", 'String'>
    readonly customerId: FieldRef<"PrintOrder", 'String'>
    readonly printerId: FieldRef<"PrintOrder", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PrintOrder findUnique
   */
  export type PrintOrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintOrder
     */
    select?: PrintOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrintOrderInclude<ExtArgs> | null
    /**
     * Filter, which PrintOrder to fetch.
     */
    where: PrintOrderWhereUniqueInput
  }

  /**
   * PrintOrder findUniqueOrThrow
   */
  export type PrintOrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintOrder
     */
    select?: PrintOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrintOrderInclude<ExtArgs> | null
    /**
     * Filter, which PrintOrder to fetch.
     */
    where: PrintOrderWhereUniqueInput
  }

  /**
   * PrintOrder findFirst
   */
  export type PrintOrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintOrder
     */
    select?: PrintOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrintOrderInclude<ExtArgs> | null
    /**
     * Filter, which PrintOrder to fetch.
     */
    where?: PrintOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrintOrders to fetch.
     */
    orderBy?: PrintOrderOrderByWithRelationInput | PrintOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PrintOrders.
     */
    cursor?: PrintOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrintOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrintOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PrintOrders.
     */
    distinct?: PrintOrderScalarFieldEnum | PrintOrderScalarFieldEnum[]
  }

  /**
   * PrintOrder findFirstOrThrow
   */
  export type PrintOrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintOrder
     */
    select?: PrintOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrintOrderInclude<ExtArgs> | null
    /**
     * Filter, which PrintOrder to fetch.
     */
    where?: PrintOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrintOrders to fetch.
     */
    orderBy?: PrintOrderOrderByWithRelationInput | PrintOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PrintOrders.
     */
    cursor?: PrintOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrintOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrintOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PrintOrders.
     */
    distinct?: PrintOrderScalarFieldEnum | PrintOrderScalarFieldEnum[]
  }

  /**
   * PrintOrder findMany
   */
  export type PrintOrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintOrder
     */
    select?: PrintOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrintOrderInclude<ExtArgs> | null
    /**
     * Filter, which PrintOrders to fetch.
     */
    where?: PrintOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrintOrders to fetch.
     */
    orderBy?: PrintOrderOrderByWithRelationInput | PrintOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PrintOrders.
     */
    cursor?: PrintOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrintOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrintOrders.
     */
    skip?: number
    distinct?: PrintOrderScalarFieldEnum | PrintOrderScalarFieldEnum[]
  }

  /**
   * PrintOrder create
   */
  export type PrintOrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintOrder
     */
    select?: PrintOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrintOrderInclude<ExtArgs> | null
    /**
     * The data needed to create a PrintOrder.
     */
    data: XOR<PrintOrderCreateInput, PrintOrderUncheckedCreateInput>
  }

  /**
   * PrintOrder createMany
   */
  export type PrintOrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PrintOrders.
     */
    data: PrintOrderCreateManyInput | PrintOrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PrintOrder createManyAndReturn
   */
  export type PrintOrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintOrder
     */
    select?: PrintOrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PrintOrders.
     */
    data: PrintOrderCreateManyInput | PrintOrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrintOrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PrintOrder update
   */
  export type PrintOrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintOrder
     */
    select?: PrintOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrintOrderInclude<ExtArgs> | null
    /**
     * The data needed to update a PrintOrder.
     */
    data: XOR<PrintOrderUpdateInput, PrintOrderUncheckedUpdateInput>
    /**
     * Choose, which PrintOrder to update.
     */
    where: PrintOrderWhereUniqueInput
  }

  /**
   * PrintOrder updateMany
   */
  export type PrintOrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PrintOrders.
     */
    data: XOR<PrintOrderUpdateManyMutationInput, PrintOrderUncheckedUpdateManyInput>
    /**
     * Filter which PrintOrders to update
     */
    where?: PrintOrderWhereInput
  }

  /**
   * PrintOrder upsert
   */
  export type PrintOrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintOrder
     */
    select?: PrintOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrintOrderInclude<ExtArgs> | null
    /**
     * The filter to search for the PrintOrder to update in case it exists.
     */
    where: PrintOrderWhereUniqueInput
    /**
     * In case the PrintOrder found by the `where` argument doesn't exist, create a new PrintOrder with this data.
     */
    create: XOR<PrintOrderCreateInput, PrintOrderUncheckedCreateInput>
    /**
     * In case the PrintOrder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PrintOrderUpdateInput, PrintOrderUncheckedUpdateInput>
  }

  /**
   * PrintOrder delete
   */
  export type PrintOrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintOrder
     */
    select?: PrintOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrintOrderInclude<ExtArgs> | null
    /**
     * Filter which PrintOrder to delete.
     */
    where: PrintOrderWhereUniqueInput
  }

  /**
   * PrintOrder deleteMany
   */
  export type PrintOrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PrintOrders to delete
     */
    where?: PrintOrderWhereInput
  }

  /**
   * PrintOrder without action
   */
  export type PrintOrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintOrder
     */
    select?: PrintOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrintOrderInclude<ExtArgs> | null
  }


  /**
   * Model Document
   */

  export type AggregateDocument = {
    _count: DocumentCountAggregateOutputType | null
    _avg: DocumentAvgAggregateOutputType | null
    _sum: DocumentSumAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  export type DocumentAvgAggregateOutputType = {
    documentCount: number | null
  }

  export type DocumentSumAggregateOutputType = {
    documentCount: number | null
  }

  export type DocumentMinAggregateOutputType = {
    documentId: string | null
    title: string | null
    documentCount: number | null
    requiredDocument: string | null
  }

  export type DocumentMaxAggregateOutputType = {
    documentId: string | null
    title: string | null
    documentCount: number | null
    requiredDocument: string | null
  }

  export type DocumentCountAggregateOutputType = {
    documentId: number
    title: number
    documentCount: number
    requiredDocument: number
    _all: number
  }


  export type DocumentAvgAggregateInputType = {
    documentCount?: true
  }

  export type DocumentSumAggregateInputType = {
    documentCount?: true
  }

  export type DocumentMinAggregateInputType = {
    documentId?: true
    title?: true
    documentCount?: true
    requiredDocument?: true
  }

  export type DocumentMaxAggregateInputType = {
    documentId?: true
    title?: true
    documentCount?: true
    requiredDocument?: true
  }

  export type DocumentCountAggregateInputType = {
    documentId?: true
    title?: true
    documentCount?: true
    requiredDocument?: true
    _all?: true
  }

  export type DocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Document to aggregate.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Documents
    **/
    _count?: true | DocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DocumentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DocumentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentMaxAggregateInputType
  }

  export type GetDocumentAggregateType<T extends DocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocument[P]>
      : GetScalarType<T[P], AggregateDocument[P]>
  }




  export type DocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithAggregationInput | DocumentOrderByWithAggregationInput[]
    by: DocumentScalarFieldEnum[] | DocumentScalarFieldEnum
    having?: DocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentCountAggregateInputType | true
    _avg?: DocumentAvgAggregateInputType
    _sum?: DocumentSumAggregateInputType
    _min?: DocumentMinAggregateInputType
    _max?: DocumentMaxAggregateInputType
  }

  export type DocumentGroupByOutputType = {
    documentId: string
    title: string
    documentCount: number
    requiredDocument: string
    _count: DocumentCountAggregateOutputType | null
    _avg: DocumentAvgAggregateOutputType | null
    _sum: DocumentSumAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  type GetDocumentGroupByPayload<T extends DocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentGroupByOutputType[P]>
        }
      >
    >


  export type DocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    documentId?: boolean
    title?: boolean
    documentCount?: boolean
    requiredDocument?: boolean
    printRecords?: boolean | Document$printRecordsArgs<ExtArgs>
    _count?: boolean | DocumentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    documentId?: boolean
    title?: boolean
    documentCount?: boolean
    requiredDocument?: boolean
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectScalar = {
    documentId?: boolean
    title?: boolean
    documentCount?: boolean
    requiredDocument?: boolean
  }

  export type DocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    printRecords?: boolean | Document$printRecordsArgs<ExtArgs>
    _count?: boolean | DocumentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Document"
    objects: {
      printRecords: Prisma.$PrintRecordPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      documentId: string
      title: string
      documentCount: number
      requiredDocument: string
    }, ExtArgs["result"]["document"]>
    composites: {}
  }

  type DocumentGetPayload<S extends boolean | null | undefined | DocumentDefaultArgs> = $Result.GetResult<Prisma.$DocumentPayload, S>

  type DocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DocumentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DocumentCountAggregateInputType | true
    }

  export interface DocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Document'], meta: { name: 'Document' } }
    /**
     * Find zero or one Document that matches the filter.
     * @param {DocumentFindUniqueArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentFindUniqueArgs>(args: SelectSubset<T, DocumentFindUniqueArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Document that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DocumentFindUniqueOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Document that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentFindFirstArgs>(args?: SelectSubset<T, DocumentFindFirstArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Document that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Documents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Documents
     * const documents = await prisma.document.findMany()
     * 
     * // Get first 10 Documents
     * const documents = await prisma.document.findMany({ take: 10 })
     * 
     * // Only select the `documentId`
     * const documentWithDocumentIdOnly = await prisma.document.findMany({ select: { documentId: true } })
     * 
     */
    findMany<T extends DocumentFindManyArgs>(args?: SelectSubset<T, DocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Document.
     * @param {DocumentCreateArgs} args - Arguments to create a Document.
     * @example
     * // Create one Document
     * const Document = await prisma.document.create({
     *   data: {
     *     // ... data to create a Document
     *   }
     * })
     * 
     */
    create<T extends DocumentCreateArgs>(args: SelectSubset<T, DocumentCreateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Documents.
     * @param {DocumentCreateManyArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentCreateManyArgs>(args?: SelectSubset<T, DocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Documents and returns the data saved in the database.
     * @param {DocumentCreateManyAndReturnArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Documents and only return the `documentId`
     * const documentWithDocumentIdOnly = await prisma.document.createManyAndReturn({ 
     *   select: { documentId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Document.
     * @param {DocumentDeleteArgs} args - Arguments to delete one Document.
     * @example
     * // Delete one Document
     * const Document = await prisma.document.delete({
     *   where: {
     *     // ... filter to delete one Document
     *   }
     * })
     * 
     */
    delete<T extends DocumentDeleteArgs>(args: SelectSubset<T, DocumentDeleteArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Document.
     * @param {DocumentUpdateArgs} args - Arguments to update one Document.
     * @example
     * // Update one Document
     * const document = await prisma.document.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentUpdateArgs>(args: SelectSubset<T, DocumentUpdateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Documents.
     * @param {DocumentDeleteManyArgs} args - Arguments to filter Documents to delete.
     * @example
     * // Delete a few Documents
     * const { count } = await prisma.document.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentDeleteManyArgs>(args?: SelectSubset<T, DocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Documents
     * const document = await prisma.document.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentUpdateManyArgs>(args: SelectSubset<T, DocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Document.
     * @param {DocumentUpsertArgs} args - Arguments to update or create a Document.
     * @example
     * // Update or create a Document
     * const document = await prisma.document.upsert({
     *   create: {
     *     // ... data to create a Document
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Document we want to update
     *   }
     * })
     */
    upsert<T extends DocumentUpsertArgs>(args: SelectSubset<T, DocumentUpsertArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentCountArgs} args - Arguments to filter Documents to count.
     * @example
     * // Count the number of Documents
     * const count = await prisma.document.count({
     *   where: {
     *     // ... the filter for the Documents we want to count
     *   }
     * })
    **/
    count<T extends DocumentCountArgs>(
      args?: Subset<T, DocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentAggregateArgs>(args: Subset<T, DocumentAggregateArgs>): Prisma.PrismaPromise<GetDocumentAggregateType<T>>

    /**
     * Group by Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentGroupByArgs['orderBy'] }
        : { orderBy?: DocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Document model
   */
  readonly fields: DocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Document.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    printRecords<T extends Document$printRecordsArgs<ExtArgs> = {}>(args?: Subset<T, Document$printRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrintRecordPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Document model
   */ 
  interface DocumentFieldRefs {
    readonly documentId: FieldRef<"Document", 'String'>
    readonly title: FieldRef<"Document", 'String'>
    readonly documentCount: FieldRef<"Document", 'Int'>
    readonly requiredDocument: FieldRef<"Document", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Document findUnique
   */
  export type DocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findUniqueOrThrow
   */
  export type DocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findFirst
   */
  export type DocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findFirstOrThrow
   */
  export type DocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findMany
   */
  export type DocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Documents to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document create
   */
  export type DocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a Document.
     */
    data: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
  }

  /**
   * Document createMany
   */
  export type DocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Document createManyAndReturn
   */
  export type DocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Document update
   */
  export type DocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a Document.
     */
    data: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
    /**
     * Choose, which Document to update.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document updateMany
   */
  export type DocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Documents.
     */
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyInput>
    /**
     * Filter which Documents to update
     */
    where?: DocumentWhereInput
  }

  /**
   * Document upsert
   */
  export type DocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the Document to update in case it exists.
     */
    where: DocumentWhereUniqueInput
    /**
     * In case the Document found by the `where` argument doesn't exist, create a new Document with this data.
     */
    create: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
    /**
     * In case the Document was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
  }

  /**
   * Document delete
   */
  export type DocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter which Document to delete.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document deleteMany
   */
  export type DocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Documents to delete
     */
    where?: DocumentWhereInput
  }

  /**
   * Document.printRecords
   */
  export type Document$printRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintRecord
     */
    select?: PrintRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrintRecordInclude<ExtArgs> | null
    where?: PrintRecordWhereInput
    orderBy?: PrintRecordOrderByWithRelationInput | PrintRecordOrderByWithRelationInput[]
    cursor?: PrintRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PrintRecordScalarFieldEnum | PrintRecordScalarFieldEnum[]
  }

  /**
   * Document without action
   */
  export type DocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
  }


  /**
   * Model PrintRecord
   */

  export type AggregatePrintRecord = {
    _count: PrintRecordCountAggregateOutputType | null
    _min: PrintRecordMinAggregateOutputType | null
    _max: PrintRecordMaxAggregateOutputType | null
  }

  export type PrintRecordMinAggregateOutputType = {
    documentId: string | null
    printerId: string | null
  }

  export type PrintRecordMaxAggregateOutputType = {
    documentId: string | null
    printerId: string | null
  }

  export type PrintRecordCountAggregateOutputType = {
    documentId: number
    printerId: number
    _all: number
  }


  export type PrintRecordMinAggregateInputType = {
    documentId?: true
    printerId?: true
  }

  export type PrintRecordMaxAggregateInputType = {
    documentId?: true
    printerId?: true
  }

  export type PrintRecordCountAggregateInputType = {
    documentId?: true
    printerId?: true
    _all?: true
  }

  export type PrintRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PrintRecord to aggregate.
     */
    where?: PrintRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrintRecords to fetch.
     */
    orderBy?: PrintRecordOrderByWithRelationInput | PrintRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PrintRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrintRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrintRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PrintRecords
    **/
    _count?: true | PrintRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PrintRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PrintRecordMaxAggregateInputType
  }

  export type GetPrintRecordAggregateType<T extends PrintRecordAggregateArgs> = {
        [P in keyof T & keyof AggregatePrintRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePrintRecord[P]>
      : GetScalarType<T[P], AggregatePrintRecord[P]>
  }




  export type PrintRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrintRecordWhereInput
    orderBy?: PrintRecordOrderByWithAggregationInput | PrintRecordOrderByWithAggregationInput[]
    by: PrintRecordScalarFieldEnum[] | PrintRecordScalarFieldEnum
    having?: PrintRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PrintRecordCountAggregateInputType | true
    _min?: PrintRecordMinAggregateInputType
    _max?: PrintRecordMaxAggregateInputType
  }

  export type PrintRecordGroupByOutputType = {
    documentId: string
    printerId: string
    _count: PrintRecordCountAggregateOutputType | null
    _min: PrintRecordMinAggregateOutputType | null
    _max: PrintRecordMaxAggregateOutputType | null
  }

  type GetPrintRecordGroupByPayload<T extends PrintRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PrintRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PrintRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PrintRecordGroupByOutputType[P]>
            : GetScalarType<T[P], PrintRecordGroupByOutputType[P]>
        }
      >
    >


  export type PrintRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    documentId?: boolean
    printerId?: boolean
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    printer?: boolean | PrinterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["printRecord"]>

  export type PrintRecordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    documentId?: boolean
    printerId?: boolean
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    printer?: boolean | PrinterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["printRecord"]>

  export type PrintRecordSelectScalar = {
    documentId?: boolean
    printerId?: boolean
  }

  export type PrintRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    printer?: boolean | PrinterDefaultArgs<ExtArgs>
  }
  export type PrintRecordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    printer?: boolean | PrinterDefaultArgs<ExtArgs>
  }

  export type $PrintRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PrintRecord"
    objects: {
      document: Prisma.$DocumentPayload<ExtArgs>
      printer: Prisma.$PrinterPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      documentId: string
      printerId: string
    }, ExtArgs["result"]["printRecord"]>
    composites: {}
  }

  type PrintRecordGetPayload<S extends boolean | null | undefined | PrintRecordDefaultArgs> = $Result.GetResult<Prisma.$PrintRecordPayload, S>

  type PrintRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PrintRecordFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PrintRecordCountAggregateInputType | true
    }

  export interface PrintRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PrintRecord'], meta: { name: 'PrintRecord' } }
    /**
     * Find zero or one PrintRecord that matches the filter.
     * @param {PrintRecordFindUniqueArgs} args - Arguments to find a PrintRecord
     * @example
     * // Get one PrintRecord
     * const printRecord = await prisma.printRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PrintRecordFindUniqueArgs>(args: SelectSubset<T, PrintRecordFindUniqueArgs<ExtArgs>>): Prisma__PrintRecordClient<$Result.GetResult<Prisma.$PrintRecordPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PrintRecord that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PrintRecordFindUniqueOrThrowArgs} args - Arguments to find a PrintRecord
     * @example
     * // Get one PrintRecord
     * const printRecord = await prisma.printRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PrintRecordFindUniqueOrThrowArgs>(args: SelectSubset<T, PrintRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PrintRecordClient<$Result.GetResult<Prisma.$PrintRecordPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PrintRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrintRecordFindFirstArgs} args - Arguments to find a PrintRecord
     * @example
     * // Get one PrintRecord
     * const printRecord = await prisma.printRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PrintRecordFindFirstArgs>(args?: SelectSubset<T, PrintRecordFindFirstArgs<ExtArgs>>): Prisma__PrintRecordClient<$Result.GetResult<Prisma.$PrintRecordPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PrintRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrintRecordFindFirstOrThrowArgs} args - Arguments to find a PrintRecord
     * @example
     * // Get one PrintRecord
     * const printRecord = await prisma.printRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PrintRecordFindFirstOrThrowArgs>(args?: SelectSubset<T, PrintRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__PrintRecordClient<$Result.GetResult<Prisma.$PrintRecordPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PrintRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrintRecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PrintRecords
     * const printRecords = await prisma.printRecord.findMany()
     * 
     * // Get first 10 PrintRecords
     * const printRecords = await prisma.printRecord.findMany({ take: 10 })
     * 
     * // Only select the `documentId`
     * const printRecordWithDocumentIdOnly = await prisma.printRecord.findMany({ select: { documentId: true } })
     * 
     */
    findMany<T extends PrintRecordFindManyArgs>(args?: SelectSubset<T, PrintRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrintRecordPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PrintRecord.
     * @param {PrintRecordCreateArgs} args - Arguments to create a PrintRecord.
     * @example
     * // Create one PrintRecord
     * const PrintRecord = await prisma.printRecord.create({
     *   data: {
     *     // ... data to create a PrintRecord
     *   }
     * })
     * 
     */
    create<T extends PrintRecordCreateArgs>(args: SelectSubset<T, PrintRecordCreateArgs<ExtArgs>>): Prisma__PrintRecordClient<$Result.GetResult<Prisma.$PrintRecordPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PrintRecords.
     * @param {PrintRecordCreateManyArgs} args - Arguments to create many PrintRecords.
     * @example
     * // Create many PrintRecords
     * const printRecord = await prisma.printRecord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PrintRecordCreateManyArgs>(args?: SelectSubset<T, PrintRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PrintRecords and returns the data saved in the database.
     * @param {PrintRecordCreateManyAndReturnArgs} args - Arguments to create many PrintRecords.
     * @example
     * // Create many PrintRecords
     * const printRecord = await prisma.printRecord.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PrintRecords and only return the `documentId`
     * const printRecordWithDocumentIdOnly = await prisma.printRecord.createManyAndReturn({ 
     *   select: { documentId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PrintRecordCreateManyAndReturnArgs>(args?: SelectSubset<T, PrintRecordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrintRecordPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PrintRecord.
     * @param {PrintRecordDeleteArgs} args - Arguments to delete one PrintRecord.
     * @example
     * // Delete one PrintRecord
     * const PrintRecord = await prisma.printRecord.delete({
     *   where: {
     *     // ... filter to delete one PrintRecord
     *   }
     * })
     * 
     */
    delete<T extends PrintRecordDeleteArgs>(args: SelectSubset<T, PrintRecordDeleteArgs<ExtArgs>>): Prisma__PrintRecordClient<$Result.GetResult<Prisma.$PrintRecordPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PrintRecord.
     * @param {PrintRecordUpdateArgs} args - Arguments to update one PrintRecord.
     * @example
     * // Update one PrintRecord
     * const printRecord = await prisma.printRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PrintRecordUpdateArgs>(args: SelectSubset<T, PrintRecordUpdateArgs<ExtArgs>>): Prisma__PrintRecordClient<$Result.GetResult<Prisma.$PrintRecordPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PrintRecords.
     * @param {PrintRecordDeleteManyArgs} args - Arguments to filter PrintRecords to delete.
     * @example
     * // Delete a few PrintRecords
     * const { count } = await prisma.printRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PrintRecordDeleteManyArgs>(args?: SelectSubset<T, PrintRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PrintRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrintRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PrintRecords
     * const printRecord = await prisma.printRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PrintRecordUpdateManyArgs>(args: SelectSubset<T, PrintRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PrintRecord.
     * @param {PrintRecordUpsertArgs} args - Arguments to update or create a PrintRecord.
     * @example
     * // Update or create a PrintRecord
     * const printRecord = await prisma.printRecord.upsert({
     *   create: {
     *     // ... data to create a PrintRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PrintRecord we want to update
     *   }
     * })
     */
    upsert<T extends PrintRecordUpsertArgs>(args: SelectSubset<T, PrintRecordUpsertArgs<ExtArgs>>): Prisma__PrintRecordClient<$Result.GetResult<Prisma.$PrintRecordPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PrintRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrintRecordCountArgs} args - Arguments to filter PrintRecords to count.
     * @example
     * // Count the number of PrintRecords
     * const count = await prisma.printRecord.count({
     *   where: {
     *     // ... the filter for the PrintRecords we want to count
     *   }
     * })
    **/
    count<T extends PrintRecordCountArgs>(
      args?: Subset<T, PrintRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PrintRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PrintRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrintRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PrintRecordAggregateArgs>(args: Subset<T, PrintRecordAggregateArgs>): Prisma.PrismaPromise<GetPrintRecordAggregateType<T>>

    /**
     * Group by PrintRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrintRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PrintRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PrintRecordGroupByArgs['orderBy'] }
        : { orderBy?: PrintRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PrintRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPrintRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PrintRecord model
   */
  readonly fields: PrintRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PrintRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PrintRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    document<T extends DocumentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DocumentDefaultArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    printer<T extends PrinterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PrinterDefaultArgs<ExtArgs>>): Prisma__PrinterClient<$Result.GetResult<Prisma.$PrinterPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PrintRecord model
   */ 
  interface PrintRecordFieldRefs {
    readonly documentId: FieldRef<"PrintRecord", 'String'>
    readonly printerId: FieldRef<"PrintRecord", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PrintRecord findUnique
   */
  export type PrintRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintRecord
     */
    select?: PrintRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrintRecordInclude<ExtArgs> | null
    /**
     * Filter, which PrintRecord to fetch.
     */
    where: PrintRecordWhereUniqueInput
  }

  /**
   * PrintRecord findUniqueOrThrow
   */
  export type PrintRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintRecord
     */
    select?: PrintRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrintRecordInclude<ExtArgs> | null
    /**
     * Filter, which PrintRecord to fetch.
     */
    where: PrintRecordWhereUniqueInput
  }

  /**
   * PrintRecord findFirst
   */
  export type PrintRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintRecord
     */
    select?: PrintRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrintRecordInclude<ExtArgs> | null
    /**
     * Filter, which PrintRecord to fetch.
     */
    where?: PrintRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrintRecords to fetch.
     */
    orderBy?: PrintRecordOrderByWithRelationInput | PrintRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PrintRecords.
     */
    cursor?: PrintRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrintRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrintRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PrintRecords.
     */
    distinct?: PrintRecordScalarFieldEnum | PrintRecordScalarFieldEnum[]
  }

  /**
   * PrintRecord findFirstOrThrow
   */
  export type PrintRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintRecord
     */
    select?: PrintRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrintRecordInclude<ExtArgs> | null
    /**
     * Filter, which PrintRecord to fetch.
     */
    where?: PrintRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrintRecords to fetch.
     */
    orderBy?: PrintRecordOrderByWithRelationInput | PrintRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PrintRecords.
     */
    cursor?: PrintRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrintRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrintRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PrintRecords.
     */
    distinct?: PrintRecordScalarFieldEnum | PrintRecordScalarFieldEnum[]
  }

  /**
   * PrintRecord findMany
   */
  export type PrintRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintRecord
     */
    select?: PrintRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrintRecordInclude<ExtArgs> | null
    /**
     * Filter, which PrintRecords to fetch.
     */
    where?: PrintRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrintRecords to fetch.
     */
    orderBy?: PrintRecordOrderByWithRelationInput | PrintRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PrintRecords.
     */
    cursor?: PrintRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrintRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrintRecords.
     */
    skip?: number
    distinct?: PrintRecordScalarFieldEnum | PrintRecordScalarFieldEnum[]
  }

  /**
   * PrintRecord create
   */
  export type PrintRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintRecord
     */
    select?: PrintRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrintRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a PrintRecord.
     */
    data: XOR<PrintRecordCreateInput, PrintRecordUncheckedCreateInput>
  }

  /**
   * PrintRecord createMany
   */
  export type PrintRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PrintRecords.
     */
    data: PrintRecordCreateManyInput | PrintRecordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PrintRecord createManyAndReturn
   */
  export type PrintRecordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintRecord
     */
    select?: PrintRecordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PrintRecords.
     */
    data: PrintRecordCreateManyInput | PrintRecordCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrintRecordIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PrintRecord update
   */
  export type PrintRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintRecord
     */
    select?: PrintRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrintRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a PrintRecord.
     */
    data: XOR<PrintRecordUpdateInput, PrintRecordUncheckedUpdateInput>
    /**
     * Choose, which PrintRecord to update.
     */
    where: PrintRecordWhereUniqueInput
  }

  /**
   * PrintRecord updateMany
   */
  export type PrintRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PrintRecords.
     */
    data: XOR<PrintRecordUpdateManyMutationInput, PrintRecordUncheckedUpdateManyInput>
    /**
     * Filter which PrintRecords to update
     */
    where?: PrintRecordWhereInput
  }

  /**
   * PrintRecord upsert
   */
  export type PrintRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintRecord
     */
    select?: PrintRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrintRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the PrintRecord to update in case it exists.
     */
    where: PrintRecordWhereUniqueInput
    /**
     * In case the PrintRecord found by the `where` argument doesn't exist, create a new PrintRecord with this data.
     */
    create: XOR<PrintRecordCreateInput, PrintRecordUncheckedCreateInput>
    /**
     * In case the PrintRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PrintRecordUpdateInput, PrintRecordUncheckedUpdateInput>
  }

  /**
   * PrintRecord delete
   */
  export type PrintRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintRecord
     */
    select?: PrintRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrintRecordInclude<ExtArgs> | null
    /**
     * Filter which PrintRecord to delete.
     */
    where: PrintRecordWhereUniqueInput
  }

  /**
   * PrintRecord deleteMany
   */
  export type PrintRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PrintRecords to delete
     */
    where?: PrintRecordWhereInput
  }

  /**
   * PrintRecord without action
   */
  export type PrintRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrintRecord
     */
    select?: PrintRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrintRecordInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const SPSOMemberScalarFieldEnum: {
    memberId: 'memberId',
    birthDate: 'birthDate',
    address: 'address',
    fullName: 'fullName',
    email: 'email',
    phoneNumber: 'phoneNumber',
    usageHistory: 'usageHistory'
  };

  export type SPSOMemberScalarFieldEnum = (typeof SPSOMemberScalarFieldEnum)[keyof typeof SPSOMemberScalarFieldEnum]


  export const CustomerScalarFieldEnum: {
    customerId: 'customerId',
    purchaseAndPrintHistory: 'purchaseAndPrintHistory',
    accountBalance: 'accountBalance',
    summary: 'summary',
    remainingPages: 'remainingPages',
    fullName: 'fullName',
    email: 'email',
    phoneNumber: 'phoneNumber',
    usageHistory: 'usageHistory',
    parameterChanges: 'parameterChanges',
    memberId: 'memberId'
  };

  export type CustomerScalarFieldEnum = (typeof CustomerScalarFieldEnum)[keyof typeof CustomerScalarFieldEnum]


  export const FeedbackScalarFieldEnum: {
    feedbackId: 'feedbackId',
    rating: 'rating',
    content: 'content',
    feedbackTime: 'feedbackTime',
    customerId: 'customerId'
  };

  export type FeedbackScalarFieldEnum = (typeof FeedbackScalarFieldEnum)[keyof typeof FeedbackScalarFieldEnum]


  export const PrinterScalarFieldEnum: {
    printerId: 'printerId',
    printerType: 'printerType',
    brandName: 'brandName',
    description: 'description',
    facility: 'facility',
    building: 'building',
    room: 'room',
    isInstalled: 'isInstalled'
  };

  export type PrinterScalarFieldEnum = (typeof PrinterScalarFieldEnum)[keyof typeof PrinterScalarFieldEnum]


  export const PurchaseOrderScalarFieldEnum: {
    transactionId: 'transactionId',
    purchaseTime: 'purchaseTime',
    price: 'price',
    status: 'status',
    quantity: 'quantity',
    paperType: 'paperType',
    customerId: 'customerId',
    printerId: 'printerId'
  };

  export type PurchaseOrderScalarFieldEnum = (typeof PurchaseOrderScalarFieldEnum)[keyof typeof PurchaseOrderScalarFieldEnum]


  export const PrintOrderScalarFieldEnum: {
    orderId: 'orderId',
    printAttributes: 'printAttributes',
    startTime: 'startTime',
    endTime: 'endTime',
    status: 'status',
    copyCount: 'copyCount',
    printedDocument: 'printedDocument',
    customerId: 'customerId',
    printerId: 'printerId'
  };

  export type PrintOrderScalarFieldEnum = (typeof PrintOrderScalarFieldEnum)[keyof typeof PrintOrderScalarFieldEnum]


  export const DocumentScalarFieldEnum: {
    documentId: 'documentId',
    title: 'title',
    documentCount: 'documentCount',
    requiredDocument: 'requiredDocument'
  };

  export type DocumentScalarFieldEnum = (typeof DocumentScalarFieldEnum)[keyof typeof DocumentScalarFieldEnum]


  export const PrintRecordScalarFieldEnum: {
    documentId: 'documentId',
    printerId: 'printerId'
  };

  export type PrintRecordScalarFieldEnum = (typeof PrintRecordScalarFieldEnum)[keyof typeof PrintRecordScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type SPSOMemberWhereInput = {
    AND?: SPSOMemberWhereInput | SPSOMemberWhereInput[]
    OR?: SPSOMemberWhereInput[]
    NOT?: SPSOMemberWhereInput | SPSOMemberWhereInput[]
    memberId?: StringFilter<"SPSOMember"> | string
    birthDate?: DateTimeFilter<"SPSOMember"> | Date | string
    address?: StringFilter<"SPSOMember"> | string
    fullName?: StringFilter<"SPSOMember"> | string
    email?: StringFilter<"SPSOMember"> | string
    phoneNumber?: StringFilter<"SPSOMember"> | string
    usageHistory?: StringFilter<"SPSOMember"> | string
    customer?: XOR<CustomerNullableRelationFilter, CustomerWhereInput> | null
  }

  export type SPSOMemberOrderByWithRelationInput = {
    memberId?: SortOrder
    birthDate?: SortOrder
    address?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    usageHistory?: SortOrder
    customer?: CustomerOrderByWithRelationInput
  }

  export type SPSOMemberWhereUniqueInput = Prisma.AtLeast<{
    memberId?: string
    AND?: SPSOMemberWhereInput | SPSOMemberWhereInput[]
    OR?: SPSOMemberWhereInput[]
    NOT?: SPSOMemberWhereInput | SPSOMemberWhereInput[]
    birthDate?: DateTimeFilter<"SPSOMember"> | Date | string
    address?: StringFilter<"SPSOMember"> | string
    fullName?: StringFilter<"SPSOMember"> | string
    email?: StringFilter<"SPSOMember"> | string
    phoneNumber?: StringFilter<"SPSOMember"> | string
    usageHistory?: StringFilter<"SPSOMember"> | string
    customer?: XOR<CustomerNullableRelationFilter, CustomerWhereInput> | null
  }, "memberId">

  export type SPSOMemberOrderByWithAggregationInput = {
    memberId?: SortOrder
    birthDate?: SortOrder
    address?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    usageHistory?: SortOrder
    _count?: SPSOMemberCountOrderByAggregateInput
    _max?: SPSOMemberMaxOrderByAggregateInput
    _min?: SPSOMemberMinOrderByAggregateInput
  }

  export type SPSOMemberScalarWhereWithAggregatesInput = {
    AND?: SPSOMemberScalarWhereWithAggregatesInput | SPSOMemberScalarWhereWithAggregatesInput[]
    OR?: SPSOMemberScalarWhereWithAggregatesInput[]
    NOT?: SPSOMemberScalarWhereWithAggregatesInput | SPSOMemberScalarWhereWithAggregatesInput[]
    memberId?: StringWithAggregatesFilter<"SPSOMember"> | string
    birthDate?: DateTimeWithAggregatesFilter<"SPSOMember"> | Date | string
    address?: StringWithAggregatesFilter<"SPSOMember"> | string
    fullName?: StringWithAggregatesFilter<"SPSOMember"> | string
    email?: StringWithAggregatesFilter<"SPSOMember"> | string
    phoneNumber?: StringWithAggregatesFilter<"SPSOMember"> | string
    usageHistory?: StringWithAggregatesFilter<"SPSOMember"> | string
  }

  export type CustomerWhereInput = {
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    customerId?: StringFilter<"Customer"> | string
    purchaseAndPrintHistory?: StringFilter<"Customer"> | string
    accountBalance?: FloatFilter<"Customer"> | number
    summary?: StringFilter<"Customer"> | string
    remainingPages?: IntFilter<"Customer"> | number
    fullName?: StringFilter<"Customer"> | string
    email?: StringFilter<"Customer"> | string
    phoneNumber?: StringFilter<"Customer"> | string
    usageHistory?: StringFilter<"Customer"> | string
    parameterChanges?: StringFilter<"Customer"> | string
    memberId?: StringNullableFilter<"Customer"> | string | null
    spsomember?: XOR<SPSOMemberNullableRelationFilter, SPSOMemberWhereInput> | null
    feedbacks?: FeedbackListRelationFilter
    purchaseOrders?: PurchaseOrderListRelationFilter
    printOrders?: PrintOrderListRelationFilter
  }

  export type CustomerOrderByWithRelationInput = {
    customerId?: SortOrder
    purchaseAndPrintHistory?: SortOrder
    accountBalance?: SortOrder
    summary?: SortOrder
    remainingPages?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    usageHistory?: SortOrder
    parameterChanges?: SortOrder
    memberId?: SortOrderInput | SortOrder
    spsomember?: SPSOMemberOrderByWithRelationInput
    feedbacks?: FeedbackOrderByRelationAggregateInput
    purchaseOrders?: PurchaseOrderOrderByRelationAggregateInput
    printOrders?: PrintOrderOrderByRelationAggregateInput
  }

  export type CustomerWhereUniqueInput = Prisma.AtLeast<{
    customerId?: string
    memberId?: string
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    purchaseAndPrintHistory?: StringFilter<"Customer"> | string
    accountBalance?: FloatFilter<"Customer"> | number
    summary?: StringFilter<"Customer"> | string
    remainingPages?: IntFilter<"Customer"> | number
    fullName?: StringFilter<"Customer"> | string
    email?: StringFilter<"Customer"> | string
    phoneNumber?: StringFilter<"Customer"> | string
    usageHistory?: StringFilter<"Customer"> | string
    parameterChanges?: StringFilter<"Customer"> | string
    spsomember?: XOR<SPSOMemberNullableRelationFilter, SPSOMemberWhereInput> | null
    feedbacks?: FeedbackListRelationFilter
    purchaseOrders?: PurchaseOrderListRelationFilter
    printOrders?: PrintOrderListRelationFilter
  }, "customerId" | "memberId">

  export type CustomerOrderByWithAggregationInput = {
    customerId?: SortOrder
    purchaseAndPrintHistory?: SortOrder
    accountBalance?: SortOrder
    summary?: SortOrder
    remainingPages?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    usageHistory?: SortOrder
    parameterChanges?: SortOrder
    memberId?: SortOrderInput | SortOrder
    _count?: CustomerCountOrderByAggregateInput
    _avg?: CustomerAvgOrderByAggregateInput
    _max?: CustomerMaxOrderByAggregateInput
    _min?: CustomerMinOrderByAggregateInput
    _sum?: CustomerSumOrderByAggregateInput
  }

  export type CustomerScalarWhereWithAggregatesInput = {
    AND?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    OR?: CustomerScalarWhereWithAggregatesInput[]
    NOT?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    customerId?: StringWithAggregatesFilter<"Customer"> | string
    purchaseAndPrintHistory?: StringWithAggregatesFilter<"Customer"> | string
    accountBalance?: FloatWithAggregatesFilter<"Customer"> | number
    summary?: StringWithAggregatesFilter<"Customer"> | string
    remainingPages?: IntWithAggregatesFilter<"Customer"> | number
    fullName?: StringWithAggregatesFilter<"Customer"> | string
    email?: StringWithAggregatesFilter<"Customer"> | string
    phoneNumber?: StringWithAggregatesFilter<"Customer"> | string
    usageHistory?: StringWithAggregatesFilter<"Customer"> | string
    parameterChanges?: StringWithAggregatesFilter<"Customer"> | string
    memberId?: StringNullableWithAggregatesFilter<"Customer"> | string | null
  }

  export type FeedbackWhereInput = {
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    feedbackId?: StringFilter<"Feedback"> | string
    rating?: IntFilter<"Feedback"> | number
    content?: StringFilter<"Feedback"> | string
    feedbackTime?: DateTimeFilter<"Feedback"> | Date | string
    customerId?: StringFilter<"Feedback"> | string
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
  }

  export type FeedbackOrderByWithRelationInput = {
    feedbackId?: SortOrder
    rating?: SortOrder
    content?: SortOrder
    feedbackTime?: SortOrder
    customerId?: SortOrder
    customer?: CustomerOrderByWithRelationInput
  }

  export type FeedbackWhereUniqueInput = Prisma.AtLeast<{
    feedbackId?: string
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    rating?: IntFilter<"Feedback"> | number
    content?: StringFilter<"Feedback"> | string
    feedbackTime?: DateTimeFilter<"Feedback"> | Date | string
    customerId?: StringFilter<"Feedback"> | string
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
  }, "feedbackId">

  export type FeedbackOrderByWithAggregationInput = {
    feedbackId?: SortOrder
    rating?: SortOrder
    content?: SortOrder
    feedbackTime?: SortOrder
    customerId?: SortOrder
    _count?: FeedbackCountOrderByAggregateInput
    _avg?: FeedbackAvgOrderByAggregateInput
    _max?: FeedbackMaxOrderByAggregateInput
    _min?: FeedbackMinOrderByAggregateInput
    _sum?: FeedbackSumOrderByAggregateInput
  }

  export type FeedbackScalarWhereWithAggregatesInput = {
    AND?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    OR?: FeedbackScalarWhereWithAggregatesInput[]
    NOT?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    feedbackId?: StringWithAggregatesFilter<"Feedback"> | string
    rating?: IntWithAggregatesFilter<"Feedback"> | number
    content?: StringWithAggregatesFilter<"Feedback"> | string
    feedbackTime?: DateTimeWithAggregatesFilter<"Feedback"> | Date | string
    customerId?: StringWithAggregatesFilter<"Feedback"> | string
  }

  export type PrinterWhereInput = {
    AND?: PrinterWhereInput | PrinterWhereInput[]
    OR?: PrinterWhereInput[]
    NOT?: PrinterWhereInput | PrinterWhereInput[]
    printerId?: StringFilter<"Printer"> | string
    printerType?: StringFilter<"Printer"> | string
    brandName?: StringFilter<"Printer"> | string
    description?: StringFilter<"Printer"> | string
    facility?: StringFilter<"Printer"> | string
    building?: StringFilter<"Printer"> | string
    room?: StringFilter<"Printer"> | string
    isInstalled?: BoolFilter<"Printer"> | boolean
    purchaseOrders?: PurchaseOrderListRelationFilter
    printOrders?: PrintOrderListRelationFilter
    printRecords?: PrintRecordListRelationFilter
  }

  export type PrinterOrderByWithRelationInput = {
    printerId?: SortOrder
    printerType?: SortOrder
    brandName?: SortOrder
    description?: SortOrder
    facility?: SortOrder
    building?: SortOrder
    room?: SortOrder
    isInstalled?: SortOrder
    purchaseOrders?: PurchaseOrderOrderByRelationAggregateInput
    printOrders?: PrintOrderOrderByRelationAggregateInput
    printRecords?: PrintRecordOrderByRelationAggregateInput
  }

  export type PrinterWhereUniqueInput = Prisma.AtLeast<{
    printerId?: string
    AND?: PrinterWhereInput | PrinterWhereInput[]
    OR?: PrinterWhereInput[]
    NOT?: PrinterWhereInput | PrinterWhereInput[]
    printerType?: StringFilter<"Printer"> | string
    brandName?: StringFilter<"Printer"> | string
    description?: StringFilter<"Printer"> | string
    facility?: StringFilter<"Printer"> | string
    building?: StringFilter<"Printer"> | string
    room?: StringFilter<"Printer"> | string
    isInstalled?: BoolFilter<"Printer"> | boolean
    purchaseOrders?: PurchaseOrderListRelationFilter
    printOrders?: PrintOrderListRelationFilter
    printRecords?: PrintRecordListRelationFilter
  }, "printerId">

  export type PrinterOrderByWithAggregationInput = {
    printerId?: SortOrder
    printerType?: SortOrder
    brandName?: SortOrder
    description?: SortOrder
    facility?: SortOrder
    building?: SortOrder
    room?: SortOrder
    isInstalled?: SortOrder
    _count?: PrinterCountOrderByAggregateInput
    _max?: PrinterMaxOrderByAggregateInput
    _min?: PrinterMinOrderByAggregateInput
  }

  export type PrinterScalarWhereWithAggregatesInput = {
    AND?: PrinterScalarWhereWithAggregatesInput | PrinterScalarWhereWithAggregatesInput[]
    OR?: PrinterScalarWhereWithAggregatesInput[]
    NOT?: PrinterScalarWhereWithAggregatesInput | PrinterScalarWhereWithAggregatesInput[]
    printerId?: StringWithAggregatesFilter<"Printer"> | string
    printerType?: StringWithAggregatesFilter<"Printer"> | string
    brandName?: StringWithAggregatesFilter<"Printer"> | string
    description?: StringWithAggregatesFilter<"Printer"> | string
    facility?: StringWithAggregatesFilter<"Printer"> | string
    building?: StringWithAggregatesFilter<"Printer"> | string
    room?: StringWithAggregatesFilter<"Printer"> | string
    isInstalled?: BoolWithAggregatesFilter<"Printer"> | boolean
  }

  export type PurchaseOrderWhereInput = {
    AND?: PurchaseOrderWhereInput | PurchaseOrderWhereInput[]
    OR?: PurchaseOrderWhereInput[]
    NOT?: PurchaseOrderWhereInput | PurchaseOrderWhereInput[]
    transactionId?: StringFilter<"PurchaseOrder"> | string
    purchaseTime?: DateTimeFilter<"PurchaseOrder"> | Date | string
    price?: FloatFilter<"PurchaseOrder"> | number
    status?: StringFilter<"PurchaseOrder"> | string
    quantity?: IntFilter<"PurchaseOrder"> | number
    paperType?: StringFilter<"PurchaseOrder"> | string
    customerId?: StringFilter<"PurchaseOrder"> | string
    printerId?: StringFilter<"PurchaseOrder"> | string
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
    printer?: XOR<PrinterRelationFilter, PrinterWhereInput>
  }

  export type PurchaseOrderOrderByWithRelationInput = {
    transactionId?: SortOrder
    purchaseTime?: SortOrder
    price?: SortOrder
    status?: SortOrder
    quantity?: SortOrder
    paperType?: SortOrder
    customerId?: SortOrder
    printerId?: SortOrder
    customer?: CustomerOrderByWithRelationInput
    printer?: PrinterOrderByWithRelationInput
  }

  export type PurchaseOrderWhereUniqueInput = Prisma.AtLeast<{
    transactionId?: string
    AND?: PurchaseOrderWhereInput | PurchaseOrderWhereInput[]
    OR?: PurchaseOrderWhereInput[]
    NOT?: PurchaseOrderWhereInput | PurchaseOrderWhereInput[]
    purchaseTime?: DateTimeFilter<"PurchaseOrder"> | Date | string
    price?: FloatFilter<"PurchaseOrder"> | number
    status?: StringFilter<"PurchaseOrder"> | string
    quantity?: IntFilter<"PurchaseOrder"> | number
    paperType?: StringFilter<"PurchaseOrder"> | string
    customerId?: StringFilter<"PurchaseOrder"> | string
    printerId?: StringFilter<"PurchaseOrder"> | string
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
    printer?: XOR<PrinterRelationFilter, PrinterWhereInput>
  }, "transactionId">

  export type PurchaseOrderOrderByWithAggregationInput = {
    transactionId?: SortOrder
    purchaseTime?: SortOrder
    price?: SortOrder
    status?: SortOrder
    quantity?: SortOrder
    paperType?: SortOrder
    customerId?: SortOrder
    printerId?: SortOrder
    _count?: PurchaseOrderCountOrderByAggregateInput
    _avg?: PurchaseOrderAvgOrderByAggregateInput
    _max?: PurchaseOrderMaxOrderByAggregateInput
    _min?: PurchaseOrderMinOrderByAggregateInput
    _sum?: PurchaseOrderSumOrderByAggregateInput
  }

  export type PurchaseOrderScalarWhereWithAggregatesInput = {
    AND?: PurchaseOrderScalarWhereWithAggregatesInput | PurchaseOrderScalarWhereWithAggregatesInput[]
    OR?: PurchaseOrderScalarWhereWithAggregatesInput[]
    NOT?: PurchaseOrderScalarWhereWithAggregatesInput | PurchaseOrderScalarWhereWithAggregatesInput[]
    transactionId?: StringWithAggregatesFilter<"PurchaseOrder"> | string
    purchaseTime?: DateTimeWithAggregatesFilter<"PurchaseOrder"> | Date | string
    price?: FloatWithAggregatesFilter<"PurchaseOrder"> | number
    status?: StringWithAggregatesFilter<"PurchaseOrder"> | string
    quantity?: IntWithAggregatesFilter<"PurchaseOrder"> | number
    paperType?: StringWithAggregatesFilter<"PurchaseOrder"> | string
    customerId?: StringWithAggregatesFilter<"PurchaseOrder"> | string
    printerId?: StringWithAggregatesFilter<"PurchaseOrder"> | string
  }

  export type PrintOrderWhereInput = {
    AND?: PrintOrderWhereInput | PrintOrderWhereInput[]
    OR?: PrintOrderWhereInput[]
    NOT?: PrintOrderWhereInput | PrintOrderWhereInput[]
    orderId?: StringFilter<"PrintOrder"> | string
    printAttributes?: StringFilter<"PrintOrder"> | string
    startTime?: DateTimeFilter<"PrintOrder"> | Date | string
    endTime?: DateTimeFilter<"PrintOrder"> | Date | string
    status?: StringFilter<"PrintOrder"> | string
    copyCount?: IntFilter<"PrintOrder"> | number
    printedDocument?: StringFilter<"PrintOrder"> | string
    customerId?: StringFilter<"PrintOrder"> | string
    printerId?: StringFilter<"PrintOrder"> | string
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
    printer?: XOR<PrinterRelationFilter, PrinterWhereInput>
  }

  export type PrintOrderOrderByWithRelationInput = {
    orderId?: SortOrder
    printAttributes?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    copyCount?: SortOrder
    printedDocument?: SortOrder
    customerId?: SortOrder
    printerId?: SortOrder
    customer?: CustomerOrderByWithRelationInput
    printer?: PrinterOrderByWithRelationInput
  }

  export type PrintOrderWhereUniqueInput = Prisma.AtLeast<{
    orderId?: string
    AND?: PrintOrderWhereInput | PrintOrderWhereInput[]
    OR?: PrintOrderWhereInput[]
    NOT?: PrintOrderWhereInput | PrintOrderWhereInput[]
    printAttributes?: StringFilter<"PrintOrder"> | string
    startTime?: DateTimeFilter<"PrintOrder"> | Date | string
    endTime?: DateTimeFilter<"PrintOrder"> | Date | string
    status?: StringFilter<"PrintOrder"> | string
    copyCount?: IntFilter<"PrintOrder"> | number
    printedDocument?: StringFilter<"PrintOrder"> | string
    customerId?: StringFilter<"PrintOrder"> | string
    printerId?: StringFilter<"PrintOrder"> | string
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
    printer?: XOR<PrinterRelationFilter, PrinterWhereInput>
  }, "orderId">

  export type PrintOrderOrderByWithAggregationInput = {
    orderId?: SortOrder
    printAttributes?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    copyCount?: SortOrder
    printedDocument?: SortOrder
    customerId?: SortOrder
    printerId?: SortOrder
    _count?: PrintOrderCountOrderByAggregateInput
    _avg?: PrintOrderAvgOrderByAggregateInput
    _max?: PrintOrderMaxOrderByAggregateInput
    _min?: PrintOrderMinOrderByAggregateInput
    _sum?: PrintOrderSumOrderByAggregateInput
  }

  export type PrintOrderScalarWhereWithAggregatesInput = {
    AND?: PrintOrderScalarWhereWithAggregatesInput | PrintOrderScalarWhereWithAggregatesInput[]
    OR?: PrintOrderScalarWhereWithAggregatesInput[]
    NOT?: PrintOrderScalarWhereWithAggregatesInput | PrintOrderScalarWhereWithAggregatesInput[]
    orderId?: StringWithAggregatesFilter<"PrintOrder"> | string
    printAttributes?: StringWithAggregatesFilter<"PrintOrder"> | string
    startTime?: DateTimeWithAggregatesFilter<"PrintOrder"> | Date | string
    endTime?: DateTimeWithAggregatesFilter<"PrintOrder"> | Date | string
    status?: StringWithAggregatesFilter<"PrintOrder"> | string
    copyCount?: IntWithAggregatesFilter<"PrintOrder"> | number
    printedDocument?: StringWithAggregatesFilter<"PrintOrder"> | string
    customerId?: StringWithAggregatesFilter<"PrintOrder"> | string
    printerId?: StringWithAggregatesFilter<"PrintOrder"> | string
  }

  export type DocumentWhereInput = {
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    documentId?: StringFilter<"Document"> | string
    title?: StringFilter<"Document"> | string
    documentCount?: IntFilter<"Document"> | number
    requiredDocument?: StringFilter<"Document"> | string
    printRecords?: PrintRecordListRelationFilter
  }

  export type DocumentOrderByWithRelationInput = {
    documentId?: SortOrder
    title?: SortOrder
    documentCount?: SortOrder
    requiredDocument?: SortOrder
    printRecords?: PrintRecordOrderByRelationAggregateInput
  }

  export type DocumentWhereUniqueInput = Prisma.AtLeast<{
    documentId?: string
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    title?: StringFilter<"Document"> | string
    documentCount?: IntFilter<"Document"> | number
    requiredDocument?: StringFilter<"Document"> | string
    printRecords?: PrintRecordListRelationFilter
  }, "documentId">

  export type DocumentOrderByWithAggregationInput = {
    documentId?: SortOrder
    title?: SortOrder
    documentCount?: SortOrder
    requiredDocument?: SortOrder
    _count?: DocumentCountOrderByAggregateInput
    _avg?: DocumentAvgOrderByAggregateInput
    _max?: DocumentMaxOrderByAggregateInput
    _min?: DocumentMinOrderByAggregateInput
    _sum?: DocumentSumOrderByAggregateInput
  }

  export type DocumentScalarWhereWithAggregatesInput = {
    AND?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    OR?: DocumentScalarWhereWithAggregatesInput[]
    NOT?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    documentId?: StringWithAggregatesFilter<"Document"> | string
    title?: StringWithAggregatesFilter<"Document"> | string
    documentCount?: IntWithAggregatesFilter<"Document"> | number
    requiredDocument?: StringWithAggregatesFilter<"Document"> | string
  }

  export type PrintRecordWhereInput = {
    AND?: PrintRecordWhereInput | PrintRecordWhereInput[]
    OR?: PrintRecordWhereInput[]
    NOT?: PrintRecordWhereInput | PrintRecordWhereInput[]
    documentId?: StringFilter<"PrintRecord"> | string
    printerId?: StringFilter<"PrintRecord"> | string
    document?: XOR<DocumentRelationFilter, DocumentWhereInput>
    printer?: XOR<PrinterRelationFilter, PrinterWhereInput>
  }

  export type PrintRecordOrderByWithRelationInput = {
    documentId?: SortOrder
    printerId?: SortOrder
    document?: DocumentOrderByWithRelationInput
    printer?: PrinterOrderByWithRelationInput
  }

  export type PrintRecordWhereUniqueInput = Prisma.AtLeast<{
    documentId_printerId?: PrintRecordDocumentIdPrinterIdCompoundUniqueInput
    AND?: PrintRecordWhereInput | PrintRecordWhereInput[]
    OR?: PrintRecordWhereInput[]
    NOT?: PrintRecordWhereInput | PrintRecordWhereInput[]
    documentId?: StringFilter<"PrintRecord"> | string
    printerId?: StringFilter<"PrintRecord"> | string
    document?: XOR<DocumentRelationFilter, DocumentWhereInput>
    printer?: XOR<PrinterRelationFilter, PrinterWhereInput>
  }, "documentId_printerId">

  export type PrintRecordOrderByWithAggregationInput = {
    documentId?: SortOrder
    printerId?: SortOrder
    _count?: PrintRecordCountOrderByAggregateInput
    _max?: PrintRecordMaxOrderByAggregateInput
    _min?: PrintRecordMinOrderByAggregateInput
  }

  export type PrintRecordScalarWhereWithAggregatesInput = {
    AND?: PrintRecordScalarWhereWithAggregatesInput | PrintRecordScalarWhereWithAggregatesInput[]
    OR?: PrintRecordScalarWhereWithAggregatesInput[]
    NOT?: PrintRecordScalarWhereWithAggregatesInput | PrintRecordScalarWhereWithAggregatesInput[]
    documentId?: StringWithAggregatesFilter<"PrintRecord"> | string
    printerId?: StringWithAggregatesFilter<"PrintRecord"> | string
  }

  export type SPSOMemberCreateInput = {
    memberId: string
    birthDate: Date | string
    address: string
    fullName: string
    email: string
    phoneNumber: string
    usageHistory: string
    customer?: CustomerCreateNestedOneWithoutSpsomemberInput
  }

  export type SPSOMemberUncheckedCreateInput = {
    memberId: string
    birthDate: Date | string
    address: string
    fullName: string
    email: string
    phoneNumber: string
    usageHistory: string
    customer?: CustomerUncheckedCreateNestedOneWithoutSpsomemberInput
  }

  export type SPSOMemberUpdateInput = {
    memberId?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    usageHistory?: StringFieldUpdateOperationsInput | string
    customer?: CustomerUpdateOneWithoutSpsomemberNestedInput
  }

  export type SPSOMemberUncheckedUpdateInput = {
    memberId?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    usageHistory?: StringFieldUpdateOperationsInput | string
    customer?: CustomerUncheckedUpdateOneWithoutSpsomemberNestedInput
  }

  export type SPSOMemberCreateManyInput = {
    memberId: string
    birthDate: Date | string
    address: string
    fullName: string
    email: string
    phoneNumber: string
    usageHistory: string
  }

  export type SPSOMemberUpdateManyMutationInput = {
    memberId?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    usageHistory?: StringFieldUpdateOperationsInput | string
  }

  export type SPSOMemberUncheckedUpdateManyInput = {
    memberId?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    usageHistory?: StringFieldUpdateOperationsInput | string
  }

  export type CustomerCreateInput = {
    customerId: string
    purchaseAndPrintHistory: string
    accountBalance: number
    summary: string
    remainingPages: number
    fullName: string
    email: string
    phoneNumber: string
    usageHistory: string
    parameterChanges: string
    spsomember?: SPSOMemberCreateNestedOneWithoutCustomerInput
    feedbacks?: FeedbackCreateNestedManyWithoutCustomerInput
    purchaseOrders?: PurchaseOrderCreateNestedManyWithoutCustomerInput
    printOrders?: PrintOrderCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateInput = {
    customerId: string
    purchaseAndPrintHistory: string
    accountBalance: number
    summary: string
    remainingPages: number
    fullName: string
    email: string
    phoneNumber: string
    usageHistory: string
    parameterChanges: string
    memberId?: string | null
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutCustomerInput
    purchaseOrders?: PurchaseOrderUncheckedCreateNestedManyWithoutCustomerInput
    printOrders?: PrintOrderUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUpdateInput = {
    customerId?: StringFieldUpdateOperationsInput | string
    purchaseAndPrintHistory?: StringFieldUpdateOperationsInput | string
    accountBalance?: FloatFieldUpdateOperationsInput | number
    summary?: StringFieldUpdateOperationsInput | string
    remainingPages?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    usageHistory?: StringFieldUpdateOperationsInput | string
    parameterChanges?: StringFieldUpdateOperationsInput | string
    spsomember?: SPSOMemberUpdateOneWithoutCustomerNestedInput
    feedbacks?: FeedbackUpdateManyWithoutCustomerNestedInput
    purchaseOrders?: PurchaseOrderUpdateManyWithoutCustomerNestedInput
    printOrders?: PrintOrderUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateInput = {
    customerId?: StringFieldUpdateOperationsInput | string
    purchaseAndPrintHistory?: StringFieldUpdateOperationsInput | string
    accountBalance?: FloatFieldUpdateOperationsInput | number
    summary?: StringFieldUpdateOperationsInput | string
    remainingPages?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    usageHistory?: StringFieldUpdateOperationsInput | string
    parameterChanges?: StringFieldUpdateOperationsInput | string
    memberId?: NullableStringFieldUpdateOperationsInput | string | null
    feedbacks?: FeedbackUncheckedUpdateManyWithoutCustomerNestedInput
    purchaseOrders?: PurchaseOrderUncheckedUpdateManyWithoutCustomerNestedInput
    printOrders?: PrintOrderUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerCreateManyInput = {
    customerId: string
    purchaseAndPrintHistory: string
    accountBalance: number
    summary: string
    remainingPages: number
    fullName: string
    email: string
    phoneNumber: string
    usageHistory: string
    parameterChanges: string
    memberId?: string | null
  }

  export type CustomerUpdateManyMutationInput = {
    customerId?: StringFieldUpdateOperationsInput | string
    purchaseAndPrintHistory?: StringFieldUpdateOperationsInput | string
    accountBalance?: FloatFieldUpdateOperationsInput | number
    summary?: StringFieldUpdateOperationsInput | string
    remainingPages?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    usageHistory?: StringFieldUpdateOperationsInput | string
    parameterChanges?: StringFieldUpdateOperationsInput | string
  }

  export type CustomerUncheckedUpdateManyInput = {
    customerId?: StringFieldUpdateOperationsInput | string
    purchaseAndPrintHistory?: StringFieldUpdateOperationsInput | string
    accountBalance?: FloatFieldUpdateOperationsInput | number
    summary?: StringFieldUpdateOperationsInput | string
    remainingPages?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    usageHistory?: StringFieldUpdateOperationsInput | string
    parameterChanges?: StringFieldUpdateOperationsInput | string
    memberId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeedbackCreateInput = {
    feedbackId: string
    rating: number
    content: string
    feedbackTime: Date | string
    customer: CustomerCreateNestedOneWithoutFeedbacksInput
  }

  export type FeedbackUncheckedCreateInput = {
    feedbackId: string
    rating: number
    content: string
    feedbackTime: Date | string
    customerId: string
  }

  export type FeedbackUpdateInput = {
    feedbackId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    feedbackTime?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutFeedbacksNestedInput
  }

  export type FeedbackUncheckedUpdateInput = {
    feedbackId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    feedbackTime?: DateTimeFieldUpdateOperationsInput | Date | string
    customerId?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackCreateManyInput = {
    feedbackId: string
    rating: number
    content: string
    feedbackTime: Date | string
    customerId: string
  }

  export type FeedbackUpdateManyMutationInput = {
    feedbackId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    feedbackTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUncheckedUpdateManyInput = {
    feedbackId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    feedbackTime?: DateTimeFieldUpdateOperationsInput | Date | string
    customerId?: StringFieldUpdateOperationsInput | string
  }

  export type PrinterCreateInput = {
    printerId: string
    printerType: string
    brandName: string
    description: string
    facility: string
    building: string
    room: string
    isInstalled: boolean
    purchaseOrders?: PurchaseOrderCreateNestedManyWithoutPrinterInput
    printOrders?: PrintOrderCreateNestedManyWithoutPrinterInput
    printRecords?: PrintRecordCreateNestedManyWithoutPrinterInput
  }

  export type PrinterUncheckedCreateInput = {
    printerId: string
    printerType: string
    brandName: string
    description: string
    facility: string
    building: string
    room: string
    isInstalled: boolean
    purchaseOrders?: PurchaseOrderUncheckedCreateNestedManyWithoutPrinterInput
    printOrders?: PrintOrderUncheckedCreateNestedManyWithoutPrinterInput
    printRecords?: PrintRecordUncheckedCreateNestedManyWithoutPrinterInput
  }

  export type PrinterUpdateInput = {
    printerId?: StringFieldUpdateOperationsInput | string
    printerType?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    facility?: StringFieldUpdateOperationsInput | string
    building?: StringFieldUpdateOperationsInput | string
    room?: StringFieldUpdateOperationsInput | string
    isInstalled?: BoolFieldUpdateOperationsInput | boolean
    purchaseOrders?: PurchaseOrderUpdateManyWithoutPrinterNestedInput
    printOrders?: PrintOrderUpdateManyWithoutPrinterNestedInput
    printRecords?: PrintRecordUpdateManyWithoutPrinterNestedInput
  }

  export type PrinterUncheckedUpdateInput = {
    printerId?: StringFieldUpdateOperationsInput | string
    printerType?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    facility?: StringFieldUpdateOperationsInput | string
    building?: StringFieldUpdateOperationsInput | string
    room?: StringFieldUpdateOperationsInput | string
    isInstalled?: BoolFieldUpdateOperationsInput | boolean
    purchaseOrders?: PurchaseOrderUncheckedUpdateManyWithoutPrinterNestedInput
    printOrders?: PrintOrderUncheckedUpdateManyWithoutPrinterNestedInput
    printRecords?: PrintRecordUncheckedUpdateManyWithoutPrinterNestedInput
  }

  export type PrinterCreateManyInput = {
    printerId: string
    printerType: string
    brandName: string
    description: string
    facility: string
    building: string
    room: string
    isInstalled: boolean
  }

  export type PrinterUpdateManyMutationInput = {
    printerId?: StringFieldUpdateOperationsInput | string
    printerType?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    facility?: StringFieldUpdateOperationsInput | string
    building?: StringFieldUpdateOperationsInput | string
    room?: StringFieldUpdateOperationsInput | string
    isInstalled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PrinterUncheckedUpdateManyInput = {
    printerId?: StringFieldUpdateOperationsInput | string
    printerType?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    facility?: StringFieldUpdateOperationsInput | string
    building?: StringFieldUpdateOperationsInput | string
    room?: StringFieldUpdateOperationsInput | string
    isInstalled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PurchaseOrderCreateInput = {
    transactionId: string
    purchaseTime: Date | string
    price: number
    status: string
    quantity: number
    paperType: string
    customer: CustomerCreateNestedOneWithoutPurchaseOrdersInput
    printer: PrinterCreateNestedOneWithoutPurchaseOrdersInput
  }

  export type PurchaseOrderUncheckedCreateInput = {
    transactionId: string
    purchaseTime: Date | string
    price: number
    status: string
    quantity: number
    paperType: string
    customerId: string
    printerId: string
  }

  export type PurchaseOrderUpdateInput = {
    transactionId?: StringFieldUpdateOperationsInput | string
    purchaseTime?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    paperType?: StringFieldUpdateOperationsInput | string
    customer?: CustomerUpdateOneRequiredWithoutPurchaseOrdersNestedInput
    printer?: PrinterUpdateOneRequiredWithoutPurchaseOrdersNestedInput
  }

  export type PurchaseOrderUncheckedUpdateInput = {
    transactionId?: StringFieldUpdateOperationsInput | string
    purchaseTime?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    paperType?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    printerId?: StringFieldUpdateOperationsInput | string
  }

  export type PurchaseOrderCreateManyInput = {
    transactionId: string
    purchaseTime: Date | string
    price: number
    status: string
    quantity: number
    paperType: string
    customerId: string
    printerId: string
  }

  export type PurchaseOrderUpdateManyMutationInput = {
    transactionId?: StringFieldUpdateOperationsInput | string
    purchaseTime?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    paperType?: StringFieldUpdateOperationsInput | string
  }

  export type PurchaseOrderUncheckedUpdateManyInput = {
    transactionId?: StringFieldUpdateOperationsInput | string
    purchaseTime?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    paperType?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    printerId?: StringFieldUpdateOperationsInput | string
  }

  export type PrintOrderCreateInput = {
    orderId: string
    printAttributes: string
    startTime: Date | string
    endTime: Date | string
    status: string
    copyCount: number
    printedDocument: string
    customer: CustomerCreateNestedOneWithoutPrintOrdersInput
    printer: PrinterCreateNestedOneWithoutPrintOrdersInput
  }

  export type PrintOrderUncheckedCreateInput = {
    orderId: string
    printAttributes: string
    startTime: Date | string
    endTime: Date | string
    status: string
    copyCount: number
    printedDocument: string
    customerId: string
    printerId: string
  }

  export type PrintOrderUpdateInput = {
    orderId?: StringFieldUpdateOperationsInput | string
    printAttributes?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    copyCount?: IntFieldUpdateOperationsInput | number
    printedDocument?: StringFieldUpdateOperationsInput | string
    customer?: CustomerUpdateOneRequiredWithoutPrintOrdersNestedInput
    printer?: PrinterUpdateOneRequiredWithoutPrintOrdersNestedInput
  }

  export type PrintOrderUncheckedUpdateInput = {
    orderId?: StringFieldUpdateOperationsInput | string
    printAttributes?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    copyCount?: IntFieldUpdateOperationsInput | number
    printedDocument?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    printerId?: StringFieldUpdateOperationsInput | string
  }

  export type PrintOrderCreateManyInput = {
    orderId: string
    printAttributes: string
    startTime: Date | string
    endTime: Date | string
    status: string
    copyCount: number
    printedDocument: string
    customerId: string
    printerId: string
  }

  export type PrintOrderUpdateManyMutationInput = {
    orderId?: StringFieldUpdateOperationsInput | string
    printAttributes?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    copyCount?: IntFieldUpdateOperationsInput | number
    printedDocument?: StringFieldUpdateOperationsInput | string
  }

  export type PrintOrderUncheckedUpdateManyInput = {
    orderId?: StringFieldUpdateOperationsInput | string
    printAttributes?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    copyCount?: IntFieldUpdateOperationsInput | number
    printedDocument?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    printerId?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentCreateInput = {
    documentId: string
    title: string
    documentCount: number
    requiredDocument: string
    printRecords?: PrintRecordCreateNestedManyWithoutDocumentInput
  }

  export type DocumentUncheckedCreateInput = {
    documentId: string
    title: string
    documentCount: number
    requiredDocument: string
    printRecords?: PrintRecordUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type DocumentUpdateInput = {
    documentId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    documentCount?: IntFieldUpdateOperationsInput | number
    requiredDocument?: StringFieldUpdateOperationsInput | string
    printRecords?: PrintRecordUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateInput = {
    documentId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    documentCount?: IntFieldUpdateOperationsInput | number
    requiredDocument?: StringFieldUpdateOperationsInput | string
    printRecords?: PrintRecordUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentCreateManyInput = {
    documentId: string
    title: string
    documentCount: number
    requiredDocument: string
  }

  export type DocumentUpdateManyMutationInput = {
    documentId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    documentCount?: IntFieldUpdateOperationsInput | number
    requiredDocument?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentUncheckedUpdateManyInput = {
    documentId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    documentCount?: IntFieldUpdateOperationsInput | number
    requiredDocument?: StringFieldUpdateOperationsInput | string
  }

  export type PrintRecordCreateInput = {
    document: DocumentCreateNestedOneWithoutPrintRecordsInput
    printer: PrinterCreateNestedOneWithoutPrintRecordsInput
  }

  export type PrintRecordUncheckedCreateInput = {
    documentId: string
    printerId: string
  }

  export type PrintRecordUpdateInput = {
    document?: DocumentUpdateOneRequiredWithoutPrintRecordsNestedInput
    printer?: PrinterUpdateOneRequiredWithoutPrintRecordsNestedInput
  }

  export type PrintRecordUncheckedUpdateInput = {
    documentId?: StringFieldUpdateOperationsInput | string
    printerId?: StringFieldUpdateOperationsInput | string
  }

  export type PrintRecordCreateManyInput = {
    documentId: string
    printerId: string
  }

  export type PrintRecordUpdateManyMutationInput = {

  }

  export type PrintRecordUncheckedUpdateManyInput = {
    documentId?: StringFieldUpdateOperationsInput | string
    printerId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CustomerNullableRelationFilter = {
    is?: CustomerWhereInput | null
    isNot?: CustomerWhereInput | null
  }

  export type SPSOMemberCountOrderByAggregateInput = {
    memberId?: SortOrder
    birthDate?: SortOrder
    address?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    usageHistory?: SortOrder
  }

  export type SPSOMemberMaxOrderByAggregateInput = {
    memberId?: SortOrder
    birthDate?: SortOrder
    address?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    usageHistory?: SortOrder
  }

  export type SPSOMemberMinOrderByAggregateInput = {
    memberId?: SortOrder
    birthDate?: SortOrder
    address?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    usageHistory?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type SPSOMemberNullableRelationFilter = {
    is?: SPSOMemberWhereInput | null
    isNot?: SPSOMemberWhereInput | null
  }

  export type FeedbackListRelationFilter = {
    every?: FeedbackWhereInput
    some?: FeedbackWhereInput
    none?: FeedbackWhereInput
  }

  export type PurchaseOrderListRelationFilter = {
    every?: PurchaseOrderWhereInput
    some?: PurchaseOrderWhereInput
    none?: PurchaseOrderWhereInput
  }

  export type PrintOrderListRelationFilter = {
    every?: PrintOrderWhereInput
    some?: PrintOrderWhereInput
    none?: PrintOrderWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type FeedbackOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PurchaseOrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PrintOrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CustomerCountOrderByAggregateInput = {
    customerId?: SortOrder
    purchaseAndPrintHistory?: SortOrder
    accountBalance?: SortOrder
    summary?: SortOrder
    remainingPages?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    usageHistory?: SortOrder
    parameterChanges?: SortOrder
    memberId?: SortOrder
  }

  export type CustomerAvgOrderByAggregateInput = {
    accountBalance?: SortOrder
    remainingPages?: SortOrder
  }

  export type CustomerMaxOrderByAggregateInput = {
    customerId?: SortOrder
    purchaseAndPrintHistory?: SortOrder
    accountBalance?: SortOrder
    summary?: SortOrder
    remainingPages?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    usageHistory?: SortOrder
    parameterChanges?: SortOrder
    memberId?: SortOrder
  }

  export type CustomerMinOrderByAggregateInput = {
    customerId?: SortOrder
    purchaseAndPrintHistory?: SortOrder
    accountBalance?: SortOrder
    summary?: SortOrder
    remainingPages?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    usageHistory?: SortOrder
    parameterChanges?: SortOrder
    memberId?: SortOrder
  }

  export type CustomerSumOrderByAggregateInput = {
    accountBalance?: SortOrder
    remainingPages?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type CustomerRelationFilter = {
    is?: CustomerWhereInput
    isNot?: CustomerWhereInput
  }

  export type FeedbackCountOrderByAggregateInput = {
    feedbackId?: SortOrder
    rating?: SortOrder
    content?: SortOrder
    feedbackTime?: SortOrder
    customerId?: SortOrder
  }

  export type FeedbackAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type FeedbackMaxOrderByAggregateInput = {
    feedbackId?: SortOrder
    rating?: SortOrder
    content?: SortOrder
    feedbackTime?: SortOrder
    customerId?: SortOrder
  }

  export type FeedbackMinOrderByAggregateInput = {
    feedbackId?: SortOrder
    rating?: SortOrder
    content?: SortOrder
    feedbackTime?: SortOrder
    customerId?: SortOrder
  }

  export type FeedbackSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type PrintRecordListRelationFilter = {
    every?: PrintRecordWhereInput
    some?: PrintRecordWhereInput
    none?: PrintRecordWhereInput
  }

  export type PrintRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PrinterCountOrderByAggregateInput = {
    printerId?: SortOrder
    printerType?: SortOrder
    brandName?: SortOrder
    description?: SortOrder
    facility?: SortOrder
    building?: SortOrder
    room?: SortOrder
    isInstalled?: SortOrder
  }

  export type PrinterMaxOrderByAggregateInput = {
    printerId?: SortOrder
    printerType?: SortOrder
    brandName?: SortOrder
    description?: SortOrder
    facility?: SortOrder
    building?: SortOrder
    room?: SortOrder
    isInstalled?: SortOrder
  }

  export type PrinterMinOrderByAggregateInput = {
    printerId?: SortOrder
    printerType?: SortOrder
    brandName?: SortOrder
    description?: SortOrder
    facility?: SortOrder
    building?: SortOrder
    room?: SortOrder
    isInstalled?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type PrinterRelationFilter = {
    is?: PrinterWhereInput
    isNot?: PrinterWhereInput
  }

  export type PurchaseOrderCountOrderByAggregateInput = {
    transactionId?: SortOrder
    purchaseTime?: SortOrder
    price?: SortOrder
    status?: SortOrder
    quantity?: SortOrder
    paperType?: SortOrder
    customerId?: SortOrder
    printerId?: SortOrder
  }

  export type PurchaseOrderAvgOrderByAggregateInput = {
    price?: SortOrder
    quantity?: SortOrder
  }

  export type PurchaseOrderMaxOrderByAggregateInput = {
    transactionId?: SortOrder
    purchaseTime?: SortOrder
    price?: SortOrder
    status?: SortOrder
    quantity?: SortOrder
    paperType?: SortOrder
    customerId?: SortOrder
    printerId?: SortOrder
  }

  export type PurchaseOrderMinOrderByAggregateInput = {
    transactionId?: SortOrder
    purchaseTime?: SortOrder
    price?: SortOrder
    status?: SortOrder
    quantity?: SortOrder
    paperType?: SortOrder
    customerId?: SortOrder
    printerId?: SortOrder
  }

  export type PurchaseOrderSumOrderByAggregateInput = {
    price?: SortOrder
    quantity?: SortOrder
  }

  export type PrintOrderCountOrderByAggregateInput = {
    orderId?: SortOrder
    printAttributes?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    copyCount?: SortOrder
    printedDocument?: SortOrder
    customerId?: SortOrder
    printerId?: SortOrder
  }

  export type PrintOrderAvgOrderByAggregateInput = {
    copyCount?: SortOrder
  }

  export type PrintOrderMaxOrderByAggregateInput = {
    orderId?: SortOrder
    printAttributes?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    copyCount?: SortOrder
    printedDocument?: SortOrder
    customerId?: SortOrder
    printerId?: SortOrder
  }

  export type PrintOrderMinOrderByAggregateInput = {
    orderId?: SortOrder
    printAttributes?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    copyCount?: SortOrder
    printedDocument?: SortOrder
    customerId?: SortOrder
    printerId?: SortOrder
  }

  export type PrintOrderSumOrderByAggregateInput = {
    copyCount?: SortOrder
  }

  export type DocumentCountOrderByAggregateInput = {
    documentId?: SortOrder
    title?: SortOrder
    documentCount?: SortOrder
    requiredDocument?: SortOrder
  }

  export type DocumentAvgOrderByAggregateInput = {
    documentCount?: SortOrder
  }

  export type DocumentMaxOrderByAggregateInput = {
    documentId?: SortOrder
    title?: SortOrder
    documentCount?: SortOrder
    requiredDocument?: SortOrder
  }

  export type DocumentMinOrderByAggregateInput = {
    documentId?: SortOrder
    title?: SortOrder
    documentCount?: SortOrder
    requiredDocument?: SortOrder
  }

  export type DocumentSumOrderByAggregateInput = {
    documentCount?: SortOrder
  }

  export type DocumentRelationFilter = {
    is?: DocumentWhereInput
    isNot?: DocumentWhereInput
  }

  export type PrintRecordDocumentIdPrinterIdCompoundUniqueInput = {
    documentId: string
    printerId: string
  }

  export type PrintRecordCountOrderByAggregateInput = {
    documentId?: SortOrder
    printerId?: SortOrder
  }

  export type PrintRecordMaxOrderByAggregateInput = {
    documentId?: SortOrder
    printerId?: SortOrder
  }

  export type PrintRecordMinOrderByAggregateInput = {
    documentId?: SortOrder
    printerId?: SortOrder
  }

  export type CustomerCreateNestedOneWithoutSpsomemberInput = {
    create?: XOR<CustomerCreateWithoutSpsomemberInput, CustomerUncheckedCreateWithoutSpsomemberInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutSpsomemberInput
    connect?: CustomerWhereUniqueInput
  }

  export type CustomerUncheckedCreateNestedOneWithoutSpsomemberInput = {
    create?: XOR<CustomerCreateWithoutSpsomemberInput, CustomerUncheckedCreateWithoutSpsomemberInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutSpsomemberInput
    connect?: CustomerWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CustomerUpdateOneWithoutSpsomemberNestedInput = {
    create?: XOR<CustomerCreateWithoutSpsomemberInput, CustomerUncheckedCreateWithoutSpsomemberInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutSpsomemberInput
    upsert?: CustomerUpsertWithoutSpsomemberInput
    disconnect?: CustomerWhereInput | boolean
    delete?: CustomerWhereInput | boolean
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutSpsomemberInput, CustomerUpdateWithoutSpsomemberInput>, CustomerUncheckedUpdateWithoutSpsomemberInput>
  }

  export type CustomerUncheckedUpdateOneWithoutSpsomemberNestedInput = {
    create?: XOR<CustomerCreateWithoutSpsomemberInput, CustomerUncheckedCreateWithoutSpsomemberInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutSpsomemberInput
    upsert?: CustomerUpsertWithoutSpsomemberInput
    disconnect?: CustomerWhereInput | boolean
    delete?: CustomerWhereInput | boolean
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutSpsomemberInput, CustomerUpdateWithoutSpsomemberInput>, CustomerUncheckedUpdateWithoutSpsomemberInput>
  }

  export type SPSOMemberCreateNestedOneWithoutCustomerInput = {
    create?: XOR<SPSOMemberCreateWithoutCustomerInput, SPSOMemberUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: SPSOMemberCreateOrConnectWithoutCustomerInput
    connect?: SPSOMemberWhereUniqueInput
  }

  export type FeedbackCreateNestedManyWithoutCustomerInput = {
    create?: XOR<FeedbackCreateWithoutCustomerInput, FeedbackUncheckedCreateWithoutCustomerInput> | FeedbackCreateWithoutCustomerInput[] | FeedbackUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutCustomerInput | FeedbackCreateOrConnectWithoutCustomerInput[]
    createMany?: FeedbackCreateManyCustomerInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type PurchaseOrderCreateNestedManyWithoutCustomerInput = {
    create?: XOR<PurchaseOrderCreateWithoutCustomerInput, PurchaseOrderUncheckedCreateWithoutCustomerInput> | PurchaseOrderCreateWithoutCustomerInput[] | PurchaseOrderUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: PurchaseOrderCreateOrConnectWithoutCustomerInput | PurchaseOrderCreateOrConnectWithoutCustomerInput[]
    createMany?: PurchaseOrderCreateManyCustomerInputEnvelope
    connect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
  }

  export type PrintOrderCreateNestedManyWithoutCustomerInput = {
    create?: XOR<PrintOrderCreateWithoutCustomerInput, PrintOrderUncheckedCreateWithoutCustomerInput> | PrintOrderCreateWithoutCustomerInput[] | PrintOrderUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: PrintOrderCreateOrConnectWithoutCustomerInput | PrintOrderCreateOrConnectWithoutCustomerInput[]
    createMany?: PrintOrderCreateManyCustomerInputEnvelope
    connect?: PrintOrderWhereUniqueInput | PrintOrderWhereUniqueInput[]
  }

  export type FeedbackUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<FeedbackCreateWithoutCustomerInput, FeedbackUncheckedCreateWithoutCustomerInput> | FeedbackCreateWithoutCustomerInput[] | FeedbackUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutCustomerInput | FeedbackCreateOrConnectWithoutCustomerInput[]
    createMany?: FeedbackCreateManyCustomerInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type PurchaseOrderUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<PurchaseOrderCreateWithoutCustomerInput, PurchaseOrderUncheckedCreateWithoutCustomerInput> | PurchaseOrderCreateWithoutCustomerInput[] | PurchaseOrderUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: PurchaseOrderCreateOrConnectWithoutCustomerInput | PurchaseOrderCreateOrConnectWithoutCustomerInput[]
    createMany?: PurchaseOrderCreateManyCustomerInputEnvelope
    connect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
  }

  export type PrintOrderUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<PrintOrderCreateWithoutCustomerInput, PrintOrderUncheckedCreateWithoutCustomerInput> | PrintOrderCreateWithoutCustomerInput[] | PrintOrderUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: PrintOrderCreateOrConnectWithoutCustomerInput | PrintOrderCreateOrConnectWithoutCustomerInput[]
    createMany?: PrintOrderCreateManyCustomerInputEnvelope
    connect?: PrintOrderWhereUniqueInput | PrintOrderWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SPSOMemberUpdateOneWithoutCustomerNestedInput = {
    create?: XOR<SPSOMemberCreateWithoutCustomerInput, SPSOMemberUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: SPSOMemberCreateOrConnectWithoutCustomerInput
    upsert?: SPSOMemberUpsertWithoutCustomerInput
    disconnect?: SPSOMemberWhereInput | boolean
    delete?: SPSOMemberWhereInput | boolean
    connect?: SPSOMemberWhereUniqueInput
    update?: XOR<XOR<SPSOMemberUpdateToOneWithWhereWithoutCustomerInput, SPSOMemberUpdateWithoutCustomerInput>, SPSOMemberUncheckedUpdateWithoutCustomerInput>
  }

  export type FeedbackUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<FeedbackCreateWithoutCustomerInput, FeedbackUncheckedCreateWithoutCustomerInput> | FeedbackCreateWithoutCustomerInput[] | FeedbackUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutCustomerInput | FeedbackCreateOrConnectWithoutCustomerInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutCustomerInput | FeedbackUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: FeedbackCreateManyCustomerInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutCustomerInput | FeedbackUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutCustomerInput | FeedbackUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type PurchaseOrderUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<PurchaseOrderCreateWithoutCustomerInput, PurchaseOrderUncheckedCreateWithoutCustomerInput> | PurchaseOrderCreateWithoutCustomerInput[] | PurchaseOrderUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: PurchaseOrderCreateOrConnectWithoutCustomerInput | PurchaseOrderCreateOrConnectWithoutCustomerInput[]
    upsert?: PurchaseOrderUpsertWithWhereUniqueWithoutCustomerInput | PurchaseOrderUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: PurchaseOrderCreateManyCustomerInputEnvelope
    set?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    disconnect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    delete?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    connect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    update?: PurchaseOrderUpdateWithWhereUniqueWithoutCustomerInput | PurchaseOrderUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: PurchaseOrderUpdateManyWithWhereWithoutCustomerInput | PurchaseOrderUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: PurchaseOrderScalarWhereInput | PurchaseOrderScalarWhereInput[]
  }

  export type PrintOrderUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<PrintOrderCreateWithoutCustomerInput, PrintOrderUncheckedCreateWithoutCustomerInput> | PrintOrderCreateWithoutCustomerInput[] | PrintOrderUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: PrintOrderCreateOrConnectWithoutCustomerInput | PrintOrderCreateOrConnectWithoutCustomerInput[]
    upsert?: PrintOrderUpsertWithWhereUniqueWithoutCustomerInput | PrintOrderUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: PrintOrderCreateManyCustomerInputEnvelope
    set?: PrintOrderWhereUniqueInput | PrintOrderWhereUniqueInput[]
    disconnect?: PrintOrderWhereUniqueInput | PrintOrderWhereUniqueInput[]
    delete?: PrintOrderWhereUniqueInput | PrintOrderWhereUniqueInput[]
    connect?: PrintOrderWhereUniqueInput | PrintOrderWhereUniqueInput[]
    update?: PrintOrderUpdateWithWhereUniqueWithoutCustomerInput | PrintOrderUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: PrintOrderUpdateManyWithWhereWithoutCustomerInput | PrintOrderUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: PrintOrderScalarWhereInput | PrintOrderScalarWhereInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type FeedbackUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<FeedbackCreateWithoutCustomerInput, FeedbackUncheckedCreateWithoutCustomerInput> | FeedbackCreateWithoutCustomerInput[] | FeedbackUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutCustomerInput | FeedbackCreateOrConnectWithoutCustomerInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutCustomerInput | FeedbackUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: FeedbackCreateManyCustomerInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutCustomerInput | FeedbackUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutCustomerInput | FeedbackUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type PurchaseOrderUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<PurchaseOrderCreateWithoutCustomerInput, PurchaseOrderUncheckedCreateWithoutCustomerInput> | PurchaseOrderCreateWithoutCustomerInput[] | PurchaseOrderUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: PurchaseOrderCreateOrConnectWithoutCustomerInput | PurchaseOrderCreateOrConnectWithoutCustomerInput[]
    upsert?: PurchaseOrderUpsertWithWhereUniqueWithoutCustomerInput | PurchaseOrderUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: PurchaseOrderCreateManyCustomerInputEnvelope
    set?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    disconnect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    delete?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    connect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    update?: PurchaseOrderUpdateWithWhereUniqueWithoutCustomerInput | PurchaseOrderUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: PurchaseOrderUpdateManyWithWhereWithoutCustomerInput | PurchaseOrderUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: PurchaseOrderScalarWhereInput | PurchaseOrderScalarWhereInput[]
  }

  export type PrintOrderUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<PrintOrderCreateWithoutCustomerInput, PrintOrderUncheckedCreateWithoutCustomerInput> | PrintOrderCreateWithoutCustomerInput[] | PrintOrderUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: PrintOrderCreateOrConnectWithoutCustomerInput | PrintOrderCreateOrConnectWithoutCustomerInput[]
    upsert?: PrintOrderUpsertWithWhereUniqueWithoutCustomerInput | PrintOrderUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: PrintOrderCreateManyCustomerInputEnvelope
    set?: PrintOrderWhereUniqueInput | PrintOrderWhereUniqueInput[]
    disconnect?: PrintOrderWhereUniqueInput | PrintOrderWhereUniqueInput[]
    delete?: PrintOrderWhereUniqueInput | PrintOrderWhereUniqueInput[]
    connect?: PrintOrderWhereUniqueInput | PrintOrderWhereUniqueInput[]
    update?: PrintOrderUpdateWithWhereUniqueWithoutCustomerInput | PrintOrderUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: PrintOrderUpdateManyWithWhereWithoutCustomerInput | PrintOrderUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: PrintOrderScalarWhereInput | PrintOrderScalarWhereInput[]
  }

  export type CustomerCreateNestedOneWithoutFeedbacksInput = {
    create?: XOR<CustomerCreateWithoutFeedbacksInput, CustomerUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutFeedbacksInput
    connect?: CustomerWhereUniqueInput
  }

  export type CustomerUpdateOneRequiredWithoutFeedbacksNestedInput = {
    create?: XOR<CustomerCreateWithoutFeedbacksInput, CustomerUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutFeedbacksInput
    upsert?: CustomerUpsertWithoutFeedbacksInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutFeedbacksInput, CustomerUpdateWithoutFeedbacksInput>, CustomerUncheckedUpdateWithoutFeedbacksInput>
  }

  export type PurchaseOrderCreateNestedManyWithoutPrinterInput = {
    create?: XOR<PurchaseOrderCreateWithoutPrinterInput, PurchaseOrderUncheckedCreateWithoutPrinterInput> | PurchaseOrderCreateWithoutPrinterInput[] | PurchaseOrderUncheckedCreateWithoutPrinterInput[]
    connectOrCreate?: PurchaseOrderCreateOrConnectWithoutPrinterInput | PurchaseOrderCreateOrConnectWithoutPrinterInput[]
    createMany?: PurchaseOrderCreateManyPrinterInputEnvelope
    connect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
  }

  export type PrintOrderCreateNestedManyWithoutPrinterInput = {
    create?: XOR<PrintOrderCreateWithoutPrinterInput, PrintOrderUncheckedCreateWithoutPrinterInput> | PrintOrderCreateWithoutPrinterInput[] | PrintOrderUncheckedCreateWithoutPrinterInput[]
    connectOrCreate?: PrintOrderCreateOrConnectWithoutPrinterInput | PrintOrderCreateOrConnectWithoutPrinterInput[]
    createMany?: PrintOrderCreateManyPrinterInputEnvelope
    connect?: PrintOrderWhereUniqueInput | PrintOrderWhereUniqueInput[]
  }

  export type PrintRecordCreateNestedManyWithoutPrinterInput = {
    create?: XOR<PrintRecordCreateWithoutPrinterInput, PrintRecordUncheckedCreateWithoutPrinterInput> | PrintRecordCreateWithoutPrinterInput[] | PrintRecordUncheckedCreateWithoutPrinterInput[]
    connectOrCreate?: PrintRecordCreateOrConnectWithoutPrinterInput | PrintRecordCreateOrConnectWithoutPrinterInput[]
    createMany?: PrintRecordCreateManyPrinterInputEnvelope
    connect?: PrintRecordWhereUniqueInput | PrintRecordWhereUniqueInput[]
  }

  export type PurchaseOrderUncheckedCreateNestedManyWithoutPrinterInput = {
    create?: XOR<PurchaseOrderCreateWithoutPrinterInput, PurchaseOrderUncheckedCreateWithoutPrinterInput> | PurchaseOrderCreateWithoutPrinterInput[] | PurchaseOrderUncheckedCreateWithoutPrinterInput[]
    connectOrCreate?: PurchaseOrderCreateOrConnectWithoutPrinterInput | PurchaseOrderCreateOrConnectWithoutPrinterInput[]
    createMany?: PurchaseOrderCreateManyPrinterInputEnvelope
    connect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
  }

  export type PrintOrderUncheckedCreateNestedManyWithoutPrinterInput = {
    create?: XOR<PrintOrderCreateWithoutPrinterInput, PrintOrderUncheckedCreateWithoutPrinterInput> | PrintOrderCreateWithoutPrinterInput[] | PrintOrderUncheckedCreateWithoutPrinterInput[]
    connectOrCreate?: PrintOrderCreateOrConnectWithoutPrinterInput | PrintOrderCreateOrConnectWithoutPrinterInput[]
    createMany?: PrintOrderCreateManyPrinterInputEnvelope
    connect?: PrintOrderWhereUniqueInput | PrintOrderWhereUniqueInput[]
  }

  export type PrintRecordUncheckedCreateNestedManyWithoutPrinterInput = {
    create?: XOR<PrintRecordCreateWithoutPrinterInput, PrintRecordUncheckedCreateWithoutPrinterInput> | PrintRecordCreateWithoutPrinterInput[] | PrintRecordUncheckedCreateWithoutPrinterInput[]
    connectOrCreate?: PrintRecordCreateOrConnectWithoutPrinterInput | PrintRecordCreateOrConnectWithoutPrinterInput[]
    createMany?: PrintRecordCreateManyPrinterInputEnvelope
    connect?: PrintRecordWhereUniqueInput | PrintRecordWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type PurchaseOrderUpdateManyWithoutPrinterNestedInput = {
    create?: XOR<PurchaseOrderCreateWithoutPrinterInput, PurchaseOrderUncheckedCreateWithoutPrinterInput> | PurchaseOrderCreateWithoutPrinterInput[] | PurchaseOrderUncheckedCreateWithoutPrinterInput[]
    connectOrCreate?: PurchaseOrderCreateOrConnectWithoutPrinterInput | PurchaseOrderCreateOrConnectWithoutPrinterInput[]
    upsert?: PurchaseOrderUpsertWithWhereUniqueWithoutPrinterInput | PurchaseOrderUpsertWithWhereUniqueWithoutPrinterInput[]
    createMany?: PurchaseOrderCreateManyPrinterInputEnvelope
    set?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    disconnect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    delete?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    connect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    update?: PurchaseOrderUpdateWithWhereUniqueWithoutPrinterInput | PurchaseOrderUpdateWithWhereUniqueWithoutPrinterInput[]
    updateMany?: PurchaseOrderUpdateManyWithWhereWithoutPrinterInput | PurchaseOrderUpdateManyWithWhereWithoutPrinterInput[]
    deleteMany?: PurchaseOrderScalarWhereInput | PurchaseOrderScalarWhereInput[]
  }

  export type PrintOrderUpdateManyWithoutPrinterNestedInput = {
    create?: XOR<PrintOrderCreateWithoutPrinterInput, PrintOrderUncheckedCreateWithoutPrinterInput> | PrintOrderCreateWithoutPrinterInput[] | PrintOrderUncheckedCreateWithoutPrinterInput[]
    connectOrCreate?: PrintOrderCreateOrConnectWithoutPrinterInput | PrintOrderCreateOrConnectWithoutPrinterInput[]
    upsert?: PrintOrderUpsertWithWhereUniqueWithoutPrinterInput | PrintOrderUpsertWithWhereUniqueWithoutPrinterInput[]
    createMany?: PrintOrderCreateManyPrinterInputEnvelope
    set?: PrintOrderWhereUniqueInput | PrintOrderWhereUniqueInput[]
    disconnect?: PrintOrderWhereUniqueInput | PrintOrderWhereUniqueInput[]
    delete?: PrintOrderWhereUniqueInput | PrintOrderWhereUniqueInput[]
    connect?: PrintOrderWhereUniqueInput | PrintOrderWhereUniqueInput[]
    update?: PrintOrderUpdateWithWhereUniqueWithoutPrinterInput | PrintOrderUpdateWithWhereUniqueWithoutPrinterInput[]
    updateMany?: PrintOrderUpdateManyWithWhereWithoutPrinterInput | PrintOrderUpdateManyWithWhereWithoutPrinterInput[]
    deleteMany?: PrintOrderScalarWhereInput | PrintOrderScalarWhereInput[]
  }

  export type PrintRecordUpdateManyWithoutPrinterNestedInput = {
    create?: XOR<PrintRecordCreateWithoutPrinterInput, PrintRecordUncheckedCreateWithoutPrinterInput> | PrintRecordCreateWithoutPrinterInput[] | PrintRecordUncheckedCreateWithoutPrinterInput[]
    connectOrCreate?: PrintRecordCreateOrConnectWithoutPrinterInput | PrintRecordCreateOrConnectWithoutPrinterInput[]
    upsert?: PrintRecordUpsertWithWhereUniqueWithoutPrinterInput | PrintRecordUpsertWithWhereUniqueWithoutPrinterInput[]
    createMany?: PrintRecordCreateManyPrinterInputEnvelope
    set?: PrintRecordWhereUniqueInput | PrintRecordWhereUniqueInput[]
    disconnect?: PrintRecordWhereUniqueInput | PrintRecordWhereUniqueInput[]
    delete?: PrintRecordWhereUniqueInput | PrintRecordWhereUniqueInput[]
    connect?: PrintRecordWhereUniqueInput | PrintRecordWhereUniqueInput[]
    update?: PrintRecordUpdateWithWhereUniqueWithoutPrinterInput | PrintRecordUpdateWithWhereUniqueWithoutPrinterInput[]
    updateMany?: PrintRecordUpdateManyWithWhereWithoutPrinterInput | PrintRecordUpdateManyWithWhereWithoutPrinterInput[]
    deleteMany?: PrintRecordScalarWhereInput | PrintRecordScalarWhereInput[]
  }

  export type PurchaseOrderUncheckedUpdateManyWithoutPrinterNestedInput = {
    create?: XOR<PurchaseOrderCreateWithoutPrinterInput, PurchaseOrderUncheckedCreateWithoutPrinterInput> | PurchaseOrderCreateWithoutPrinterInput[] | PurchaseOrderUncheckedCreateWithoutPrinterInput[]
    connectOrCreate?: PurchaseOrderCreateOrConnectWithoutPrinterInput | PurchaseOrderCreateOrConnectWithoutPrinterInput[]
    upsert?: PurchaseOrderUpsertWithWhereUniqueWithoutPrinterInput | PurchaseOrderUpsertWithWhereUniqueWithoutPrinterInput[]
    createMany?: PurchaseOrderCreateManyPrinterInputEnvelope
    set?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    disconnect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    delete?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    connect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    update?: PurchaseOrderUpdateWithWhereUniqueWithoutPrinterInput | PurchaseOrderUpdateWithWhereUniqueWithoutPrinterInput[]
    updateMany?: PurchaseOrderUpdateManyWithWhereWithoutPrinterInput | PurchaseOrderUpdateManyWithWhereWithoutPrinterInput[]
    deleteMany?: PurchaseOrderScalarWhereInput | PurchaseOrderScalarWhereInput[]
  }

  export type PrintOrderUncheckedUpdateManyWithoutPrinterNestedInput = {
    create?: XOR<PrintOrderCreateWithoutPrinterInput, PrintOrderUncheckedCreateWithoutPrinterInput> | PrintOrderCreateWithoutPrinterInput[] | PrintOrderUncheckedCreateWithoutPrinterInput[]
    connectOrCreate?: PrintOrderCreateOrConnectWithoutPrinterInput | PrintOrderCreateOrConnectWithoutPrinterInput[]
    upsert?: PrintOrderUpsertWithWhereUniqueWithoutPrinterInput | PrintOrderUpsertWithWhereUniqueWithoutPrinterInput[]
    createMany?: PrintOrderCreateManyPrinterInputEnvelope
    set?: PrintOrderWhereUniqueInput | PrintOrderWhereUniqueInput[]
    disconnect?: PrintOrderWhereUniqueInput | PrintOrderWhereUniqueInput[]
    delete?: PrintOrderWhereUniqueInput | PrintOrderWhereUniqueInput[]
    connect?: PrintOrderWhereUniqueInput | PrintOrderWhereUniqueInput[]
    update?: PrintOrderUpdateWithWhereUniqueWithoutPrinterInput | PrintOrderUpdateWithWhereUniqueWithoutPrinterInput[]
    updateMany?: PrintOrderUpdateManyWithWhereWithoutPrinterInput | PrintOrderUpdateManyWithWhereWithoutPrinterInput[]
    deleteMany?: PrintOrderScalarWhereInput | PrintOrderScalarWhereInput[]
  }

  export type PrintRecordUncheckedUpdateManyWithoutPrinterNestedInput = {
    create?: XOR<PrintRecordCreateWithoutPrinterInput, PrintRecordUncheckedCreateWithoutPrinterInput> | PrintRecordCreateWithoutPrinterInput[] | PrintRecordUncheckedCreateWithoutPrinterInput[]
    connectOrCreate?: PrintRecordCreateOrConnectWithoutPrinterInput | PrintRecordCreateOrConnectWithoutPrinterInput[]
    upsert?: PrintRecordUpsertWithWhereUniqueWithoutPrinterInput | PrintRecordUpsertWithWhereUniqueWithoutPrinterInput[]
    createMany?: PrintRecordCreateManyPrinterInputEnvelope
    set?: PrintRecordWhereUniqueInput | PrintRecordWhereUniqueInput[]
    disconnect?: PrintRecordWhereUniqueInput | PrintRecordWhereUniqueInput[]
    delete?: PrintRecordWhereUniqueInput | PrintRecordWhereUniqueInput[]
    connect?: PrintRecordWhereUniqueInput | PrintRecordWhereUniqueInput[]
    update?: PrintRecordUpdateWithWhereUniqueWithoutPrinterInput | PrintRecordUpdateWithWhereUniqueWithoutPrinterInput[]
    updateMany?: PrintRecordUpdateManyWithWhereWithoutPrinterInput | PrintRecordUpdateManyWithWhereWithoutPrinterInput[]
    deleteMany?: PrintRecordScalarWhereInput | PrintRecordScalarWhereInput[]
  }

  export type CustomerCreateNestedOneWithoutPurchaseOrdersInput = {
    create?: XOR<CustomerCreateWithoutPurchaseOrdersInput, CustomerUncheckedCreateWithoutPurchaseOrdersInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutPurchaseOrdersInput
    connect?: CustomerWhereUniqueInput
  }

  export type PrinterCreateNestedOneWithoutPurchaseOrdersInput = {
    create?: XOR<PrinterCreateWithoutPurchaseOrdersInput, PrinterUncheckedCreateWithoutPurchaseOrdersInput>
    connectOrCreate?: PrinterCreateOrConnectWithoutPurchaseOrdersInput
    connect?: PrinterWhereUniqueInput
  }

  export type CustomerUpdateOneRequiredWithoutPurchaseOrdersNestedInput = {
    create?: XOR<CustomerCreateWithoutPurchaseOrdersInput, CustomerUncheckedCreateWithoutPurchaseOrdersInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutPurchaseOrdersInput
    upsert?: CustomerUpsertWithoutPurchaseOrdersInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutPurchaseOrdersInput, CustomerUpdateWithoutPurchaseOrdersInput>, CustomerUncheckedUpdateWithoutPurchaseOrdersInput>
  }

  export type PrinterUpdateOneRequiredWithoutPurchaseOrdersNestedInput = {
    create?: XOR<PrinterCreateWithoutPurchaseOrdersInput, PrinterUncheckedCreateWithoutPurchaseOrdersInput>
    connectOrCreate?: PrinterCreateOrConnectWithoutPurchaseOrdersInput
    upsert?: PrinterUpsertWithoutPurchaseOrdersInput
    connect?: PrinterWhereUniqueInput
    update?: XOR<XOR<PrinterUpdateToOneWithWhereWithoutPurchaseOrdersInput, PrinterUpdateWithoutPurchaseOrdersInput>, PrinterUncheckedUpdateWithoutPurchaseOrdersInput>
  }

  export type CustomerCreateNestedOneWithoutPrintOrdersInput = {
    create?: XOR<CustomerCreateWithoutPrintOrdersInput, CustomerUncheckedCreateWithoutPrintOrdersInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutPrintOrdersInput
    connect?: CustomerWhereUniqueInput
  }

  export type PrinterCreateNestedOneWithoutPrintOrdersInput = {
    create?: XOR<PrinterCreateWithoutPrintOrdersInput, PrinterUncheckedCreateWithoutPrintOrdersInput>
    connectOrCreate?: PrinterCreateOrConnectWithoutPrintOrdersInput
    connect?: PrinterWhereUniqueInput
  }

  export type CustomerUpdateOneRequiredWithoutPrintOrdersNestedInput = {
    create?: XOR<CustomerCreateWithoutPrintOrdersInput, CustomerUncheckedCreateWithoutPrintOrdersInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutPrintOrdersInput
    upsert?: CustomerUpsertWithoutPrintOrdersInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutPrintOrdersInput, CustomerUpdateWithoutPrintOrdersInput>, CustomerUncheckedUpdateWithoutPrintOrdersInput>
  }

  export type PrinterUpdateOneRequiredWithoutPrintOrdersNestedInput = {
    create?: XOR<PrinterCreateWithoutPrintOrdersInput, PrinterUncheckedCreateWithoutPrintOrdersInput>
    connectOrCreate?: PrinterCreateOrConnectWithoutPrintOrdersInput
    upsert?: PrinterUpsertWithoutPrintOrdersInput
    connect?: PrinterWhereUniqueInput
    update?: XOR<XOR<PrinterUpdateToOneWithWhereWithoutPrintOrdersInput, PrinterUpdateWithoutPrintOrdersInput>, PrinterUncheckedUpdateWithoutPrintOrdersInput>
  }

  export type PrintRecordCreateNestedManyWithoutDocumentInput = {
    create?: XOR<PrintRecordCreateWithoutDocumentInput, PrintRecordUncheckedCreateWithoutDocumentInput> | PrintRecordCreateWithoutDocumentInput[] | PrintRecordUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: PrintRecordCreateOrConnectWithoutDocumentInput | PrintRecordCreateOrConnectWithoutDocumentInput[]
    createMany?: PrintRecordCreateManyDocumentInputEnvelope
    connect?: PrintRecordWhereUniqueInput | PrintRecordWhereUniqueInput[]
  }

  export type PrintRecordUncheckedCreateNestedManyWithoutDocumentInput = {
    create?: XOR<PrintRecordCreateWithoutDocumentInput, PrintRecordUncheckedCreateWithoutDocumentInput> | PrintRecordCreateWithoutDocumentInput[] | PrintRecordUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: PrintRecordCreateOrConnectWithoutDocumentInput | PrintRecordCreateOrConnectWithoutDocumentInput[]
    createMany?: PrintRecordCreateManyDocumentInputEnvelope
    connect?: PrintRecordWhereUniqueInput | PrintRecordWhereUniqueInput[]
  }

  export type PrintRecordUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<PrintRecordCreateWithoutDocumentInput, PrintRecordUncheckedCreateWithoutDocumentInput> | PrintRecordCreateWithoutDocumentInput[] | PrintRecordUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: PrintRecordCreateOrConnectWithoutDocumentInput | PrintRecordCreateOrConnectWithoutDocumentInput[]
    upsert?: PrintRecordUpsertWithWhereUniqueWithoutDocumentInput | PrintRecordUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: PrintRecordCreateManyDocumentInputEnvelope
    set?: PrintRecordWhereUniqueInput | PrintRecordWhereUniqueInput[]
    disconnect?: PrintRecordWhereUniqueInput | PrintRecordWhereUniqueInput[]
    delete?: PrintRecordWhereUniqueInput | PrintRecordWhereUniqueInput[]
    connect?: PrintRecordWhereUniqueInput | PrintRecordWhereUniqueInput[]
    update?: PrintRecordUpdateWithWhereUniqueWithoutDocumentInput | PrintRecordUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: PrintRecordUpdateManyWithWhereWithoutDocumentInput | PrintRecordUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: PrintRecordScalarWhereInput | PrintRecordScalarWhereInput[]
  }

  export type PrintRecordUncheckedUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<PrintRecordCreateWithoutDocumentInput, PrintRecordUncheckedCreateWithoutDocumentInput> | PrintRecordCreateWithoutDocumentInput[] | PrintRecordUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: PrintRecordCreateOrConnectWithoutDocumentInput | PrintRecordCreateOrConnectWithoutDocumentInput[]
    upsert?: PrintRecordUpsertWithWhereUniqueWithoutDocumentInput | PrintRecordUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: PrintRecordCreateManyDocumentInputEnvelope
    set?: PrintRecordWhereUniqueInput | PrintRecordWhereUniqueInput[]
    disconnect?: PrintRecordWhereUniqueInput | PrintRecordWhereUniqueInput[]
    delete?: PrintRecordWhereUniqueInput | PrintRecordWhereUniqueInput[]
    connect?: PrintRecordWhereUniqueInput | PrintRecordWhereUniqueInput[]
    update?: PrintRecordUpdateWithWhereUniqueWithoutDocumentInput | PrintRecordUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: PrintRecordUpdateManyWithWhereWithoutDocumentInput | PrintRecordUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: PrintRecordScalarWhereInput | PrintRecordScalarWhereInput[]
  }

  export type DocumentCreateNestedOneWithoutPrintRecordsInput = {
    create?: XOR<DocumentCreateWithoutPrintRecordsInput, DocumentUncheckedCreateWithoutPrintRecordsInput>
    connectOrCreate?: DocumentCreateOrConnectWithoutPrintRecordsInput
    connect?: DocumentWhereUniqueInput
  }

  export type PrinterCreateNestedOneWithoutPrintRecordsInput = {
    create?: XOR<PrinterCreateWithoutPrintRecordsInput, PrinterUncheckedCreateWithoutPrintRecordsInput>
    connectOrCreate?: PrinterCreateOrConnectWithoutPrintRecordsInput
    connect?: PrinterWhereUniqueInput
  }

  export type DocumentUpdateOneRequiredWithoutPrintRecordsNestedInput = {
    create?: XOR<DocumentCreateWithoutPrintRecordsInput, DocumentUncheckedCreateWithoutPrintRecordsInput>
    connectOrCreate?: DocumentCreateOrConnectWithoutPrintRecordsInput
    upsert?: DocumentUpsertWithoutPrintRecordsInput
    connect?: DocumentWhereUniqueInput
    update?: XOR<XOR<DocumentUpdateToOneWithWhereWithoutPrintRecordsInput, DocumentUpdateWithoutPrintRecordsInput>, DocumentUncheckedUpdateWithoutPrintRecordsInput>
  }

  export type PrinterUpdateOneRequiredWithoutPrintRecordsNestedInput = {
    create?: XOR<PrinterCreateWithoutPrintRecordsInput, PrinterUncheckedCreateWithoutPrintRecordsInput>
    connectOrCreate?: PrinterCreateOrConnectWithoutPrintRecordsInput
    upsert?: PrinterUpsertWithoutPrintRecordsInput
    connect?: PrinterWhereUniqueInput
    update?: XOR<XOR<PrinterUpdateToOneWithWhereWithoutPrintRecordsInput, PrinterUpdateWithoutPrintRecordsInput>, PrinterUncheckedUpdateWithoutPrintRecordsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type CustomerCreateWithoutSpsomemberInput = {
    customerId: string
    purchaseAndPrintHistory: string
    accountBalance: number
    summary: string
    remainingPages: number
    fullName: string
    email: string
    phoneNumber: string
    usageHistory: string
    parameterChanges: string
    feedbacks?: FeedbackCreateNestedManyWithoutCustomerInput
    purchaseOrders?: PurchaseOrderCreateNestedManyWithoutCustomerInput
    printOrders?: PrintOrderCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutSpsomemberInput = {
    customerId: string
    purchaseAndPrintHistory: string
    accountBalance: number
    summary: string
    remainingPages: number
    fullName: string
    email: string
    phoneNumber: string
    usageHistory: string
    parameterChanges: string
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutCustomerInput
    purchaseOrders?: PurchaseOrderUncheckedCreateNestedManyWithoutCustomerInput
    printOrders?: PrintOrderUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutSpsomemberInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutSpsomemberInput, CustomerUncheckedCreateWithoutSpsomemberInput>
  }

  export type CustomerUpsertWithoutSpsomemberInput = {
    update: XOR<CustomerUpdateWithoutSpsomemberInput, CustomerUncheckedUpdateWithoutSpsomemberInput>
    create: XOR<CustomerCreateWithoutSpsomemberInput, CustomerUncheckedCreateWithoutSpsomemberInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutSpsomemberInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutSpsomemberInput, CustomerUncheckedUpdateWithoutSpsomemberInput>
  }

  export type CustomerUpdateWithoutSpsomemberInput = {
    customerId?: StringFieldUpdateOperationsInput | string
    purchaseAndPrintHistory?: StringFieldUpdateOperationsInput | string
    accountBalance?: FloatFieldUpdateOperationsInput | number
    summary?: StringFieldUpdateOperationsInput | string
    remainingPages?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    usageHistory?: StringFieldUpdateOperationsInput | string
    parameterChanges?: StringFieldUpdateOperationsInput | string
    feedbacks?: FeedbackUpdateManyWithoutCustomerNestedInput
    purchaseOrders?: PurchaseOrderUpdateManyWithoutCustomerNestedInput
    printOrders?: PrintOrderUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutSpsomemberInput = {
    customerId?: StringFieldUpdateOperationsInput | string
    purchaseAndPrintHistory?: StringFieldUpdateOperationsInput | string
    accountBalance?: FloatFieldUpdateOperationsInput | number
    summary?: StringFieldUpdateOperationsInput | string
    remainingPages?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    usageHistory?: StringFieldUpdateOperationsInput | string
    parameterChanges?: StringFieldUpdateOperationsInput | string
    feedbacks?: FeedbackUncheckedUpdateManyWithoutCustomerNestedInput
    purchaseOrders?: PurchaseOrderUncheckedUpdateManyWithoutCustomerNestedInput
    printOrders?: PrintOrderUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type SPSOMemberCreateWithoutCustomerInput = {
    memberId: string
    birthDate: Date | string
    address: string
    fullName: string
    email: string
    phoneNumber: string
    usageHistory: string
  }

  export type SPSOMemberUncheckedCreateWithoutCustomerInput = {
    memberId: string
    birthDate: Date | string
    address: string
    fullName: string
    email: string
    phoneNumber: string
    usageHistory: string
  }

  export type SPSOMemberCreateOrConnectWithoutCustomerInput = {
    where: SPSOMemberWhereUniqueInput
    create: XOR<SPSOMemberCreateWithoutCustomerInput, SPSOMemberUncheckedCreateWithoutCustomerInput>
  }

  export type FeedbackCreateWithoutCustomerInput = {
    feedbackId: string
    rating: number
    content: string
    feedbackTime: Date | string
  }

  export type FeedbackUncheckedCreateWithoutCustomerInput = {
    feedbackId: string
    rating: number
    content: string
    feedbackTime: Date | string
  }

  export type FeedbackCreateOrConnectWithoutCustomerInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutCustomerInput, FeedbackUncheckedCreateWithoutCustomerInput>
  }

  export type FeedbackCreateManyCustomerInputEnvelope = {
    data: FeedbackCreateManyCustomerInput | FeedbackCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type PurchaseOrderCreateWithoutCustomerInput = {
    transactionId: string
    purchaseTime: Date | string
    price: number
    status: string
    quantity: number
    paperType: string
    printer: PrinterCreateNestedOneWithoutPurchaseOrdersInput
  }

  export type PurchaseOrderUncheckedCreateWithoutCustomerInput = {
    transactionId: string
    purchaseTime: Date | string
    price: number
    status: string
    quantity: number
    paperType: string
    printerId: string
  }

  export type PurchaseOrderCreateOrConnectWithoutCustomerInput = {
    where: PurchaseOrderWhereUniqueInput
    create: XOR<PurchaseOrderCreateWithoutCustomerInput, PurchaseOrderUncheckedCreateWithoutCustomerInput>
  }

  export type PurchaseOrderCreateManyCustomerInputEnvelope = {
    data: PurchaseOrderCreateManyCustomerInput | PurchaseOrderCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type PrintOrderCreateWithoutCustomerInput = {
    orderId: string
    printAttributes: string
    startTime: Date | string
    endTime: Date | string
    status: string
    copyCount: number
    printedDocument: string
    printer: PrinterCreateNestedOneWithoutPrintOrdersInput
  }

  export type PrintOrderUncheckedCreateWithoutCustomerInput = {
    orderId: string
    printAttributes: string
    startTime: Date | string
    endTime: Date | string
    status: string
    copyCount: number
    printedDocument: string
    printerId: string
  }

  export type PrintOrderCreateOrConnectWithoutCustomerInput = {
    where: PrintOrderWhereUniqueInput
    create: XOR<PrintOrderCreateWithoutCustomerInput, PrintOrderUncheckedCreateWithoutCustomerInput>
  }

  export type PrintOrderCreateManyCustomerInputEnvelope = {
    data: PrintOrderCreateManyCustomerInput | PrintOrderCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type SPSOMemberUpsertWithoutCustomerInput = {
    update: XOR<SPSOMemberUpdateWithoutCustomerInput, SPSOMemberUncheckedUpdateWithoutCustomerInput>
    create: XOR<SPSOMemberCreateWithoutCustomerInput, SPSOMemberUncheckedCreateWithoutCustomerInput>
    where?: SPSOMemberWhereInput
  }

  export type SPSOMemberUpdateToOneWithWhereWithoutCustomerInput = {
    where?: SPSOMemberWhereInput
    data: XOR<SPSOMemberUpdateWithoutCustomerInput, SPSOMemberUncheckedUpdateWithoutCustomerInput>
  }

  export type SPSOMemberUpdateWithoutCustomerInput = {
    memberId?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    usageHistory?: StringFieldUpdateOperationsInput | string
  }

  export type SPSOMemberUncheckedUpdateWithoutCustomerInput = {
    memberId?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    usageHistory?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackUpsertWithWhereUniqueWithoutCustomerInput = {
    where: FeedbackWhereUniqueInput
    update: XOR<FeedbackUpdateWithoutCustomerInput, FeedbackUncheckedUpdateWithoutCustomerInput>
    create: XOR<FeedbackCreateWithoutCustomerInput, FeedbackUncheckedCreateWithoutCustomerInput>
  }

  export type FeedbackUpdateWithWhereUniqueWithoutCustomerInput = {
    where: FeedbackWhereUniqueInput
    data: XOR<FeedbackUpdateWithoutCustomerInput, FeedbackUncheckedUpdateWithoutCustomerInput>
  }

  export type FeedbackUpdateManyWithWhereWithoutCustomerInput = {
    where: FeedbackScalarWhereInput
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyWithoutCustomerInput>
  }

  export type FeedbackScalarWhereInput = {
    AND?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
    OR?: FeedbackScalarWhereInput[]
    NOT?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
    feedbackId?: StringFilter<"Feedback"> | string
    rating?: IntFilter<"Feedback"> | number
    content?: StringFilter<"Feedback"> | string
    feedbackTime?: DateTimeFilter<"Feedback"> | Date | string
    customerId?: StringFilter<"Feedback"> | string
  }

  export type PurchaseOrderUpsertWithWhereUniqueWithoutCustomerInput = {
    where: PurchaseOrderWhereUniqueInput
    update: XOR<PurchaseOrderUpdateWithoutCustomerInput, PurchaseOrderUncheckedUpdateWithoutCustomerInput>
    create: XOR<PurchaseOrderCreateWithoutCustomerInput, PurchaseOrderUncheckedCreateWithoutCustomerInput>
  }

  export type PurchaseOrderUpdateWithWhereUniqueWithoutCustomerInput = {
    where: PurchaseOrderWhereUniqueInput
    data: XOR<PurchaseOrderUpdateWithoutCustomerInput, PurchaseOrderUncheckedUpdateWithoutCustomerInput>
  }

  export type PurchaseOrderUpdateManyWithWhereWithoutCustomerInput = {
    where: PurchaseOrderScalarWhereInput
    data: XOR<PurchaseOrderUpdateManyMutationInput, PurchaseOrderUncheckedUpdateManyWithoutCustomerInput>
  }

  export type PurchaseOrderScalarWhereInput = {
    AND?: PurchaseOrderScalarWhereInput | PurchaseOrderScalarWhereInput[]
    OR?: PurchaseOrderScalarWhereInput[]
    NOT?: PurchaseOrderScalarWhereInput | PurchaseOrderScalarWhereInput[]
    transactionId?: StringFilter<"PurchaseOrder"> | string
    purchaseTime?: DateTimeFilter<"PurchaseOrder"> | Date | string
    price?: FloatFilter<"PurchaseOrder"> | number
    status?: StringFilter<"PurchaseOrder"> | string
    quantity?: IntFilter<"PurchaseOrder"> | number
    paperType?: StringFilter<"PurchaseOrder"> | string
    customerId?: StringFilter<"PurchaseOrder"> | string
    printerId?: StringFilter<"PurchaseOrder"> | string
  }

  export type PrintOrderUpsertWithWhereUniqueWithoutCustomerInput = {
    where: PrintOrderWhereUniqueInput
    update: XOR<PrintOrderUpdateWithoutCustomerInput, PrintOrderUncheckedUpdateWithoutCustomerInput>
    create: XOR<PrintOrderCreateWithoutCustomerInput, PrintOrderUncheckedCreateWithoutCustomerInput>
  }

  export type PrintOrderUpdateWithWhereUniqueWithoutCustomerInput = {
    where: PrintOrderWhereUniqueInput
    data: XOR<PrintOrderUpdateWithoutCustomerInput, PrintOrderUncheckedUpdateWithoutCustomerInput>
  }

  export type PrintOrderUpdateManyWithWhereWithoutCustomerInput = {
    where: PrintOrderScalarWhereInput
    data: XOR<PrintOrderUpdateManyMutationInput, PrintOrderUncheckedUpdateManyWithoutCustomerInput>
  }

  export type PrintOrderScalarWhereInput = {
    AND?: PrintOrderScalarWhereInput | PrintOrderScalarWhereInput[]
    OR?: PrintOrderScalarWhereInput[]
    NOT?: PrintOrderScalarWhereInput | PrintOrderScalarWhereInput[]
    orderId?: StringFilter<"PrintOrder"> | string
    printAttributes?: StringFilter<"PrintOrder"> | string
    startTime?: DateTimeFilter<"PrintOrder"> | Date | string
    endTime?: DateTimeFilter<"PrintOrder"> | Date | string
    status?: StringFilter<"PrintOrder"> | string
    copyCount?: IntFilter<"PrintOrder"> | number
    printedDocument?: StringFilter<"PrintOrder"> | string
    customerId?: StringFilter<"PrintOrder"> | string
    printerId?: StringFilter<"PrintOrder"> | string
  }

  export type CustomerCreateWithoutFeedbacksInput = {
    customerId: string
    purchaseAndPrintHistory: string
    accountBalance: number
    summary: string
    remainingPages: number
    fullName: string
    email: string
    phoneNumber: string
    usageHistory: string
    parameterChanges: string
    spsomember?: SPSOMemberCreateNestedOneWithoutCustomerInput
    purchaseOrders?: PurchaseOrderCreateNestedManyWithoutCustomerInput
    printOrders?: PrintOrderCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutFeedbacksInput = {
    customerId: string
    purchaseAndPrintHistory: string
    accountBalance: number
    summary: string
    remainingPages: number
    fullName: string
    email: string
    phoneNumber: string
    usageHistory: string
    parameterChanges: string
    memberId?: string | null
    purchaseOrders?: PurchaseOrderUncheckedCreateNestedManyWithoutCustomerInput
    printOrders?: PrintOrderUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutFeedbacksInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutFeedbacksInput, CustomerUncheckedCreateWithoutFeedbacksInput>
  }

  export type CustomerUpsertWithoutFeedbacksInput = {
    update: XOR<CustomerUpdateWithoutFeedbacksInput, CustomerUncheckedUpdateWithoutFeedbacksInput>
    create: XOR<CustomerCreateWithoutFeedbacksInput, CustomerUncheckedCreateWithoutFeedbacksInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutFeedbacksInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutFeedbacksInput, CustomerUncheckedUpdateWithoutFeedbacksInput>
  }

  export type CustomerUpdateWithoutFeedbacksInput = {
    customerId?: StringFieldUpdateOperationsInput | string
    purchaseAndPrintHistory?: StringFieldUpdateOperationsInput | string
    accountBalance?: FloatFieldUpdateOperationsInput | number
    summary?: StringFieldUpdateOperationsInput | string
    remainingPages?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    usageHistory?: StringFieldUpdateOperationsInput | string
    parameterChanges?: StringFieldUpdateOperationsInput | string
    spsomember?: SPSOMemberUpdateOneWithoutCustomerNestedInput
    purchaseOrders?: PurchaseOrderUpdateManyWithoutCustomerNestedInput
    printOrders?: PrintOrderUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutFeedbacksInput = {
    customerId?: StringFieldUpdateOperationsInput | string
    purchaseAndPrintHistory?: StringFieldUpdateOperationsInput | string
    accountBalance?: FloatFieldUpdateOperationsInput | number
    summary?: StringFieldUpdateOperationsInput | string
    remainingPages?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    usageHistory?: StringFieldUpdateOperationsInput | string
    parameterChanges?: StringFieldUpdateOperationsInput | string
    memberId?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseOrders?: PurchaseOrderUncheckedUpdateManyWithoutCustomerNestedInput
    printOrders?: PrintOrderUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type PurchaseOrderCreateWithoutPrinterInput = {
    transactionId: string
    purchaseTime: Date | string
    price: number
    status: string
    quantity: number
    paperType: string
    customer: CustomerCreateNestedOneWithoutPurchaseOrdersInput
  }

  export type PurchaseOrderUncheckedCreateWithoutPrinterInput = {
    transactionId: string
    purchaseTime: Date | string
    price: number
    status: string
    quantity: number
    paperType: string
    customerId: string
  }

  export type PurchaseOrderCreateOrConnectWithoutPrinterInput = {
    where: PurchaseOrderWhereUniqueInput
    create: XOR<PurchaseOrderCreateWithoutPrinterInput, PurchaseOrderUncheckedCreateWithoutPrinterInput>
  }

  export type PurchaseOrderCreateManyPrinterInputEnvelope = {
    data: PurchaseOrderCreateManyPrinterInput | PurchaseOrderCreateManyPrinterInput[]
    skipDuplicates?: boolean
  }

  export type PrintOrderCreateWithoutPrinterInput = {
    orderId: string
    printAttributes: string
    startTime: Date | string
    endTime: Date | string
    status: string
    copyCount: number
    printedDocument: string
    customer: CustomerCreateNestedOneWithoutPrintOrdersInput
  }

  export type PrintOrderUncheckedCreateWithoutPrinterInput = {
    orderId: string
    printAttributes: string
    startTime: Date | string
    endTime: Date | string
    status: string
    copyCount: number
    printedDocument: string
    customerId: string
  }

  export type PrintOrderCreateOrConnectWithoutPrinterInput = {
    where: PrintOrderWhereUniqueInput
    create: XOR<PrintOrderCreateWithoutPrinterInput, PrintOrderUncheckedCreateWithoutPrinterInput>
  }

  export type PrintOrderCreateManyPrinterInputEnvelope = {
    data: PrintOrderCreateManyPrinterInput | PrintOrderCreateManyPrinterInput[]
    skipDuplicates?: boolean
  }

  export type PrintRecordCreateWithoutPrinterInput = {
    document: DocumentCreateNestedOneWithoutPrintRecordsInput
  }

  export type PrintRecordUncheckedCreateWithoutPrinterInput = {
    documentId: string
  }

  export type PrintRecordCreateOrConnectWithoutPrinterInput = {
    where: PrintRecordWhereUniqueInput
    create: XOR<PrintRecordCreateWithoutPrinterInput, PrintRecordUncheckedCreateWithoutPrinterInput>
  }

  export type PrintRecordCreateManyPrinterInputEnvelope = {
    data: PrintRecordCreateManyPrinterInput | PrintRecordCreateManyPrinterInput[]
    skipDuplicates?: boolean
  }

  export type PurchaseOrderUpsertWithWhereUniqueWithoutPrinterInput = {
    where: PurchaseOrderWhereUniqueInput
    update: XOR<PurchaseOrderUpdateWithoutPrinterInput, PurchaseOrderUncheckedUpdateWithoutPrinterInput>
    create: XOR<PurchaseOrderCreateWithoutPrinterInput, PurchaseOrderUncheckedCreateWithoutPrinterInput>
  }

  export type PurchaseOrderUpdateWithWhereUniqueWithoutPrinterInput = {
    where: PurchaseOrderWhereUniqueInput
    data: XOR<PurchaseOrderUpdateWithoutPrinterInput, PurchaseOrderUncheckedUpdateWithoutPrinterInput>
  }

  export type PurchaseOrderUpdateManyWithWhereWithoutPrinterInput = {
    where: PurchaseOrderScalarWhereInput
    data: XOR<PurchaseOrderUpdateManyMutationInput, PurchaseOrderUncheckedUpdateManyWithoutPrinterInput>
  }

  export type PrintOrderUpsertWithWhereUniqueWithoutPrinterInput = {
    where: PrintOrderWhereUniqueInput
    update: XOR<PrintOrderUpdateWithoutPrinterInput, PrintOrderUncheckedUpdateWithoutPrinterInput>
    create: XOR<PrintOrderCreateWithoutPrinterInput, PrintOrderUncheckedCreateWithoutPrinterInput>
  }

  export type PrintOrderUpdateWithWhereUniqueWithoutPrinterInput = {
    where: PrintOrderWhereUniqueInput
    data: XOR<PrintOrderUpdateWithoutPrinterInput, PrintOrderUncheckedUpdateWithoutPrinterInput>
  }

  export type PrintOrderUpdateManyWithWhereWithoutPrinterInput = {
    where: PrintOrderScalarWhereInput
    data: XOR<PrintOrderUpdateManyMutationInput, PrintOrderUncheckedUpdateManyWithoutPrinterInput>
  }

  export type PrintRecordUpsertWithWhereUniqueWithoutPrinterInput = {
    where: PrintRecordWhereUniqueInput
    update: XOR<PrintRecordUpdateWithoutPrinterInput, PrintRecordUncheckedUpdateWithoutPrinterInput>
    create: XOR<PrintRecordCreateWithoutPrinterInput, PrintRecordUncheckedCreateWithoutPrinterInput>
  }

  export type PrintRecordUpdateWithWhereUniqueWithoutPrinterInput = {
    where: PrintRecordWhereUniqueInput
    data: XOR<PrintRecordUpdateWithoutPrinterInput, PrintRecordUncheckedUpdateWithoutPrinterInput>
  }

  export type PrintRecordUpdateManyWithWhereWithoutPrinterInput = {
    where: PrintRecordScalarWhereInput
    data: XOR<PrintRecordUpdateManyMutationInput, PrintRecordUncheckedUpdateManyWithoutPrinterInput>
  }

  export type PrintRecordScalarWhereInput = {
    AND?: PrintRecordScalarWhereInput | PrintRecordScalarWhereInput[]
    OR?: PrintRecordScalarWhereInput[]
    NOT?: PrintRecordScalarWhereInput | PrintRecordScalarWhereInput[]
    documentId?: StringFilter<"PrintRecord"> | string
    printerId?: StringFilter<"PrintRecord"> | string
  }

  export type CustomerCreateWithoutPurchaseOrdersInput = {
    customerId: string
    purchaseAndPrintHistory: string
    accountBalance: number
    summary: string
    remainingPages: number
    fullName: string
    email: string
    phoneNumber: string
    usageHistory: string
    parameterChanges: string
    spsomember?: SPSOMemberCreateNestedOneWithoutCustomerInput
    feedbacks?: FeedbackCreateNestedManyWithoutCustomerInput
    printOrders?: PrintOrderCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutPurchaseOrdersInput = {
    customerId: string
    purchaseAndPrintHistory: string
    accountBalance: number
    summary: string
    remainingPages: number
    fullName: string
    email: string
    phoneNumber: string
    usageHistory: string
    parameterChanges: string
    memberId?: string | null
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutCustomerInput
    printOrders?: PrintOrderUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutPurchaseOrdersInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutPurchaseOrdersInput, CustomerUncheckedCreateWithoutPurchaseOrdersInput>
  }

  export type PrinterCreateWithoutPurchaseOrdersInput = {
    printerId: string
    printerType: string
    brandName: string
    description: string
    facility: string
    building: string
    room: string
    isInstalled: boolean
    printOrders?: PrintOrderCreateNestedManyWithoutPrinterInput
    printRecords?: PrintRecordCreateNestedManyWithoutPrinterInput
  }

  export type PrinterUncheckedCreateWithoutPurchaseOrdersInput = {
    printerId: string
    printerType: string
    brandName: string
    description: string
    facility: string
    building: string
    room: string
    isInstalled: boolean
    printOrders?: PrintOrderUncheckedCreateNestedManyWithoutPrinterInput
    printRecords?: PrintRecordUncheckedCreateNestedManyWithoutPrinterInput
  }

  export type PrinterCreateOrConnectWithoutPurchaseOrdersInput = {
    where: PrinterWhereUniqueInput
    create: XOR<PrinterCreateWithoutPurchaseOrdersInput, PrinterUncheckedCreateWithoutPurchaseOrdersInput>
  }

  export type CustomerUpsertWithoutPurchaseOrdersInput = {
    update: XOR<CustomerUpdateWithoutPurchaseOrdersInput, CustomerUncheckedUpdateWithoutPurchaseOrdersInput>
    create: XOR<CustomerCreateWithoutPurchaseOrdersInput, CustomerUncheckedCreateWithoutPurchaseOrdersInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutPurchaseOrdersInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutPurchaseOrdersInput, CustomerUncheckedUpdateWithoutPurchaseOrdersInput>
  }

  export type CustomerUpdateWithoutPurchaseOrdersInput = {
    customerId?: StringFieldUpdateOperationsInput | string
    purchaseAndPrintHistory?: StringFieldUpdateOperationsInput | string
    accountBalance?: FloatFieldUpdateOperationsInput | number
    summary?: StringFieldUpdateOperationsInput | string
    remainingPages?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    usageHistory?: StringFieldUpdateOperationsInput | string
    parameterChanges?: StringFieldUpdateOperationsInput | string
    spsomember?: SPSOMemberUpdateOneWithoutCustomerNestedInput
    feedbacks?: FeedbackUpdateManyWithoutCustomerNestedInput
    printOrders?: PrintOrderUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutPurchaseOrdersInput = {
    customerId?: StringFieldUpdateOperationsInput | string
    purchaseAndPrintHistory?: StringFieldUpdateOperationsInput | string
    accountBalance?: FloatFieldUpdateOperationsInput | number
    summary?: StringFieldUpdateOperationsInput | string
    remainingPages?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    usageHistory?: StringFieldUpdateOperationsInput | string
    parameterChanges?: StringFieldUpdateOperationsInput | string
    memberId?: NullableStringFieldUpdateOperationsInput | string | null
    feedbacks?: FeedbackUncheckedUpdateManyWithoutCustomerNestedInput
    printOrders?: PrintOrderUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type PrinterUpsertWithoutPurchaseOrdersInput = {
    update: XOR<PrinterUpdateWithoutPurchaseOrdersInput, PrinterUncheckedUpdateWithoutPurchaseOrdersInput>
    create: XOR<PrinterCreateWithoutPurchaseOrdersInput, PrinterUncheckedCreateWithoutPurchaseOrdersInput>
    where?: PrinterWhereInput
  }

  export type PrinterUpdateToOneWithWhereWithoutPurchaseOrdersInput = {
    where?: PrinterWhereInput
    data: XOR<PrinterUpdateWithoutPurchaseOrdersInput, PrinterUncheckedUpdateWithoutPurchaseOrdersInput>
  }

  export type PrinterUpdateWithoutPurchaseOrdersInput = {
    printerId?: StringFieldUpdateOperationsInput | string
    printerType?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    facility?: StringFieldUpdateOperationsInput | string
    building?: StringFieldUpdateOperationsInput | string
    room?: StringFieldUpdateOperationsInput | string
    isInstalled?: BoolFieldUpdateOperationsInput | boolean
    printOrders?: PrintOrderUpdateManyWithoutPrinterNestedInput
    printRecords?: PrintRecordUpdateManyWithoutPrinterNestedInput
  }

  export type PrinterUncheckedUpdateWithoutPurchaseOrdersInput = {
    printerId?: StringFieldUpdateOperationsInput | string
    printerType?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    facility?: StringFieldUpdateOperationsInput | string
    building?: StringFieldUpdateOperationsInput | string
    room?: StringFieldUpdateOperationsInput | string
    isInstalled?: BoolFieldUpdateOperationsInput | boolean
    printOrders?: PrintOrderUncheckedUpdateManyWithoutPrinterNestedInput
    printRecords?: PrintRecordUncheckedUpdateManyWithoutPrinterNestedInput
  }

  export type CustomerCreateWithoutPrintOrdersInput = {
    customerId: string
    purchaseAndPrintHistory: string
    accountBalance: number
    summary: string
    remainingPages: number
    fullName: string
    email: string
    phoneNumber: string
    usageHistory: string
    parameterChanges: string
    spsomember?: SPSOMemberCreateNestedOneWithoutCustomerInput
    feedbacks?: FeedbackCreateNestedManyWithoutCustomerInput
    purchaseOrders?: PurchaseOrderCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutPrintOrdersInput = {
    customerId: string
    purchaseAndPrintHistory: string
    accountBalance: number
    summary: string
    remainingPages: number
    fullName: string
    email: string
    phoneNumber: string
    usageHistory: string
    parameterChanges: string
    memberId?: string | null
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutCustomerInput
    purchaseOrders?: PurchaseOrderUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutPrintOrdersInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutPrintOrdersInput, CustomerUncheckedCreateWithoutPrintOrdersInput>
  }

  export type PrinterCreateWithoutPrintOrdersInput = {
    printerId: string
    printerType: string
    brandName: string
    description: string
    facility: string
    building: string
    room: string
    isInstalled: boolean
    purchaseOrders?: PurchaseOrderCreateNestedManyWithoutPrinterInput
    printRecords?: PrintRecordCreateNestedManyWithoutPrinterInput
  }

  export type PrinterUncheckedCreateWithoutPrintOrdersInput = {
    printerId: string
    printerType: string
    brandName: string
    description: string
    facility: string
    building: string
    room: string
    isInstalled: boolean
    purchaseOrders?: PurchaseOrderUncheckedCreateNestedManyWithoutPrinterInput
    printRecords?: PrintRecordUncheckedCreateNestedManyWithoutPrinterInput
  }

  export type PrinterCreateOrConnectWithoutPrintOrdersInput = {
    where: PrinterWhereUniqueInput
    create: XOR<PrinterCreateWithoutPrintOrdersInput, PrinterUncheckedCreateWithoutPrintOrdersInput>
  }

  export type CustomerUpsertWithoutPrintOrdersInput = {
    update: XOR<CustomerUpdateWithoutPrintOrdersInput, CustomerUncheckedUpdateWithoutPrintOrdersInput>
    create: XOR<CustomerCreateWithoutPrintOrdersInput, CustomerUncheckedCreateWithoutPrintOrdersInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutPrintOrdersInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutPrintOrdersInput, CustomerUncheckedUpdateWithoutPrintOrdersInput>
  }

  export type CustomerUpdateWithoutPrintOrdersInput = {
    customerId?: StringFieldUpdateOperationsInput | string
    purchaseAndPrintHistory?: StringFieldUpdateOperationsInput | string
    accountBalance?: FloatFieldUpdateOperationsInput | number
    summary?: StringFieldUpdateOperationsInput | string
    remainingPages?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    usageHistory?: StringFieldUpdateOperationsInput | string
    parameterChanges?: StringFieldUpdateOperationsInput | string
    spsomember?: SPSOMemberUpdateOneWithoutCustomerNestedInput
    feedbacks?: FeedbackUpdateManyWithoutCustomerNestedInput
    purchaseOrders?: PurchaseOrderUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutPrintOrdersInput = {
    customerId?: StringFieldUpdateOperationsInput | string
    purchaseAndPrintHistory?: StringFieldUpdateOperationsInput | string
    accountBalance?: FloatFieldUpdateOperationsInput | number
    summary?: StringFieldUpdateOperationsInput | string
    remainingPages?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    usageHistory?: StringFieldUpdateOperationsInput | string
    parameterChanges?: StringFieldUpdateOperationsInput | string
    memberId?: NullableStringFieldUpdateOperationsInput | string | null
    feedbacks?: FeedbackUncheckedUpdateManyWithoutCustomerNestedInput
    purchaseOrders?: PurchaseOrderUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type PrinterUpsertWithoutPrintOrdersInput = {
    update: XOR<PrinterUpdateWithoutPrintOrdersInput, PrinterUncheckedUpdateWithoutPrintOrdersInput>
    create: XOR<PrinterCreateWithoutPrintOrdersInput, PrinterUncheckedCreateWithoutPrintOrdersInput>
    where?: PrinterWhereInput
  }

  export type PrinterUpdateToOneWithWhereWithoutPrintOrdersInput = {
    where?: PrinterWhereInput
    data: XOR<PrinterUpdateWithoutPrintOrdersInput, PrinterUncheckedUpdateWithoutPrintOrdersInput>
  }

  export type PrinterUpdateWithoutPrintOrdersInput = {
    printerId?: StringFieldUpdateOperationsInput | string
    printerType?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    facility?: StringFieldUpdateOperationsInput | string
    building?: StringFieldUpdateOperationsInput | string
    room?: StringFieldUpdateOperationsInput | string
    isInstalled?: BoolFieldUpdateOperationsInput | boolean
    purchaseOrders?: PurchaseOrderUpdateManyWithoutPrinterNestedInput
    printRecords?: PrintRecordUpdateManyWithoutPrinterNestedInput
  }

  export type PrinterUncheckedUpdateWithoutPrintOrdersInput = {
    printerId?: StringFieldUpdateOperationsInput | string
    printerType?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    facility?: StringFieldUpdateOperationsInput | string
    building?: StringFieldUpdateOperationsInput | string
    room?: StringFieldUpdateOperationsInput | string
    isInstalled?: BoolFieldUpdateOperationsInput | boolean
    purchaseOrders?: PurchaseOrderUncheckedUpdateManyWithoutPrinterNestedInput
    printRecords?: PrintRecordUncheckedUpdateManyWithoutPrinterNestedInput
  }

  export type PrintRecordCreateWithoutDocumentInput = {
    printer: PrinterCreateNestedOneWithoutPrintRecordsInput
  }

  export type PrintRecordUncheckedCreateWithoutDocumentInput = {
    printerId: string
  }

  export type PrintRecordCreateOrConnectWithoutDocumentInput = {
    where: PrintRecordWhereUniqueInput
    create: XOR<PrintRecordCreateWithoutDocumentInput, PrintRecordUncheckedCreateWithoutDocumentInput>
  }

  export type PrintRecordCreateManyDocumentInputEnvelope = {
    data: PrintRecordCreateManyDocumentInput | PrintRecordCreateManyDocumentInput[]
    skipDuplicates?: boolean
  }

  export type PrintRecordUpsertWithWhereUniqueWithoutDocumentInput = {
    where: PrintRecordWhereUniqueInput
    update: XOR<PrintRecordUpdateWithoutDocumentInput, PrintRecordUncheckedUpdateWithoutDocumentInput>
    create: XOR<PrintRecordCreateWithoutDocumentInput, PrintRecordUncheckedCreateWithoutDocumentInput>
  }

  export type PrintRecordUpdateWithWhereUniqueWithoutDocumentInput = {
    where: PrintRecordWhereUniqueInput
    data: XOR<PrintRecordUpdateWithoutDocumentInput, PrintRecordUncheckedUpdateWithoutDocumentInput>
  }

  export type PrintRecordUpdateManyWithWhereWithoutDocumentInput = {
    where: PrintRecordScalarWhereInput
    data: XOR<PrintRecordUpdateManyMutationInput, PrintRecordUncheckedUpdateManyWithoutDocumentInput>
  }

  export type DocumentCreateWithoutPrintRecordsInput = {
    documentId: string
    title: string
    documentCount: number
    requiredDocument: string
  }

  export type DocumentUncheckedCreateWithoutPrintRecordsInput = {
    documentId: string
    title: string
    documentCount: number
    requiredDocument: string
  }

  export type DocumentCreateOrConnectWithoutPrintRecordsInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutPrintRecordsInput, DocumentUncheckedCreateWithoutPrintRecordsInput>
  }

  export type PrinterCreateWithoutPrintRecordsInput = {
    printerId: string
    printerType: string
    brandName: string
    description: string
    facility: string
    building: string
    room: string
    isInstalled: boolean
    purchaseOrders?: PurchaseOrderCreateNestedManyWithoutPrinterInput
    printOrders?: PrintOrderCreateNestedManyWithoutPrinterInput
  }

  export type PrinterUncheckedCreateWithoutPrintRecordsInput = {
    printerId: string
    printerType: string
    brandName: string
    description: string
    facility: string
    building: string
    room: string
    isInstalled: boolean
    purchaseOrders?: PurchaseOrderUncheckedCreateNestedManyWithoutPrinterInput
    printOrders?: PrintOrderUncheckedCreateNestedManyWithoutPrinterInput
  }

  export type PrinterCreateOrConnectWithoutPrintRecordsInput = {
    where: PrinterWhereUniqueInput
    create: XOR<PrinterCreateWithoutPrintRecordsInput, PrinterUncheckedCreateWithoutPrintRecordsInput>
  }

  export type DocumentUpsertWithoutPrintRecordsInput = {
    update: XOR<DocumentUpdateWithoutPrintRecordsInput, DocumentUncheckedUpdateWithoutPrintRecordsInput>
    create: XOR<DocumentCreateWithoutPrintRecordsInput, DocumentUncheckedCreateWithoutPrintRecordsInput>
    where?: DocumentWhereInput
  }

  export type DocumentUpdateToOneWithWhereWithoutPrintRecordsInput = {
    where?: DocumentWhereInput
    data: XOR<DocumentUpdateWithoutPrintRecordsInput, DocumentUncheckedUpdateWithoutPrintRecordsInput>
  }

  export type DocumentUpdateWithoutPrintRecordsInput = {
    documentId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    documentCount?: IntFieldUpdateOperationsInput | number
    requiredDocument?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentUncheckedUpdateWithoutPrintRecordsInput = {
    documentId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    documentCount?: IntFieldUpdateOperationsInput | number
    requiredDocument?: StringFieldUpdateOperationsInput | string
  }

  export type PrinterUpsertWithoutPrintRecordsInput = {
    update: XOR<PrinterUpdateWithoutPrintRecordsInput, PrinterUncheckedUpdateWithoutPrintRecordsInput>
    create: XOR<PrinterCreateWithoutPrintRecordsInput, PrinterUncheckedCreateWithoutPrintRecordsInput>
    where?: PrinterWhereInput
  }

  export type PrinterUpdateToOneWithWhereWithoutPrintRecordsInput = {
    where?: PrinterWhereInput
    data: XOR<PrinterUpdateWithoutPrintRecordsInput, PrinterUncheckedUpdateWithoutPrintRecordsInput>
  }

  export type PrinterUpdateWithoutPrintRecordsInput = {
    printerId?: StringFieldUpdateOperationsInput | string
    printerType?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    facility?: StringFieldUpdateOperationsInput | string
    building?: StringFieldUpdateOperationsInput | string
    room?: StringFieldUpdateOperationsInput | string
    isInstalled?: BoolFieldUpdateOperationsInput | boolean
    purchaseOrders?: PurchaseOrderUpdateManyWithoutPrinterNestedInput
    printOrders?: PrintOrderUpdateManyWithoutPrinterNestedInput
  }

  export type PrinterUncheckedUpdateWithoutPrintRecordsInput = {
    printerId?: StringFieldUpdateOperationsInput | string
    printerType?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    facility?: StringFieldUpdateOperationsInput | string
    building?: StringFieldUpdateOperationsInput | string
    room?: StringFieldUpdateOperationsInput | string
    isInstalled?: BoolFieldUpdateOperationsInput | boolean
    purchaseOrders?: PurchaseOrderUncheckedUpdateManyWithoutPrinterNestedInput
    printOrders?: PrintOrderUncheckedUpdateManyWithoutPrinterNestedInput
  }

  export type FeedbackCreateManyCustomerInput = {
    feedbackId: string
    rating: number
    content: string
    feedbackTime: Date | string
  }

  export type PurchaseOrderCreateManyCustomerInput = {
    transactionId: string
    purchaseTime: Date | string
    price: number
    status: string
    quantity: number
    paperType: string
    printerId: string
  }

  export type PrintOrderCreateManyCustomerInput = {
    orderId: string
    printAttributes: string
    startTime: Date | string
    endTime: Date | string
    status: string
    copyCount: number
    printedDocument: string
    printerId: string
  }

  export type FeedbackUpdateWithoutCustomerInput = {
    feedbackId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    feedbackTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUncheckedUpdateWithoutCustomerInput = {
    feedbackId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    feedbackTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUncheckedUpdateManyWithoutCustomerInput = {
    feedbackId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    feedbackTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PurchaseOrderUpdateWithoutCustomerInput = {
    transactionId?: StringFieldUpdateOperationsInput | string
    purchaseTime?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    paperType?: StringFieldUpdateOperationsInput | string
    printer?: PrinterUpdateOneRequiredWithoutPurchaseOrdersNestedInput
  }

  export type PurchaseOrderUncheckedUpdateWithoutCustomerInput = {
    transactionId?: StringFieldUpdateOperationsInput | string
    purchaseTime?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    paperType?: StringFieldUpdateOperationsInput | string
    printerId?: StringFieldUpdateOperationsInput | string
  }

  export type PurchaseOrderUncheckedUpdateManyWithoutCustomerInput = {
    transactionId?: StringFieldUpdateOperationsInput | string
    purchaseTime?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    paperType?: StringFieldUpdateOperationsInput | string
    printerId?: StringFieldUpdateOperationsInput | string
  }

  export type PrintOrderUpdateWithoutCustomerInput = {
    orderId?: StringFieldUpdateOperationsInput | string
    printAttributes?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    copyCount?: IntFieldUpdateOperationsInput | number
    printedDocument?: StringFieldUpdateOperationsInput | string
    printer?: PrinterUpdateOneRequiredWithoutPrintOrdersNestedInput
  }

  export type PrintOrderUncheckedUpdateWithoutCustomerInput = {
    orderId?: StringFieldUpdateOperationsInput | string
    printAttributes?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    copyCount?: IntFieldUpdateOperationsInput | number
    printedDocument?: StringFieldUpdateOperationsInput | string
    printerId?: StringFieldUpdateOperationsInput | string
  }

  export type PrintOrderUncheckedUpdateManyWithoutCustomerInput = {
    orderId?: StringFieldUpdateOperationsInput | string
    printAttributes?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    copyCount?: IntFieldUpdateOperationsInput | number
    printedDocument?: StringFieldUpdateOperationsInput | string
    printerId?: StringFieldUpdateOperationsInput | string
  }

  export type PurchaseOrderCreateManyPrinterInput = {
    transactionId: string
    purchaseTime: Date | string
    price: number
    status: string
    quantity: number
    paperType: string
    customerId: string
  }

  export type PrintOrderCreateManyPrinterInput = {
    orderId: string
    printAttributes: string
    startTime: Date | string
    endTime: Date | string
    status: string
    copyCount: number
    printedDocument: string
    customerId: string
  }

  export type PrintRecordCreateManyPrinterInput = {
    documentId: string
  }

  export type PurchaseOrderUpdateWithoutPrinterInput = {
    transactionId?: StringFieldUpdateOperationsInput | string
    purchaseTime?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    paperType?: StringFieldUpdateOperationsInput | string
    customer?: CustomerUpdateOneRequiredWithoutPurchaseOrdersNestedInput
  }

  export type PurchaseOrderUncheckedUpdateWithoutPrinterInput = {
    transactionId?: StringFieldUpdateOperationsInput | string
    purchaseTime?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    paperType?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
  }

  export type PurchaseOrderUncheckedUpdateManyWithoutPrinterInput = {
    transactionId?: StringFieldUpdateOperationsInput | string
    purchaseTime?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    paperType?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
  }

  export type PrintOrderUpdateWithoutPrinterInput = {
    orderId?: StringFieldUpdateOperationsInput | string
    printAttributes?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    copyCount?: IntFieldUpdateOperationsInput | number
    printedDocument?: StringFieldUpdateOperationsInput | string
    customer?: CustomerUpdateOneRequiredWithoutPrintOrdersNestedInput
  }

  export type PrintOrderUncheckedUpdateWithoutPrinterInput = {
    orderId?: StringFieldUpdateOperationsInput | string
    printAttributes?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    copyCount?: IntFieldUpdateOperationsInput | number
    printedDocument?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
  }

  export type PrintOrderUncheckedUpdateManyWithoutPrinterInput = {
    orderId?: StringFieldUpdateOperationsInput | string
    printAttributes?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    copyCount?: IntFieldUpdateOperationsInput | number
    printedDocument?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
  }

  export type PrintRecordUpdateWithoutPrinterInput = {
    document?: DocumentUpdateOneRequiredWithoutPrintRecordsNestedInput
  }

  export type PrintRecordUncheckedUpdateWithoutPrinterInput = {
    documentId?: StringFieldUpdateOperationsInput | string
  }

  export type PrintRecordUncheckedUpdateManyWithoutPrinterInput = {
    documentId?: StringFieldUpdateOperationsInput | string
  }

  export type PrintRecordCreateManyDocumentInput = {
    printerId: string
  }

  export type PrintRecordUpdateWithoutDocumentInput = {
    printer?: PrinterUpdateOneRequiredWithoutPrintRecordsNestedInput
  }

  export type PrintRecordUncheckedUpdateWithoutDocumentInput = {
    printerId?: StringFieldUpdateOperationsInput | string
  }

  export type PrintRecordUncheckedUpdateManyWithoutDocumentInput = {
    printerId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use CustomerCountOutputTypeDefaultArgs instead
     */
    export type CustomerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CustomerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PrinterCountOutputTypeDefaultArgs instead
     */
    export type PrinterCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PrinterCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DocumentCountOutputTypeDefaultArgs instead
     */
    export type DocumentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DocumentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SPSOMemberDefaultArgs instead
     */
    export type SPSOMemberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SPSOMemberDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CustomerDefaultArgs instead
     */
    export type CustomerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CustomerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FeedbackDefaultArgs instead
     */
    export type FeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FeedbackDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PrinterDefaultArgs instead
     */
    export type PrinterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PrinterDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PurchaseOrderDefaultArgs instead
     */
    export type PurchaseOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PurchaseOrderDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PrintOrderDefaultArgs instead
     */
    export type PrintOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PrintOrderDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DocumentDefaultArgs instead
     */
    export type DocumentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DocumentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PrintRecordDefaultArgs instead
     */
    export type PrintRecordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PrintRecordDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}